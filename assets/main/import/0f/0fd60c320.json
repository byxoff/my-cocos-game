[1,["142hclxMJCtKsI7grraJiz","76IMuam95HH51HXsZLH67k@f9941","ffuIqPr2JI9I8dPLYGRDpD@f9941","b7MFJ8MjNBwqr3fNq1j5dJ@f9941","afxHkx8GZGsJC+n+YfITQo@f9941","d2il24IEBBEpMUaZSiKEuL@f9941","81NOIozF9LArnTiH5UhhWm","74arw4OgtPdKohWWuE/Ia1","0eeOGv5ohJkrJby9wmxCra@f9941","3a05ochzBFt4Zc/QIhVcoa@f9941","a885FCnnBAjarkEDqQXNnG@f9941","a4iguSpYJHI7ybfiAXB4Lq@f9941","9f2QDdIhtPiY8s+6NCQ8g1@f9941","24pwTaKGdEbY0aXpIMdeCd@f9941","femfM/UlpJiLOXe7VEz4wz@f9941","20g1ukYUVPvKWKBRznAKo+@f9941","d0YA3bC1FInZxAWIK8BDQO","24DGQU/ctNnK/p8kQZ3Fg3@f9941","24T4Q8/WpKzrhKauRjWSsn@f9941","90wd2oIPtAdq8yraw+7X0o@f9941","c7ZuQiTPZPpLWj2vjrfCPB","a2zjyWFjlDsrAQSYglsjQF@f9941","c9pX4iXKNDxIW3A/+EqA05@f9941","c33yTs4INDrJH0UyK1eIf9@f9941","a3aqCvxXBNY5gNT+ggSpxn@f9941","32KRWi+yhMh5MPuicEQAi0@f9941","ddOhRNq39B8IK4LkOgkNSW","e2sMQM7jVAKoeLTzwR269c@f9941","e6KwJSen1I8r/kfv26yTz2@f9941","31QAWceZJPuq+lJW5N8Uit@f9941","f68LxKFEtPZJ6zVO1/B6Mp@f9941","94v4vhsYpJMqWvcMwLflhF@f9941","5dUTPakYdCyq8tFTwwLGBP@f9941","67AYwvXVVGsI8jPdxeeRqq@f9941","aca8z2ZdZGbp2k8IjUVZmG@f9941","30HGadLg9Py6p+9cUpNjHv@f9941","25GqAMLL9AXaYMMNpP2o4C@f9941","57gXe7VAxAupS0rYqBfDaL@f9941","bbUWX/iXRApYOOsyz56ZKG@f9941","b50Urt9f1BUqflZzyoFWlx@f9941","06s4NeRnRFeJC0/xMF5pB0@f9941","07QY1zsCFCmbmvOP849e76@f9941","2cmC5HzcpAhLp8jzeTA5Hp@f9941","afzw/cfr1HT6M/XJ0Tdqk3@f9941","c16cv/9m1NY7G20v0vbMFd@f9941","7cLOxuEl5IHJRkr3T2S+RM@f9941","29bvvh7SNKAa6zcGIkTXf5","36w+BX539BxabYHuSEXPab","9bq693+JlJWbz9ew7/9teS","87xD1MJkpN4Lr70+C44hAr","fbYTLrhQBBKIlY+BMZIjkE@f9941","06g84R2HNFraY1PIY7PLDp@f9941","26UWGUou9I8IDoEeIOd60i@f9941","2d1sE/LsJMWrUJLdO2Wt1A@f9941","ca3WY+u+dNg6PjXIgJiJDY@f9941","836y5rs85EZ6BaXC6a6k3K@f9941","81QiMptglKOphq1F785Yjc@f9941","3e6NmcpCVKSpdQjfFghx14@f9941","40J2laoQdO5ZH9CaNB4v+p@f9941","37THz9iZdNabBigwzW/e1e@f9941","39Z7kNw9dLcpGIE9Q1CuOl","03UQXgU1hBKouk7uTHadN2@f9941","54TknWPwVPqJqeCR+Y/Czo@f9941","95EkngnxZFbYuFpsqVTaFr@f9941","f4eaeqMwFMM46bu8jv+bpk","a85BHBNjRCPr5MXJmwC/Hm@f9941","df5C7Ra7tDE6KuxIMj0wYI@f9941","eaMJI07PxOXYg1sQ+Br8Tj@f9941","96csPw93NEGp5IVw+7a7Ke@f9941","b7vAR90tFOjZ+/dPRZjO/P@f9941","fc+jly+MVCpbjMYhuNmslt@f9941","6cCfly2y1J4pafVCxcmsVK@f9941","dbvKD1xTlJqKbun4I7zN2C","3dR+AD21xBf5F31T30Twxl@f9941","d0Lyc3YudAd5BOVNBVyw/z@f9941","8cWCSqChpNV4PItm7CSqTt@f9941","547nX6yn1K6LxOhjJjpeJv@f9941","c9XCeZHCFEZqGWavN9Rk60@f9941","98k11yeeZMs7HzQwxtNuTH@f9941","03ixqh5TJDFaFbXjNNcfbA@f9941","91f4KRhllCwIy91n8AB3iH@f9941","11BFGYcWtDyZ5pHQ7Yke9u@f9941","f2HI4mycpBiJl5n7VVlLil@f9941","d9aOKQG+xMAZhJaq9Bzbiv@f9941","7612UdDa1ILqUY5ulD8+ht@f9941","40JkaMedtL7LZpPgtxicE/@f9941","efJbQWyv5Ee4tZiT7sHNM1@f9941","c0FDkGmu1EfpQ2KuhRLRtu","8ejb5mlWFHsJKIbJuhJbHL","02wCjCBqVKaqvaGkI4hShc@f9941","7aUasZJXVETYU4eX56pKpy@f9941","72XFqOx+dOrY/uhdk/JDDp@f9941","49qFDa16xKJ4Rvd2Lswovk@f9941","dfVlk/EzlHY4WZ0m7Hecz3@f9941","17fUBMiM1Gl6M7dGcgD5bv@f9941","85uYF+HU5Jers0HYP0SVpi","50eNgVbWxL2ZSXh+qU1DLH","44D3l6sUhBMKWtkD9kVVE2","d09bmS7YZKdqoc5YeOpvSP","782o1LYfdFeYXi6hvxIsVs","89bMKO3tpJj79Gd9oIG3Gq","1fjFIij1NFN44YJzaVY1W0","8aYMbfB8VK7r4U7QcRCd26","5agVWoFrtCYYstp98CHdCm","97G9sjP/ZD67QiHDAWWjZj","20g1ukYUVPvKWKBRznAKo+@6c48a","24pwTaKGdEbY0aXpIMdeCd@6c48a","38BHQKqXVPvo2QP3mnbUPJ@f9941","9eAtE6Cr5I5IyHQ+smiI7j@f9941","df7YaFyt9IqZTu2yhWdSMF@f9941","2elblOvo5NrJ3KB+rSLSd5@f9941","dfTnmcyjBDEqyBI8h3J4SG@f9941","98+sLmyE5FqbvI8SpLrSJv@f9941","54TknWPwVPqJqeCR+Y/Czo@6c48a","53o5XX/pVN14NWxNCfk4VU@f9941","12QpTJGrJMqoLW5o+8p5YC@f9941","cadUPMGIlBypRwegRiTXIi@f9941","429GVI1v5Jraevoc6bcY8V@f9941","08NfECVHFHo5p2AcB6yc2y","56GTnWdUtO9I+AaVLHjhZn@f9941","1eWZOtTDlAhKpm5Uc1T/vu@f9941","c75U8f/LJAwZNFiOhcBAe8@f9941","24/eP8gzZPp5pynxgni+RA@f9941","95EkngnxZFbYuFpsqVTaFr@6c48a","098LfBYGtBdqaIXdjVIUb7@f9941","9f2QDdIhtPiY8s+6NCQ8g1@6c48a","afxHkx8GZGsJC+n+YfITQo@6c48a","b7MFJ8MjNBwqr3fNq1j5dJ@6c48a","d1NGQ2rJZCcbhjH0/erZWw","e8knJ9rSJH+qOgmm7vAwFq@6c48a","eeKE/5ffhNi60rxUNGZfxp@f9941","a15cAGcn5KsYhZTWoT+Qe2@f9941","ffuIqPr2JI9I8dPLYGRDpD@6c48a"],["node","_spriteFrame","_customMaterial","root","data","_parent","_textureSource","_verticalScrollBar","_defaultClip","closeButton","scrollView","_normalSprite","iconSprite","dailyCardsDetailsModal","_barSprite","openCardButton","_scrollView","dayLabel","numberOfDayLabel","licenseModalComponent","licenseButton","registrationDateLabel","usernameLabel","idLabel","profileModal","dailyCardsScrollView","_content","incomeLabel","buttonSprite","titleLabel","imageSprite","openedEverydayCardPrefab","unlockedEverydayCardPrefab","lockedEverydayCardPrefab","questItemPrefab","noEnoughSprite","_effectAsset","rewardLabel","questLabel","avatarIcon","rulesModalComponent","rulesButton","_cameraComponent","activeButton","buttonTasks","buttonLeaders","buttonFriends","buttonHome","textTasks","textLeaders","textStore","textFriends","textHome","iconTasks","iconLeaders","iconStore","iconFriends","iconHome","tasksPage","leadersPage","storePage","modalScrollView","totalFriendsLabel","busteryContent","tovariContent","busteryTab","tovariTab","zagolovok","marketTabBar","currentCoinsLabel","currentUsernameLabel","currentRankLabel","_target","notificationLabel","socketManager","copyNotificationLabel","referralLinkLabel","scene","_horizontalScrollBar","claimRewardButton","messageLabel","dayNumberLabel","passiveIncomePerHourLabel","passiveIncomeModal","incomeManager","boostsLabel","messagesLabel","energyValueLabel","energyProgressBar","coinsLabel","_handle","rulesTextLabel","marketModal","descrLabel","marketCountLabel","coinLabel","boosterModal","nextLevelIncomeLabel","levelLabel","boosterCostLabel","floatingTextPrefab","_hoverSprite","_pressedSprite","_disabledSprite","friendItemPrefab","leaderItemPrefab","questItemWithCheckerPrefab","unlockedModalCardPrefab","lockedModalCardPrefab","openedModalCardPrefab","_skeletonData","bannerPrefab","cardPrefab","cardRowPrefab","payButtonSprite","boosterBannerPrefab","boosterBannerMaxLevelPrefab","payBusterSprite","lockIcon","_font","checkButton","completedButtonSprite","activeButtonSprite"],[["cc.Label",["_actualFontSize","_string","_fontSize","_isBold","_lineHeight","_overflow","_horizontalAlign","_enableWrapText","_verticalAlign","_fontFamily","_cacheMode","_isSystemFontUsed","node","__prefab","_color","_font"],-9,1,4,5,6],["cc.Node",["_name","_layer","_active","_objFlags","_id","_mobility","_components","_parent","_lpos","_children","_prefab","_lscale"],-3,9,1,5,2,4,5],["cc.Node",["_name","_layer","_active","_components","_parent","_lpos","_children","_lscale","_prefab"],0,12,1,5,2,5,4],["cc.Sprite",["_sizeMode","_type","node","_spriteFrame","_color","__prefab","_customMaterial"],1,1,6,5,4,6],"cc.SpriteFrame",["cc.Layout",["_resizeMode","_layoutType","_isAlign","_spacingY","_paddingBottom","_spacingX","_paddingTop","_constraint","_constraintNum","_affectedByScale","node","__prefab"],-7,1,4],["cc.UITransform",["node","_contentSize","__prefab","_anchorPoint"],3,1,5,4,5],["cc.ScrollView",["bounceDuration","brake","horizontal","vertical","node","_content","_verticalScrollBar"],-1,1,1,1],["cc.ScrollBar",["_direction","_enableAutoHide","node","_scrollView","_handle"],1,1,1,1],["cc.Widget",["_alignFlags","_top","_bottom","_originalHeight","_alignMode","_right","node"],-3,1],["cc.Button",["_transition","node","_normalColor","_target","_normalSprite","_hoverSprite","_pressedSprite","_disabledSprite","__prefab"],2,1,5,1,6,6,6,6,4],["bc556ZFRnpMnYIvGUp1KHAx",["node","profileModal","closeButton","idLabel","usernameLabel","registrationDateLabel","licenseButton","licenseModalComponent","avatarIcon","rulesButton","rulesModalComponent"],3,1,1,1,1,1,1,1,1,1,1,1],["cc.Animation",["playOnLoad","node","_clips","_defaultClip"],2,1,3,6],["cc.ProgressBar",["_totalLength","_progress","node","_barSprite"],1,1,1],["cc.TTFFont",["_name","_native"],1],["cc.SceneAsset",["_name"],2],["cc.Node",["_name","_parent","_components","_lpos"],2,1,2,5],["cc.Canvas",["node","_cameraComponent"],3,1,1],["40497KNIRZM96W3FB/cr0rR",["node","mainPage","friendsPage","storePage","leadersPage","tasksPage","iconHome","iconFriends","iconStore","iconLeaders","iconTasks","textHome","textFriends","textStore","textLeaders","textTasks","buttonHome","buttonFriends","buttonLeaders","buttonTasks","activeButton"],3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],["7c18dlYu5RF5LQCQdfUNYsp",["node","modalScrollView","closeButton","dailyCardsDetailsModal","unlockedModalCardPrefab","lockedModalCardPrefab","openedModalCardPrefab"],3,1,1,1,1,6,6,6],["829ce7RYglPV6kmQF/Wbmbm",["node","scrollView","totalFriendsLabel","friendItemPrefab"],3,1,1,1,6],["4925f4FqhFPiZXmQ22WFh5o",["node","marketTabBar","zagolovok","tovariTab","busteryTab","tovariContent","busteryContent"],3,1,1,1,1,1,1,1],["509aaKVAOZOU4SArmn1DqkK",["node","scrollView","currentRankLabel","currentUsernameLabel","currentCoinsLabel","leaderItemPrefab"],3,1,1,1,1,1,6],["c7417NES8lIs6Zfbmx72vVI",["node","scrollView","iconSprites","questItemPrefab"],3,1,1,3,6],["c7417NES8lIs6Zfbmx72vVI",["iconSprites","node","scrollView","questItemPrefab","questItemWithCheckerPrefab"],2,1,1,6,6],["a3499p6cPRCUJJIwp3y1e/G",["node","dailyCardsScrollView","dailyCardsDetailsModal","openedEverydayCardPrefab","unlockedEverydayCardPrefab","lockedEverydayCardPrefab"],3,1,1,1,6,6,6],["56fbbewdwxJOIoAGHAh8WY0",["animationDuration","moveUpDistance","node","socketManager","notificationLabel"],1,1,1,1],["cc.Mask",["node"],3,1],["cc.Graphics",["node","_fillColor"],3,1,5],["22e80elXJBL5bdvJNtADFiY",["node","cardSprites"],3,1,3],["a0c39VZ6j5NRrT6cxMHqDGB",[],3],["574fddXu35GV6qNybxlYegp",["node","licenseModal","closeButton"],3,1,1,1],["18bc3yUuD1GYI5rJViGJcp5",["node","copyLinkNode","inviteFriendNode","referralLinkLabel","copyNotificationLabel"],3,1,1,1,1,1],["cc.Scene",["_name","_children","_prefab","_globals"],2,2,4,4],["cc.PrefabInfo",["root","asset","fileId","instance","nestedPrefabInstanceRoots","targetOverrides"],-3],["cc.PrefabInfo",["fileId","instance","targetOverrides","nestedPrefabInstanceRoots","root","asset"],-1,1,1],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree","skin","lightProbeInfo","postSettings"],3,4,4,4,4,4,4,4,4],["cc.AmbientInfo",["_skyColorHDR","_groundAlbedoHDR"],3,5,5],["cc.ShadowsInfo",["_shadowColor","_size"],3,5,5],["cc.SkyboxInfo",[],3],["cc.FogInfo",[],3],["cc.OctreeInfo",[],3],["cc.SkinInfo",["_enabled"],2],["cc.LightProbeInfo",[],3],["cc.PostSettingsInfo",[],3],["cc.Camera",["_projection","_orthoHeight","_near","_far","_visibility","node","_color"],-2,1,5],["sp.Skeleton",["defaultSkin","defaultAnimation","_preCacheMode","node"],0,1],["7af28zZEkNKYY1uSBPGocx/",["node","spine","socketManager","floatingTextPrefab"],3,1,1,1,6],["a3599luME5HILUcjWVa3vL6",["node","incomeLabel"],3,1,1],["dacc2yNsjdBz4TFNY64wdg5",["node","modalNode","closeNode"],3,1,1,1],["13fd9XksVVAHZfrZJ9Lv7Vg",["node","rulesModal","closeButton","scrollView","contentNode"],3,1,1,1,1,1],["cc0125FA1xF2qe5sm5mSkIX",["node","scrollContent","cardSprites","bannerSprites"],3,1,1,3,3],["0d5873T5+ZLn5A0pp0p3Xs8",["node","xMarkNode","buttonNode","marketItemSprites","marketScrollView"],3,1,1,1,12,1],["9bf4cPDFfRCioh+5OwoOEFs",["node","scrollContent","boosterSprites"],3,1,1,3],["1eb8b6/gslMqpbC1Qen7aCJ",["node","xMarkNode","boosterCostNode","buttonNode","boosterSprites","BoosterScrollView"],3,1,1,1,1,3,1],["cc.Material",["_name","_props","_states","_defines"],-1],["cc.Prefab",["_name"],2],["cc.CompPrefabInfo",["fileId"],2],["527acgmahlEspt4o+8udeNL",["node","__prefab","dayLabel"],3,1,4,1],["bd2afV6GjdEioGJ6Sb+apw4",["duration","node","__prefab"],2,1,4],["692192GTkdAGax+Q5kvh7vZ",["node","__prefab","numberOfDayLabel","iconSprite","openCardButton"],3,1,4,1,1,1],["7e2a9899BlAeazduSbsIEds",["node","__prefab","numberOfDayLabel","lockIcon"],3,1,4,1,1],["336f9EjZc9HTY4IMBl4Ozro",["node","__prefab","numberOfDayLabel","iconSprite","openCardButton"],3,1,4,1,1,1],["b27f9WqQnRO7biScKOuQLE5",["node","__prefab","questLabel","rewardLabel","iconSprite","iconSprites"],3,1,4,1,1,1,3],["0e709Mup8pKmKBboeAsAtck",["completedButtonText","activeButtonText","node","__prefab","questLabel","rewardLabel","iconSprite","iconSprites","checkButton","completedButtonSprite","activeButtonSprite"],1,1,4,1,1,1,3,1,6,6],["cc.EffectAsset",["_name","shaders","techniques"],0],["sp.SkeletonData",["_name","_atlasText","textureNames","_skeletonJson","textures"],-1,3]],[[57,0,2],[6,0,1,1],[35,0,1,2,3,4,5,5],[6,0,1,3,1],[2,0,1,4,3,5,3],[6,0,2,1,1],[1,0,1,7,6,8,3],[6,0,2,1,3,1],[3,0,2,3,2],[1,0,1,7,6,10,8,3],[3,0,2,5,3,2],[3,2,3,1],[0,1,0,2,4,3,12,6],[2,0,1,4,6,3,5,3],[56,0,2],[1,0,1,7,9,6,8,11,3],[1,0,1,7,6,8,11,3],[3,1,0,2,6,3,3],[6,0,1],[1,0,1,7,9,6,8,3],[2,0,1,4,3,8,5,3],[3,1,0,2,3],[3,0,2,2],[3,2,5,3,1],[0,1,0,2,4,3,12,13,6],[27,0,1],[28,0,1,1],[1,0,1,9,6,10,8,11,3],[6,0,2,1],[0,1,0,2,4,12,14,5],[1,0,1,7,9,6,3],[1,0,1,7,9,6,10,8,3],[1,0,2,1,7,9,6,4],[1,0,2,1,7,6,8,4],[1,0,1,7,6,10,3],[1,0,1,9,6,10,8,3],[9,0,3,4,6,4],[0,1,0,2,4,12,13,14,5],[1,0,1,7,6,3],[1,0,1,7,9,6,10,3],[12,0,1,2,3,2],[0,1,0,2,9,4,3,12,7],[2,0,1,6,3,5,7,3],[2,0,1,4,3,8,5,7,3],[1,0,2,1,7,6,4],[1,0,1,7,6,11,3],[3,1,0,2,4,3],[3,2,5,1],[10,0,1,2,3,2],[0,1,0,2,3,12,5],[0,1,0,2,12,4],[0,1,0,2,3,12,13,5],[7,0,1,2,4,5,4],[8,0,2,3,4,2],[2,0,1,4,3,5,7,3],[1,0,1,9,6,8,3],[3,1,0,2,4,6,3,3],[3,1,0,2,4,3,3],[3,1,0,2,5,3,3],[3,0,2,5,2],[9,0,5,1,2,3,4,6,7],[10,0,1,8,2,3,2],[5,0,1,6,4,3,2,10,7],[0,1,0,12,3],[0,1,6,0,2,4,3,12,7],[0,1,0,3,12,4],[7,0,1,2,4,5,6,4],[8,0,2,4,2],[58,0,1,2,1],[2,0,2,1,4,6,3,4],[2,0,1,4,6,3,5,7,3],[2,0,2,1,4,3,8,5,4],[1,0,1,9,6,8,11,3],[1,0,1,6,8,3],[1,0,2,1,7,9,6,8,11,4],[1,0,1,7,9,6,10,8,11,3],[1,0,1,7,6,10,8,11,3],[3,2,1],[25,0,1,2,3,4,5,1],[5,0,1,4,5,3,2,10,7],[0,1,0,3,12,14,4],[0,1,0,2,4,12,5],[0,1,0,2,4,12,13,5],[0,1,0,2,12,13,4],[0,1,6,0,3,12,13,5],[0,1,6,0,5,12,13,5],[0,1,6,0,2,4,3,12,13,7],[13,0,1,2,3,3],[55,0,1,2,3,5],[65,0,1,2,4],[14,0,1,3],[15,0,2],[2,0,1,6,3,3],[2,0,2,1,4,6,3,5,7,4],[2,0,2,1,4,6,3,5,4],[2,0,1,4,6,3,3],[2,0,2,1,4,3,4],[2,0,2,1,4,3,5,4],[2,0,1,4,3,3],[2,0,1,4,6,3,8,5,7,3],[1,0,1,4,9,6,8,4],[1,0,2,5,1,7,9,6,5],[1,0,2,1,7,9,6,8,4],[1,0,2,1,7,9,6,11,4],[1,0,2,1,7,6,8,11,4],[1,0,3,1,7,6,8,4],[1,0,1,6,10,8,3],[1,0,1,9,6,10,3],[1,0,2,1,7,6,10,8,4],[1,0,2,1,7,9,6,10,8,11,4],[1,0,3,1,7,6,10,4],[16,0,1,2,3,2],[11,0,8,1,2,3,4,5,6,7,1],[11,0,1,2,3,4,5,6,7,9,10,1],[3,1,0,2,3,3],[3,0,2,4,3,2],[3,1,0,4,3],[12,1,2,3,1],[17,0,1,1],[9,0,1,2,6,4],[18,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1],[19,0,1,2,3,4,5,6,1],[20,0,1,2,3,1],[21,0,1,2,3,4,5,6,1],[22,0,1,2,3,4,5,1],[23,0,1,2,3,1],[24,0,1,2,3,4,2],[10,0,1,2,3,4,5,6,7,2],[5,0,1,6,4,2,10,6],[5,0,1,2,10,4],[5,0,1,3,2,10,5],[5,0,1,5,3,7,8,9,10,8],[5,0,1,5,2,10,11,5],[26,0,1,2,3,4,3],[0,1,0,2,4,3,12,14,6],[0,1,0,3,14,4],[0,1,0,12,14,3],[0,1,0,2,4,5,7,12,14,7],[0,1,8,0,2,4,5,12,7],[0,1,0,2,4,7,3,12,7],[0,0,2,12,3],[0,0,2,4,3,12,5],[0,1,8,0,2,4,5,10,12,8],[0,1,0,2,4,5,3,12,7],[0,1,0,5,12,14,4],[0,1,0,2,5,3,12,14,6],[0,1,6,0,2,4,5,3,12,13,8],[0,1,6,0,2,4,5,11,3,12,13,15,9],[0,1,0,2,12,13,14,4],[0,1,6,0,2,3,12,13,6],[0,1,0,2,4,5,7,3,12,13,8],[0,1,6,0,2,12,13,5],[13,0,1,2,3],[7,0,1,3,4,4],[7,0,1,2,4,4],[29,0,1,1],[30,1],[31,0,1,2,1],[32,0,1,2,3,4,1],[8,1,2,3,2],[8,0,1,2,3,4,3],[33,0,1,2,3,2],[34,0,1,2,3,4,5,7],[36,0,1,2,3,4,5,6,7,1],[37,0,1,1],[38,0,1,1],[39,1],[40,1],[41,1],[42,0,2],[43,1],[44,1],[45,0,1,2,3,4,5,6,6],[46,0,1,2,3,4],[47,0,1,2,3,1],[48,0,1,1],[49,0,1,2,1],[50,0,1,2,3,4,1],[51,0,1,2,3,1],[52,0,1,2,3,4,1],[53,0,1,2,1],[54,0,1,2,3,4,5,1],[59,0,1,2,2],[60,0,1,2,3,4,1],[61,0,1,2,3,1],[62,0,1,2,3,4,1],[63,0,1,2,3,4,5,1],[64,0,1,2,3,4,5,6,7,8,9,10,3],[66,0,1,2,3,4,5]],[[[[90,"OpenSans-Regular","OpenSans-Regular.ttf"],-1],0,0,[],[],[]],[[[91,"MainScene"],[92,"Главная",33554432,[-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28],[[[18,-1],-2,[112,-11,-10,-9,-8,-7,-6,-5,-4,-3]],4,1,4]],[55,"ProfileModal",4294967295,[-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54],[[1,-29,[5,1140.5,2172.5]],[8,0,-30,21],[113,-40,-39,-38,-37,-36,-35,-34,-33,-32,-31],[40,true,-41,[38,39],40]],[1,0,-31.33,0]],[100,"Canvas",33554432,"beI88Z2HpFELqR4T5EMHpg",[-59,1,-60,-61,-62,-63,-64,2,-65,-66,-67,-68,-69,-70,-71],[[1,-55,[5,1080,1920]],[118,-57,-56],[119,45,5.684341886080802e-14,5.684341886080802e-14,-58]],[1,540,960,0]],[32,"Друзья",false,33554432,3,[-73,-74,-75,-76,-77,-78,-79,-80,-81,-82],[[18,-72]]],[93,"PassiveIncomeModal",false,4294967295,3,[-86,-87,-88,-89,-90,-91,-92],[[[1,-83,[5,1700,3200]],[8,0,-84,7],-85],4,4,1],[1,0,-12.586999999999989,0],[1,0.7,0.7,1]],[13,"BoosterModal",4294967295,3,[-97,-98,-99,-100,-101,-102,-103],[[[1,-93,[5,1080,2100]],[8,0,-94,107],-95,[40,true,-96,[108,109],110]],4,4,1,4],[1,0,-249.24900000000002,0]],[94,"MarketModal",false,4294967295,3,[-108,-109,-110,-111,-112,-113],[[[1,-104,[5,1080,2100]],[8,0,-105,77],[40,true,-106,[78,79],80],-107],4,4,4,1],[1,0,-249.24900000000002,0]],[13,"LicenseModal",4294967295,3,[-118,-119,-120,-121],[[[1,-114,[5,1140.5,2172.5]],[8,0,-115,26],[40,true,-116,[27,28],29],-117],4,4,4,1],[1,0,-31.33,0]],[13,"GameRulesModal",4294967295,3,[-126,-127,-128,-129],[[[1,-122,[5,1140.5,2068.7]],[8,0,-123,34],[40,true,-124,[35,36],37],-125],4,4,4,1],[1,0,-31.33,0]],[15,"tabbar",33554432,3,[-151,-152,-153,-154,-155,-156],[[1,-130,[5,1000,345]],[11,-131,178],[120,-150,1,4,-149,-148,-147,-146,-145,-144,-143,-142,-141,-140,-139,-138,-137,-136,-135,-134,-133,-132]],[1,0,-715.44,0],[1,1.045,1.0545,1]],[32,"Лидеры",false,33554432,3,[-158,-159,-160,-161,-162,-163],[[1,-157,[5,1080,644]]]],[69,"DailyCardsDetailsModal",false,4294967295,3,[-167,-168,-169,-170,-171],[[[1,-164,[5,1151.9,2238]],[8,0,-165,140],-166],4,4,1]],[101,"DailyCardsModal",false,1,4294967295,3,[-179,-180,-181,-182],[[1,-172,[5,1151.9,2238]],[8,0,-173,183],[121,-177,-176,-175,-174,184,185,186],[117,-178,[187,188],189]]],[72,"1st",33554432,[-185,-186,-187,-188,-189],[[1,-183,[5,400,432]],[11,-184,122]],[1,539.69,236.928,0],[1,0.65,0.65,1]],[13,"ScrollView",33554432,4,[-196,-197],[[[1,-190,[5,972,900]],[17,1,0,-191,46,47],-192,[122,-195,-194,-193,48]],4,4,1,4],[1,0,-167.96900000000005,0]],[32,"Магазин",false,33554432,3,[-199,-200,-201,-202],[[18,-198]]],[72,"marketTabBar",33554432,[-212,-213],[[1,-203,[5,1080,184]],[8,0,-204,115],[123,-211,-210,-209,-208,-207,-206,-205]],[1,0,-144.50900000000001,0],[1,0.9,0.9,1]],[13,"ScrollView",33554432,11,[-222,-223],[[[1,-214,[5,972,750]],[17,1,0,-215,126,127],-216,[124,-221,-220,-219,-218,-217,128]],4,4,1,4],[1,0,-148.72799999999995,0]],[15,"UserLeaderItem",33554432,11,[-226,-227,-228,-229],[[1,-224,[5,1080,150]],[8,0,-225,130]],[1,0,-454.08,0],[1,0.9,0.9,1]],[32,"Задания",false,33554432,3,[-236,-237],[[18,-230],[125,-232,-231,[162,163,164],161],[78,-235,-234,-233,165,166,167]]],[42,"DailyCardsScrollView",33554432,[-244,-245],[[[1,-238,[5,1080,250]],[17,1,0,-239,135,136],-240,[78,-243,-242,-241,137,138,139]],4,4,1,4],[1,538.16,155.091,0],[1,0.9,0.9,1]],[42,"QuestsScrollVIew",33554432,[-251,-252],[[[1,-246,[5,1080,900.4]],[17,1,0,-247,157,158],-248,[126,[null,null,null],-250,-249,159,160]],4,4,1,4],[1,0.6100000000000136,-72.19899999999996,0],[1,0.9,0.9,1]],[102,"Button",false,4294967295,2,[-257],[[1,-253,[5,600,120]],[114,1,0,-254,16],[127,2,-256,[4,4292269782],-255,17,18,19,20]],[1,-14.144999999999982,-73.55399999999997,0]],[70,"ScrollView",33554432,8,[-261,-262],[[[3,-258,[5,1080,1400],[0,0.5,1]],[17,1,0,-259,24,25],-260],4,4,1],[1,2.9139999999999873,578.1709999999999,0],[1,0.9,0.9,1]],[13,"scrollBar",33554432,24,[-267],[[[3,-263,[5,12,1400],[0,1,0.5]],[17,1,0,-264,22,23],[36,37,250,1,-265],-266],4,4,4,1],[1,540,-700,0]],[70,"GameRulesScrollView",33554432,9,[-271,-272],[[[3,-268,[5,1080,1408.5],[0,0.5,1]],[17,1,0,-269,32,33],-270],4,4,1],[1,2.9139999999999873,578.1709999999999,0],[1,0.9,0.9,1]],[13,"scrollBar",33554432,26,[-277],[[[3,-273,[5,12,1408.5],[0,1,0.5]],[17,1,0,-274,30,31],[36,37,250,1,-275],-276],4,4,4,1],[1,540,-704.25,0]],[55,"content",33554432,[-280],[[3,-278,[5,1080,5111.7339999999995],[0,0.5,1]],[62,1,2,-0.2,132.4,60,true,-279]],[1,0,-20,0]],[15,"плашка",33554432,4,[-283,-284,-285],[[3,-281,[5,1080,385.9],[0,0,0]],[8,0,-282,43]],[1,-482.939,418.10799999999995,0],[1,0.9,0.9,1]],[13,"scrollBar",33554432,15,[-290],[[[1,-286,[5,12,900]],[56,1,0,-287,[4,16777215],44,45],[36,37,250,1,-288],-289],4,4,4,1],[1,480,0,0]],[42,"ScrollView",33554432,[-294,-295],[[[3,-291,[5,1080,1400],[0,0.5,1]],[17,1,0,-292,54,55],-293],4,4,1],[1,0,652.693,0],[1,0.9,0.9,1]],[13,"scrollBar",33554432,31,[-300],[[[3,-296,[5,12,1400],[0,1,0.5]],[17,1,0,-297,52,53],[36,37,250,1,-298],-299],4,4,4,1],[1,540,-700,0]],[42,"ScrollView",33554432,[-304,-305],[[[3,-301,[5,1080,1400],[0,0.5,1]],[17,1,0,-302,100,101],-303],4,4,1],[1,0,652.693,0],[1,0.9,0.9,1]],[13,"scrollBar",33554432,33,[-310],[[[3,-306,[5,12,1400],[0,1,0.5]],[17,1,0,-307,98,99],[36,37,250,1,-308],-309],4,4,4,1],[1,540,-700,0]],[13,"scrollBar",33554432,18,[-315],[[[1,-311,[5,12,750]],[56,1,0,-312,[4,16777215],124,125],[36,37,250,1,-313],-314],4,4,4,1],[1,480,0,0]],[30,"QuestsContentWrapper",33554432,20,[-317,-318,-319,22],[[18,-316]]],[13,"scrollBar",33554432,21,[-324],[[[3,-320,[5,12,116.20000000000002],[0,1,0.5]],[17,1,0,-321,133,134],[60,37,37.372000000000014,65.136,68.66399999999999,250,1,-322],-323],4,4,4,1],[1,502.628,1.764,0]],[13,"ClaimRewardButton",4294967295,12,[-328],[[[1,-325,[5,1000,200]],[21,1,0,-326],-327],4,4,1],[1,9.750999999999976,-886.423,0]],[13,"scrollBar",33554432,22,[-333],[[[3,-329,[5,1080,900.4],[0,1,0.5]],[56,1,0,-330,[4,16777215],155,156],[60,37,4.110000000000014,1.217999999999991,-1.217999999999991,250,1,-331],-332],4,4,4,1],[1,535.89,-1.218,0]],[15,"TabBarIconHome",33554432,10,[-336,-337],[[1,-334,[5,400,399]],[11,-335,170]],[1,-389.671,30.999999999999943,0],[1,0.27,0.27,1]],[15,"TabBarIconFriends",33554432,10,[-340,-341],[[1,-338,[5,400,399]],[11,-339,172]],[1,-216.337,30.999999999999943,0],[1,0.27,0.27,1]],[15,"TabBarIconLeaders",33554432,10,[-344,-345],[[1,-342,[5,400,399]],[11,-343,175]],[1,197.40300000000002,30.999999999999943,0],[1,0.27,0.27,1]],[15,"TabBarIconTasks",33554432,10,[-348,-349],[[1,-346,[5,400,399]],[11,-347,177]],[1,387.006,30.999999999999943,0],[1,0.27,0.27,1]],[13,"DailyCardsModalScrollView",33554432,13,[-353,-354],[[[3,-350,[5,860,1680],[0,0.5,1]],[17,1,0,-351,181,182],-352],4,4,1],[1,-2.980000000000018,-189.12800000000004,0]],[13,"scrollBar",33554432,44,[-359],[[[3,-355,[5,12,1680],[0,1,0.5]],[17,1,0,-356,179,180],[60,37,111.18299999999999,-828.88,828.88,250,1,-357],-358],4,4,4,1],[1,318.817,-11.120000000000005,0]],[15,"boost",33554432,1,[-365],[[1,-360,[5,160,158]],[11,-361,3],[133,0.5,300,-364,-363,-362]],[1,433.674,-357.94399999999996,0],[1,0.75,0.75,1]],[32,"ExpBarWrapper",false,33554432,1,[-367,-368,-369],[[18,-366]]],[32,"ExpBarWrapper",false,4294967295,2,[-371,-372,-373],[[18,-370]]],[6,"closeModal",4294967295,2,[[1,-374,[5,70,70]],[8,0,-375,15]],[1,445.88199999999995,765,0]],[6,"OpenLicenseModal",4294967295,2,[[1,-376,[5,438.47412109375,44.1]],[29,"Лицензионное соглашение",35,35,35,-377,[4,4288190616]]],[1,2.2930000000000064,-604.057,0]],[55,"content",33554432,[-380],[[3,-378,[5,1080,2817.8],[0,0.5,1]],[62,1,2,100,100,60,true,-379]],[1,0,-20,0]],[30,"view",33554432,24,[51],[[3,-381,[5,1080,1400],[0,0.5,1]],[25,-382],[26,-383,[4,16777215]]]],[30,"view",33554432,26,[28],[[3,-384,[5,1080,1677.5],[0,0.5,1]],[25,-385],[26,-386,[4,16777215]]]],[30,"view",33554432,15,[-390],[[1,-387,[5,972,900]],[25,-388],[26,-389,[4,16777215]]]],[15,"InviteFriendNode",33554432,4,[-393],[[1,-391,[5,1080,240]],[11,-392,49]],[1,-105.82900000000001,-423.318,0],[1,0.7,0.7,1]],[95,"Товары",33554432,16,[31],[[[18,-394],-395],4,1]],[73,"content",33554432,[[3,-396,[5,1080,200],[0,0.5,1]],[128,1,2,100,100,true,-397]],[1,0,-20,0]],[30,"view",33554432,31,[57],[[3,-398,[5,1080,1400],[0,0.5,1]],[25,-399],[26,-400,[4,16777215]]]],[69,"Бустеры",false,33554432,16,[33],[[[18,-401],-402],4,1]],[73,"content",33554432,[[3,-403,[5,1080,140],[0,0.5,1]],[62,1,2,100,100,60,true,-404]],[1,0,-20,0]],[30,"view",33554432,33,[60],[[3,-405,[5,1080,1400],[0,0.5,1]],[25,-406],[26,-407,[4,16777215]]]],[19,"BoosterCostNode",4294967295,6,[-410],[[1,-408,[5,92,92]],[8,0,-409,104]],[1,-425,925,0]],[19,"Заголовок",33554432,16,[17],[[1,-411,[5,328.1640625,100.92599999999999]],[12,"Магазин",80,80,80.1,true,-412]],[1,0,850,0]],[19,"Товары",33554432,17,[-415],[[1,-413,[5,170.15625,56.7]],[12,"Товары",45,45,45,true,-414]],[1,-268.252,2.2737367544323206e-13,0]],[19,"Бустеры",33554432,17,[-418],[[1,-416,[5,193.6669921875,56.7]],[134,"Бустеры",45,45,45,true,-417,[4,2365587455]]],[1,263.04100000000005,2.2737367544323206e-13,0]],[30,"view",33554432,18,[-422],[[1,-419,[5,972,750]],[25,-420],[26,-421,[4,16777215]]]],[15,"плашка",33554432,36,[21,-425],[[3,-423,[5,1080,385.9],[0,0,0]],[8,0,-424,154]],[1,-491.269,418.10799999999995,0],[1,0.9,0.9,1]],[19,"view",33554432,21,[-429],[[1,-426,[5,1080,270.8]],[25,-427],[26,-428,[4,16777215]]],[1,-34.825,9.078,0]],[4,"CloseButton",4294967295,12,[[[1,-430,[5,70,70]],[21,1,0,-431],-432],4,4,1],[1,445.882,893.559,0]],[54,"OpenCardButton",4294967295,12,[[[1,-433,[5,990,1360]],[21,1,0,-434],-435],4,4,1],[1,0,-115.97500000000002,0],[1,0.8,0.8,1]],[19,"view",33554432,22,[-439],[[1,-436,[5,1080,900]],[25,-437],[26,-438,[4,16777215]]],[1,3.006,-41.953,0]],[15,"TabBarIconStore",33554432,10,[-442],[[1,-440,[5,600,600]],[11,-441,173]],[1,-11.483253588516845,40.24656235182556,0],[1,0.27,0.27,1]],[4,"CloseButton",4294967295,13,[[[1,-443,[5,70,70]],[21,1,0,-444],-445],4,4,1],[1,445.882,893.559,0]],[19,"view",4294967295,44,[-449],[[1,-446,[5,1080,1350]],[25,-447],[26,-448,[4,16777215]]],[1,100.8,0,0]],[4,"energyBar",33554432,1,[[[1,-450,[5,388.6,40]],[115,0,-451,[4,4292826487],2],-452],4,4,1],[1,215.933,861.5549999999998,0]],[16,"LinkButton",4294967295,5,[[1,-453,[5,1080,240]],[8,0,-454,4]],[1,0,-527.2770000000002,0],[1,0.75,0.75,1]],[6,"expBar",33554432,47,[[1,-455,[5,388.6,40]],[57,1,0,-456,[4,4287555062],10],[87,388.6,1,-458,-457]],[1,-236.848,861.5549999999998,0]],[16,"avatar",33554432,1,[[1,-459,[5,200,200]],[11,-460,11]],[1,-460.31640000000004,863.0751999999998,0],[1,0.6,0.6,1]],[6,"expBar",4294967295,48,[[1,-461,[5,388.6,50]],[57,1,0,-462,[4,4287555062],13],[87,388.6,1,-464,-463]],[1,6.890999999999963,39.432000000000016,0]],[19,"userInfo",4294967295,2,[-466,-467],[[18,-465]],[1,7.6860000000000355,0,0]],[74,"CustomisationButton",false,4294967295,2,[-470],[[1,-468,[5,1080,240]],[22,0,-469]],[1,9.736999999999966,-162.22299999999996,0],[1,0.7,0.7,1]],[74,"UserPromocodesButton",false,4294967295,2,[-473],[[1,-471,[5,1080,240]],[22,0,-472]],[1,9.105000000000018,-345.323,0],[1,0.7,0.7,1]],[6,"OpenGameRules",4294967295,2,[[1,-474,[5,228.78173828125,44.1]],[29,"Правила игры",35,35,35,-475,[4,4288190616]]],[1,2.2930000000000064,-512.838,0]],[6,"LicenseCloseModal",4294967295,8,[[1,-476,[5,70,70]],[22,0,-477]],[1,445.88199999999995,765,0]],[6,"GameRulesCloseButton",4294967295,9,[[1,-478,[5,70,70]],[22,0,-479]],[1,445.88199999999995,765,0]],[38,"content",33554432,54,[[1,-480,[5,972,335]],[79,1,2,350,50,15,true,-481]]],[16,"CopyLinkNode",33554432,4,[[1,-482,[5,268,240]],[11,-483,50]],[1,395.62,-423.318,0],[1,0.7,0.7,1]],[19,"coin",4294967295,7,[-486],[[1,-484,[5,92,92]],[8,0,-485,74]],[1,-425,925,0]],[6,"closeModal",4294967295,7,[[1,-487,[5,75,75]],[8,0,-488,75]],[1,425,925,0]],[13,"Image",4294967295,7,[-491],[[[1,-489,[5,960,554]],-490],4,1],[1,0,500,0]],[19,"marketCount",4294967295,90,[-494],[[1,-492,[5,460,78]],[8,0,-493,76]],[1,220,-210,0]],[4,"Button",4294967295,7,[[[1,-495,[5,960,200]],-496],4,1],[1,0,-500,0]],[6,"closeModal",4294967295,6,[[1,-497,[5,75,75]],[8,0,-498,105]],[1,425,925,0]],[13,"Income",4294967295,6,[-501],[[[1,-499,[5,427.28515625,90.39999999999999]],-500],4,1],[1,0,-160,0]],[19,"coin",4294967295,94,[-504],[[1,-502,[5,92,92]],[8,0,-503,106]],[1,-100,-140,0]],[4,"Button",4294967295,6,[[[1,-505,[5,960,200]],-506],4,1],[1,0,-500,0]],[15,"плашка",33554432,11,[14],[[3,-507,[5,1080,400],[0,0,0]],[8,0,-508,123]],[1,-482.939,418.10799999999995,0],[1,0.9,0.9,1]],[15,"coin",33554432,14,[-511],[[1,-509,[5,600,600]],[8,0,-510,119]],[1,-112.41,-286.303,0],[1,0.15384615384615383,0.15384615384615383,1]],[15,"coin-001",33554432,14,[-514],[[1,-512,[5,600,600]],[8,0,-513,120]],[1,-598.68,-286.303,0],[1,0.15384615384615383,0.15384615384615383,1]],[15,"coin-002",33554432,14,[-517],[[1,-515,[5,600,600]],[8,0,-516,121]],[1,410.981,-286.303,0],[1,0.15384615384615383,0.15384615384615383,1]],[38,"content",33554432,66,[[1,-518,[5,972,144.5]],[79,1,2,159.5,50,15,true,-519]]],[103,"blur-modal-background",false,33554432,20,[-522],[[1,-520,[5,1080,1920]],[8,0,-521,131]],[1,1.2,1.2,1]],[153,0.23,0.75,false,21],[6,"content",33554432,68,[[3,-523,[5,0,-19],[0,0.5,1]],[129,1,1,true,-524]],[1,712.746,-38.404,0]],[155,12,[141,142,143,144,145,146,147,148,149,150,151,152,153]],[154,0.23,0.75,false,22],[6,"content",33554432,71,[[1,-525,[5,1080,-15]],[130,1,2,15,true,-526]],[1,-33.066,-112.001,0]],[104,"activeButton",false,33554432,10,[[1,-527,[5,1036,1036]],[11,-528,168]],[1,-11.483253588516732,40.24656235182556,0],[1,0.27,0.27,1]],[6,"button",33554432,40,[[1,-529,[5,560,560]],[11,-530,169]],[1,-3.3560000000000514,-19.67599999999993,0]],[44,"button",false,33554432,41,[[1,-531,[5,560,560]],[11,-532,171]]],[44,"button",false,33554432,42,[[1,-533,[5,560,560]],[11,-534,174]]],[44,"button",false,33554432,43,[[1,-535,[5,560,560]],[11,-536,176]]],[6,"content",4294967295,74,[[3,-537,[5,1080,0],[0,0.5,1]],[131,1,3,40,30,1,5,true,-538]],[1,0,1005,0]],[4,"messagesLabel",33554432,1,[[[1,-539,[5,42.255859375,50.4]],-540],4,1],[1,-328.701,-560.127,0]],[16,"background",33554432,1,[[1,-541,[5,1032,1920]],[11,-542,0]],[1,0,-45,0],[1,1.1,1.11,1]],[16,"coin",33554432,1,[[1,-543,[5,600,600]],[11,-544,1]],[1,-256.803,621.856,0],[1,0.27,0.27,1]],[4,"coinsLabel",33554432,1,[[[3,-545,[5,0,77.61600000000001],[0,0,0]],-546],4,1],[1,-139.272,587.413,0]],[54,"Lion 04",33554432,1,[[[3,-547,[5,2309.2900390625,2592.219970703125],[0,0.3966890220927444,0.027825569615472532]],-548],4,1],[1,-3.8920000000000528,-452.454,0],[1,0.3,0.3,1]],[156],[54,"SocketManagerNode",33554432,1,[[[18,-549],119],4,1],[1,-567.667,-76.25700000000006,0],[1,3,3,1]],[4,"Bar",33554432,1,[[[3,-550,[5,388.6,40],[0,0,0.5]],-551],4,1],[1,21.932999999999993,861.5549999999998,0]],[4,"energyLabel",33554432,1,[[[1,-552,[5,210.78028869628906,50.4]],-553],4,1],[1,244.57100000000003,813.742,0]],[4,"Label",33554432,46,[[[1,-554,[5,83.408203125,75.6]],-555],4,1],[1,0,-120.86400000000003,0]],[4,"notificationLabel",4294967295,1,[[[1,-556,[5,403.65234375,50.4]],-557],4,1],[1,0,-592.7169999999999,0]],[135,"+ 0к доход в час",40,true,[4,4285647085]],[4,"IncomeLabel",33554432,1,[[[1,-558,[5,321.7578125,50.4]],125],4,1],[1,0,507.38599999999997,0]],[16,"Label",4294967295,5,[[1,-559,[5,663.7109375,100.8]],[12,"Забрать награду",80,80,80,true,-560]],[1,1.1368683772161603e-13,-527.277,0],[1,0.7499999999999999,0.75,0.9999999999999999]],[4,"Label",4294967295,5,[[[1,-561,[5,182.3046875,100.8]],-562],4,1],[1,92.97600000000011,-276.8799999999999,0]],[16,"coin",4294967295,5,[[1,-563,[5,600,600]],[8,0,-564,5]],[1,-138.50600000000009,-279.8989999999999,0],[1,0.25000000000000006,0.25000000000000006,1]],[6,"LabelDescription",4294967295,5,[[1,-565,[5,825.48828125,90.39999999999999]],[80,"С момента твоего последнего посещения\nпассивный доход принёс тебе",40,true,-566,[4,4289967027]]],[1,0,-80.79599999999982,0]],[6,"LabelHeader",4294967295,5,[[1,-567,[5,452.96875,180.79999999999998]],[12,"Твой доход\nсоставил",80,80,80,true,-568]],[1,0,129.49700000000007,0]],[16,"coin",4294967295,5,[[1,-569,[5,600,600]],[8,0,-570,6]],[1,0,433.1600000000001,0],[1,0.5000000000000001,0.5000000000000001,1]],[16,"energyIcon",33554432,1,[[3,-571,[5,200,200],[0,0,0]],[11,-572,9]],[1,403.63699999999994,803.9749999999999,0],[1,0.6,0.6,1]],[116,1,0,[4,4285185251]],[4,"Bar",33554432,47,[[[3,-573,[5,388.6,40],[0,0,0.5]],134],4,1],[1,-471.409,861.5550000000001,0]],[6,"levelLabel",33554432,47,[[1,-574,[5,231.21731567382812,50.4]],[49,"Малыш лев",39.9,39.9,true,-575]],[1,-239.781,813.742,0]],[6,"avatar",4294967295,2,[[1,-576,[5,200,200]],[11,-577,12]],[1,18.095000000000027,221.98200000000008,0]],[33,"leftArrowIcon",false,4294967295,2,[[1,-578,[5,80,80]],[22,0,-579]],[1,-396.514,215.36899999999991,0]],[6,"Bar",4294967295,48,[[3,-580,[5,297.5,50],[0,0,0.5]],[57,1,0,-581,[4,4285185251],14]],[1,-187.248,39.75999999999999,0]],[6,"Label",4294967295,48,[[1,-582,[5,170.91796875,50.4]],[49,"Король лев 10М+",20,20,true,-583]],[1,-9.633000000000038,39.75999999999999,0]],[33,"rightArrowIcon",false,4294967295,2,[[1,-584,[5,80,80]],[22,0,-585]],[1,404.039,213.1780000000001,0]],[4,"ProfileUsername",4294967295,80,[[[1,-586,[5,426.796875,100.8]],-587],4,1],[1,32.172000000000025,679.6,0]],[41,"Denchik yo",80,80,"ARIAL",80,true,142],[4,"userId",4294967295,80,[[[1,-588,[5,253.57421875,50.4]],-589],4,1],[1,9.378000000000043,604.0000000000001,0]],[136,"id: 228228228",40,144,[4,4288190616]],[6,"Label",4294967295,81,[[1,-590,[5,420.99609375,75.6]],[12,"Кастомизация",60,60,60,true,-591]],[1,-2.86,30.306,0]],[6,"Label",4294967295,82,[[1,-592,[5,483.603515625,75.6]],[12,"Мои промокоды",60,60,60,true,-593]],[1,11.626,30.306,0]],[33,"Label",false,4294967295,23,[[1,-594,[5,100,40]],[137,"Кастомизация\n",30,30,30,1,false,-595,[4,0]]],[1,598.4079999999999,-80.34299999999996,0]],[33,"GameRules",false,4294967295,2,[[1,-596,[5,169.6337890625,44.1]],[29,"Как играть",35,35,35,-597,[4,4288190616]]],[1,-5.312000000000012,-507.811,0]],[4,"DateOfRegistration",4294967295,2,[[[1,-598,[5,546.73828125,44.1]],-599],4,1],[1,12.432999999999993,-697.508,0]],[29,"Дата регистрации в приложении: ",35,35,35,150,[4,4288190616]],[157,8,8,84],[33,"avatar",false,4294967295,8,[[1,-600,[5,200,200]],[77,-601]],[1,18.095000000000027,221.98200000000008,0]],[6,"LicenseModalTitle",4294967295,8,[[1,-602,[5,802.880859375,75.6]],[41,"Лицензионное соглашение",60,60,"ARIAL",60,true,-603]],[1,39.85800000000006,679.6,0]],[4,"bar",33554432,25,[[[3,-604,[5,10,156.25],[0,0,0]],-605],4,1],[1,-11,-31.25,0]],[6,"Label",4294967295,51,[[1,-606,[5,1080,2617.8]],[138,"Лицензионное Соглашение Пользователя (EULA) для Игры \"Simatap\"\nПоследнее обновление: 14.10.2024\n\nПожалуйста, внимательно прочитайте это Лицензионное Соглашение (далее - \"Соглашение\") перед использованием игры \"Simatap\" (далее - \"Игра\"). \n\nУстанавливая и используя Игра, вы соглашаетесь с условиями, изложенными в данном Соглашении. Если вы не согласны с этими условиями, не устанавливайте и не используйте Игра.\n\n1. Предоставление Лицензии\nНастоящее Соглашение предоставляет вам личную, ограниченную, непередаваемую и неэксклюзивную лицензию на установку и использование Игры только для личных, некоммерческих целей. Вы не можете копировать, изменять, распространять, продавать или сдавать в аренду Игру и любые её части без письменного разрешения правообладателя.\n\n2. Права Интеллектуальной Собственности\nВсе права на Игру, включая, но не ограничиваясь, текстами, графикой, музыкой, интерфейсом и исходным кодом, принадлежат [Название Компании/Разработчика] и защищены законами об авторском праве и международными соглашениями.\nЛюбое несанкционированное использование или копирование материалов из Игры является нарушением прав интеллектуальной собственности и может привести к гражданской и уголовной ответственности.\n\n3. Использование Виртуальной Валюты и Предметов\nВ Игре предусмотрена внутренняя валюта и виртуальные предметы (далее - \"Виртуальные Товары\"). Виртуальные Товары можно приобретать за реальные деньги или зарабатывать в процессе игры. Все Виртуальные Товары остаются собственностью разработчика, и игроки получают лишь ограниченное право на их использование в рамках Игры.\nВиртуальные Товары не имеют денежного эквивалента и не могут быть обменяны на реальные деньги, переданы другим игрокам или проданы. Разработчик оставляет за собой право изменять стоимость и доступность Виртуальных Товаров.\n\n4. Обновления и Изменения Игры\nРазработчик оставляет за собой право в любое время обновлять, изменять, исправлять ошибки или прекращать поддержку Игры без предварительного уведомления.\nОбновления могут добавлять новые функции или изменять существующие. Установка и использование обновлений регулируется условиями настоящего Соглашения.\n\n5. Ограничения и Запрещенные Действия\nЗапрещено использовать Игру для нелегальной деятельности или нарушения прав других игроков.\nВы не имеете права:\nмодифицировать или взламывать Игру,\nиспользовать сторонние программы для автоматизации игрового процесса,\nпытаться обойти системы защиты Игры.\nНарушение данных условий может привести к блокировке аккаунта без возврата средств.\n\n6. Конфиденциальность и Персональные Данные\nИгра может собирать персональные данные игроков (например, адрес электронной почты, IP-адрес и прочее) в соответствии с Политикой конфиденциальности [Название Компании/Разработчика].\nУстанавливая Игру, вы соглашаетесь с условиями обработки ваших данных, описанными в Политике конфиденциальности. Политика доступна по адресу: [URL Политики конфиденциальности].\n\n7. Ограничение Ответственности\nИгра предоставляется \"как есть\" без каких-либо гарантий. [Название Компании/Разработчика] не несет ответственности за возможные сбои, ошибки, потерю данных, ущерб устройству или иному имуществу пользователя.\n[Название Компании/Разработчика] не несет ответственности за любые косвенные, случайные, особые или побочные убытки, связанные с использованием Игры.\n\n8. Изменения в Лицензионном Соглашении\n[Название Компании/Разработчика] оставляет за собой право вносить изменения в настоящее Соглашение. Новая версия Соглашения вступает в силу с момента её публикации на сайте или внутри Игры. Продолжение использования Игры означает ваше согласие с изменениями.\n\n9. Прекращение Лицензии\nЛицензия, предоставленная вам по настоящему Соглашению, прекращается автоматически при нарушении любого из условий Соглашения. В случае прекращения лицензии вы обязаны удалить Игру со всех устройств и прекратить её использование.\n\n10. Применимое Право и Юрисдикция\nНастоящее Соглашение регулируется законодательством РФ. Все споры, возникающие в связи с настоящим Соглашением, подлежат разрешению в судах РФ. ",0,29,29,30,3,-607]],[1,0,-1408.9,0]],[33,"avatar",false,4294967295,9,[[1,-608,[5,200,200]],[77,-609]],[1,18.095000000000027,221.98200000000008,0]],[6,"GameRulesTitle",4294967295,9,[[1,-610,[5,424.833984375,75.6]],[41,"Правила игры",60,60,"ARIAL",60,true,-611]],[1,39.85800000000006,679.6,0]],[4,"bar",33554432,27,[[[3,-612,[5,10,156.25],[0,0,0]],-613],4,1],[1,-11,-31.25,0]],[52,0.23,0.75,false,26,28],[4,"Label",4294967295,28,[[[1,-614,[5,1080,4979.534]],-615],4,1],[1,0,-2489.567,0]],[45,"backround2",33554432,4,[[1,-616,[5,1032,1920]],[11,-617,41]],[1,1.2,1.2,1]],[6,"Заголовок",33554432,4,[[1,-618,[5,283.8671875,100.92599999999999]],[12,"Друзья",80,80,80.1,true,-619]],[1,0,850,0]],[6,"invite",33554432,29,[[3,-620,[5,965.5078125,50.4],[0,0,0]],[50,"Приглашай друга и получайте оба награду!",48,48,-621]],[1,60.583,57.073,0]],[6,"reward",33554432,29,[[3,-622,[5,437.109375,151.2],[0,0,0]],[12,"+50 000",120,120,120,true,-623]],[1,444.86,176.518,0]],[16,"coin",33554432,29,[[3,-624,[5,600,600],[0,0,0]],[8,0,-625,42]],[1,161.277,173.096,0],[1,0.27,0.27,1]],[19,"TotalFriendsLabel",33554432,4,[-627],[[18,-626]],[1,0,351.78600000000006,0]],[4,"Label",33554432,167,[[[1,-628,[5,383.1298828125,50.4]],-629],4,1],[1,0,1.6859999999999218,0]],[4,"bar",33554432,30,[[[1,-630,[5,10,156.25]],-631],4,1],[1,-11,-31.25,0]],[52,0.23,0.75,false,15,86],[38,"Label",33554432,55,[[1,-632,[5,618.984375,100.8]],[12,"Пригласи друга",80,80,80,true,-633]]],[96,"ReferralLinkLabel",false,33554432,4,[[[1,-634,[5,0,50.4]],-635],4,1]],[97,"CopyNotificationLabel",false,33554432,4,[[[1,-636,[5,711.8359375,50.4]],-637],4,1],[1,0,-287.24300000000005,0]],[38,"ReferralLinkManager",33554432,4,[[18,-638],[158,-641,87,55,-640,-639]]],[45,"backround2",33554432,16,[[1,-642,[5,1032,1920]],[8,0,-643,51]],[1,1.2,1.2,1]],[4,"bar",33554432,32,[[[3,-644,[5,10,156.25],[0,0,0]],-645],4,1],[1,-11,-31.25,0]],[4,"Label",4294967295,88,[[[3,-646,[5,144.58984375,50.4],[0,0,0.5]],-647],4,1],[1,75,0,0]],[98,"countLabel",4294967295,91,[[[1,-648,[5,226.435546875,50.4]],-649],4,1]],[4,"Title",4294967295,7,[[[1,-650,[5,683.125,135.6]],-651],4,1],[1,0,100,0]],[4,"Descr",4294967295,7,[[[1,-652,[5,897.12890625,290.4]],-653],4,1],[1,0,-170,0]],[4,"bar",33554432,34,[[[3,-654,[5,10,156.25],[0,0,0]],-655],4,1],[1,-11,-31.25,0]],[4,"BoosterCostLabel",4294967295,62,[[[3,-656,[5,144.58984375,50.4],[0,0,0.5]],-657],4,1],[1,75,0,0]],[4,"Image",4294967295,6,[[[1,-658,[5,960,554]],-659],4,1],[1,0,500,0]],[4,"Title",4294967295,6,[[[1,-660,[5,535.625,100.8]],-661],4,1],[1,0,120,0]],[4,"Level",4294967295,6,[[[1,-662,[5,262.109375,112.99999999999999]],-663],4,1],[1,0,-50,0]],[4,"NextLevelIncomeLabel",4294967295,95,[[[3,-664,[5,125.1220703125,63],[0,0,0.5]],-665],4,1],[1,100,0,0]],[38,"marketTabBarButton",33554432,64,[[1,-666,[5,478,113]],[8,0,-667,113]]],[44,"marketTabBarButton",false,33554432,65,[[1,-668,[5,478,113]],[8,0,-669,114]]],[45,"backround2",33554432,11,[[1,-670,[5,1032,1920]],[11,-671,116]],[1,1.2,1.2,1]],[6,"Заголовок",33554432,11,[[1,-672,[5,317.7734375,100.92599999999999]],[12,"Лидеры",80,80,80.1,true,-673]],[1,0,850,0]],[6,"second-place",33554432,14,[[1,-674,[5,400,432]],[8,0,-675,117]],[1,-491.299,0,0]],[6,"third-place",33554432,14,[[1,-676,[5,400,432]],[8,0,-677,118]],[1,522.005,0,0]],[16,"Label",33554432,98,[[1,-678,[5,166.845703125,75.6]],[12,"2500₽",60,60,60,true,-679]],[1,1056.0225,0.45499999999992724,0],[1,6.500000000000001,6.500000000000001,1]],[16,"Label",33554432,99,[[1,-680,[5,166.845703125,75.6]],[12,"1500₽",60,60,60,true,-681]],[1,1056.0225,0.45499999999992724,0],[1,6.500000000000001,6.500000000000001,1]],[16,"Label",33554432,100,[[1,-682,[5,166.845703125,75.6]],[12,"1000₽",60,60,60,true,-683]],[1,1056.0225,0.45499999999992724,0],[1,6.500000000000001,6.500000000000001,1]],[6,"Label",33554432,11,[[1,-684,[5,857.421875,90.39999999999999]],[63,"Занимай первые места в рейтинге за неделю \nи получай денежное вознаграждение",40,-685]],[1,0,327.1089999999999,0]],[4,"bar",33554432,35,[[[1,-686,[5,10,156.25]],-687],4,1],[1,-11,-31.25,0]],[52,0.23,0.75,false,18,101],[4,"NumberLabel",33554432,19,[[[3,-688,[5,27.8076171875,63],[0,0,0]],-689],4,1],[1,-488.932,-25.346,0]],[16,"coin",33554432,19,[[1,-690,[5,600,600]],[8,0,-691,129]],[1,235.897,-0.539,0],[1,0.10000000000000002,0.10000000000000002,1]],[4,"UsernameLabel",33554432,19,[[[3,-692,[5,241.796875,63],[0,0,0]],-693],4,1],[1,-276.673,-25.346,0]],[4,"CoinsLabel",33554432,19,[[[3,-694,[5,194.6533203125,63],[0,1,0]],-695],4,1],[1,488.547,-25.346,0]],[6,"Label",33554432,102,[[1,-696,[5,283.359375,100.8]],[12,"СКОРО",80,80,80,true,-697]],[1,0,320.857,0]],[45,"backround2",33554432,36,[[1,-698,[5,1032,1920]],[8,0,-699,132]],[1,1.2,1.2,1]],[6,"Заголовок",33554432,36,[[1,-700,[5,334.0625,100.92599999999999]],[12,"Задания",80,80,80.1,true,-701]],[1,0,850,0]],[4,"bar",33554432,37,[[[3,-702,[5,10,239.831159],[0,0,0]],-703],4,1],[1,-10.999999999999886,-114.83115886415962,0]],[159,true,37,103],[4,"DayOfNumber",4294967295,12,[[[1,-704,[5,549.6875,100.8]],-705],4,1],[1,-29.716999999999985,774.6449999999999,0]],[4,"MessageLabel",4294967295,12,[[[1,-706,[5,1015.491138,50.4]],-707],4,1],[1,1.619,613.8459999999999,0]],[105,"Label",512,4294967295,38,[[1,-708,[5,519.7224731445312,104.076]],[139,"Получить награду",57.7,57.7,82.6,false,true,-709]],[1,0,19.379999999999995,0]],[6,"invite",33554432,67,[[3,-710,[5,887.765625,50.4],[0,0,0]],[50,"Заходи каждый день и получай награду",48,48,-711]],[1,60.583,292.734,0]],[4,"bar",33554432,39,[[[3,-712,[5,10,156.25],[0,0,0]],-713],4,1],[1,-127.049,-107.622,0]],[4,"textHome",33554432,40,[[[1,-714,[5,425.52777099609375,108.98999999999998]],-715],4,1],[1,0.0010000000001468834,-425.1390000000001,0]],[4,"textFriends",33554432,41,[[[1,-716,[5,362.5857238769531,108.98999999999998]],-717],4,1],[1,-2.2737367544323206e-13,-425.1390000000001,0]],[4,"textStore",33554432,72,[[[1,-718,[5,431.25970458984375,108.98999999999998]],-719],4,1],[1,-4.039999999999964,-459.3860000000001,0]],[4,"textLeaders",33554432,42,[[[1,-720,[5,405.76629638671875,108.98999999999998]],-721],4,1],[1,0,-425.1390000000001,0]],[4,"textTasks",33554432,43,[[[1,-722,[5,441.85015869140625,108.98999999999998]],-723],4,1],[1,-4.547473508864641e-13,-425.1390000000001,0]],[6,"Title",4294967295,13,[[1,-724,[5,393.789063,100.8]],[41,"Карта дня",80,80,"ARIAL",80,true,-725]],[1,-29.716999999999985,774.6449999999999,0]],[6,"Label",4294967295,13,[[1,-726,[5,661.796875,90.39999999999999]],[80,"Заходи каждый день получай\nвознаграждение и совет на день!",40,true,-727,[4,3438408177]]],[1,1.0190000000000055,613.8459999999999,0]],[4,"bar",33554432,45,[[[3,-728,[5,10,156.25],[0,0,0]],-729],4,1],[1,-11,-31.25,0]],[52,0.23,0.75,false,44,113],[161,"MainScene",[3],[162,null,null,"09136ac6-441e-4d95-b9ef-d60ba9e50594",null,null,[]],[163,[164,[2,0,0,0,0.520833125],[2,0,0,0,0]],[165,[4,4283190348],[0,512,512]],[166],[167],[168],[169,false],[170],[171]]],[111,"Camera",3,[-730],[1,0,0,1000]],[172,0,960,0,2000,1108344832,223,[4,4278190080]],[140,20,20,114],[6,"Coins",33554432,1,[[18,-731]],[1,0,70,0]],[64,"",0,101.5,101.5,61.6,true,117],[173,"default","Основная",0,118],[16,"SpineController.ts",4294967295,1,[[174,-732,228,119,8]],[1,-3.8920000000000528,-452.454,0],[1,0.3,0.3,1]],[152,388.6,1,75],[46,1,0,121,[4,4290653008]],[49,"2000 / 2000",39.9,39.9,true,122],[12,"6/6",60,60,60,true,123],[65,"Энергия обновлена!",40,true,124],[175,1,125],[176,5,5,76],[141,80,80,80,true,128],[21,1,0,155],[67,1,25,238],[66,0.23,0.75,false,24,51,239],[177,9,9,85,160,28],[21,1,0,159],[53,1,27,160,242],[142,"Правила игры SimaTap\nНастоящие Правила (далее – Правила) устанавливают условия и порядок использования игры – мини-приложение для мессенджера Telegram «SimaTap», которые являются обязательным к соблюдению всеми Пользователями, Участниками или иными лицами, использующими настоящую игру.\nПонятия, используемые в Правилах\nОрганизатор — администрация телеграм-канала «Сима-ленд Live» (https://t.me/simalandlive).\nУчастник/Игрок — любое дееспособное лицо, достигшее возраста, позволяющего принимать участие в Игре и/или заключать сделки и прошедшее авторизацию через мессенджер Telegram, либо имеющее аккаунт в мессенджере Telegram.\nИгра SimaTap (далее – Игра) — это игра, а именно, интерактивное аудиовизуальное произведение, представляющее собой программу для ЭВМ, являющуюся мини-приложением для мессенджера Telegram, право использование, в том числе предоставления использования третьим лицам, которой принадлежит Администрации телеграм-канала «Сима-ленд Live» и участие в которой регулируется настоящими Правилами. Игра является маркетинговой акцией, проводимой Организатором.\nЛев — игровой персонаж, которого Участник/Игрок использует в процессе Игры с целью получения внутриигровой валюты и/или развивает в рамках Игры.\nВнутриигровая валюта — внутриигровая единица, которую игрок может заработать, выполняя предусмотренные Игрой действия. Игровая валюта не является денежным средством, и её использование ограничено рамками Правил и игровой механики.\nБаланс – показатель количества Внутриигровой валюты.\nРейтинг — ранжированный список Игроков, получивших больше всего Внутриигровой валюты за определенный период времени, размещаемый в соответствующем разделе интерфейса Игры.\nЗадание — это задачи, предлагаемые игроку для выполнения и получения Внутриигровой валюты в соответствии с Правилами Игры. Доступность Задания определяется Организатором. На выполнение Задания отведено ограниченное количество времени. Информация о сроках выполнения Задания и о количестве Игровой валюты, которую можно получить за выполнение, отображается на карточке Задания в интерфейсе Игры. Список доступных Заданий периодически обновляется. Игрок должен нажать кнопку «Принять задание» (или аналогичную по смыслу и функционалу), чтобы начать выполнение Задания. По завершении выполнения необходимо нажать кнопку «Проверить» (или аналогичную по смыслу и функционалу), отображаемую в интерфейсе Игры.\nТап — клик по Льву, в результате которого игрок получает Игровую валюту в соответствии с Правилами.\nЭнергия — числовой показатель, который ограничивает количество Тапов, доступных Игроку в определенный период времени. \nДруг — дееспособное лицо, достигшее возраста, позволяющего принимать участие в Игре и прошедшее авторизацию через мессенджер Telegram, либо имеющее аккаунт в мессенджере Telegram, получившее пригласительную (реферальную) ссылку от Игрока и вступившее в Игру.\nБустеры — вспомогательные элементы в Игре, необходимые для ускорения и увеличения объемов получения Игровой валюты, которые можно приобрести за Игровую валюту в разделе «Бустеры». Подробные условия их получения и использования указаны в соответствующем разделе интерфейса Игры.\nПассивный доход — показатель, который автоматически увеличивает количество Игровой валюты в соответствии с условиями, указанными на соответствующей карточке в интерфейсе Игры.\nПобедитель – Игрок, набравший в определенный период времени Игровой валюты больше чем остальные Игроки.\nПриз – внутриигровые объекты, внутриигровая валюта, денежная сумма, подарок в виде товара, купон, промокод на приобретение товаров или на скидку на такие Товары на сайте https://sima-land.ru/, либо в мобильном приложении Sima-land, либо иные подарки, выраженные как в материальной форме, так и нематериальной, определяемые Организатором, которые отражаются в том числе в разделе «Магазин» пользовательского интерфейса Игры.\nСайт – веб-приложение sima-land.ru и/или мобильное приложение Sima land, являющиеся сервисом (торговой площадкой), предоставляющим покупателю возможность приобрести товар по договору купли-продажи.\nТовар – любая реальная вещь, представленная в Каталоге на сайте https://sima-land.ru/ и/или в мобильном приложении Sima land.\nПромокод/купон – определенная уникальная комбинация цифр и букв, которую необходимо ввести в Личном кабинете на сайте https://sima-land.ru/ или в мобильном приложении Sima land при осуществлении заказа товаров, дающая право на получение скидки или определенного Товара.\n\n1.\tОБЩИЕ УСЛОВИЯ И МЕХАНИКА ИГРЫ\n1.1.\tИгра является разновидностью игр вида «тапалки» (кликеры, Tap-to-Earn), основной целью игры в которые является получение/заработок внутриигровой валюты или получение других наград путем тапов (кликов) на определенную зону пользовательского интерфейса, в настоящей Игре на персонажа игры – Льва.\n1.2.\tДля того чтобы принять участие в Игре «SimaTap» и получить доступ к пользовательскому интерфейсу Игры Игрок должен иметь Аккаунт в социальной сети Telegram и авторизоваться в соответствии со своими регистрационными данными, после чего необходимо перейти по ссылке https://t.me/simatapbot/ и нажать «Открыть приложение». После чего откроется загрузочный экран, и по окончании загрузки Игроку будет доступен пользовательский интерфейс Игры.\n1.3.\tПользовательский интерфейс Игры состоит из следующих функциональных разделов:\n1.3.1.\t«Главная»\nДанный раздел включает в себя персонажа игры – Льва, а также информацию о количестве накопленной Игроком внутриигровой валюты (баланс), о Пассивном доходе, Энергии и количестве доступных Бустеров, а также активная кнопка «Карта дня», нажав на которую Игрок ежедневно открывает карточку с пожеланием и вознаграждение за открытие. Также указывается наименование Аккаунта Игрока, нажав на которое открывается окно, в котором размещаются настоящие Правила, сведения о дате регистрации Игрока в Игре, кнопка «Поделиться профилем».\n1.3.2.\t«Друзья»\nУказанный раздел содержит перечень Друзей и количество внутриигровой валюты, накопленной ими, а также функциональные кнопки с возможностью пригласить друга и с возможностью автоматического копирования в буфер обмена устройства реферальной ссылки.\n1.3.3.\t«Магазин»\nВ данном разделе представлена возможность ознакомится с перечнем Призов доступных к приобретению за внутриигровую валюту, их стоимость и описание. Нажав на доступный Приз Игрок может ознакомится с подробным описанием Приза. Магазин разделен на две категории: «Товары и скидки» и «Бустеры».\n1.3.4.\t«Рейтинг»\nРаздел представляет собой сведения о лучших игроках, набравших наибольшее количество внутриигровой валюты, в виде ранжированного списка с указанием мест и количества накопленной валюты. Также указывается текущая позиция Игрока в рейтинге.\n1.3.5.\t«Задания»\nВ данном разделе приведен перечень доступных Игроку заданий. Задания могут быть однократными, т.е. направленными на совершение одного действия, а также многократными, т.е. выполнение которых сопровождается совершением ряда действий, например, ежедневные задания. \n1.4.\tЦель Игры и соответственно ее механика заключается в получении/заработке внутриигровой валюты, которую можно получить одним из указанных способов:\n•\tТап. За каждый тап Игрок получает 13 единиц внутриигровой валюты, и при этом за совершение одного Тапа тратится 13 единиц энергии. Энергия восстанавливается в количестве 1 единица энергии в секунду. Игрок также может восстановить всю энергию нажав на Бустер на Главной странице пользовательского интерфейса. Количество Бустеров ограничено.\n•\tВыполнение заданий. Игрок может зарабатывать внутриигровую валюту путем выполнения Заданий. Перечень доступных Игроку Заданий доступен в соответствующем разделе пользовательского интерфейса «Задания». Задания не расходуют единицы энергии. Задания размещаются Организатором и действуют срок им установленный. Более подробно с условиями выполнения задания можно ознакомиться, нажав на него.\n•\tДрузья. Игрок получает внутриигровую валюту за приглашения Друзей. Для этого в разделе «Друзья» Игрок получает реферальную ссылку и направляет ее Другу любым из предложенных способов. После перехода Друга в Игру и выполнения определенного действия, Игрок получает установленное в разделе количество внутриигровой валюты на баланс.\n•\tПассивный доход. Игрок может автоматически получать дополнительную внутриигровую валюту как при Игре, так и в случае если Игра выключена. В случае получения пассивного дохода при выключенной Игре – такой заработок ограничен 3 часами. Для возобновления получения пассивного дохода Игроку необходимо зайти в Игру. При каждом входе Игрока в Игру открывается окно, показывающее количество внутриигровой валюты было получено за время Пассивного дохода. Чтобы увеличить количество получаемой внутриигровой валюты посредством Пассивного дохода Игрок может приобрести в разделе «Магазин» Бустеры, которые повысят Пассивный доход на сумму, указанную в нем.\n1.5.\tОрганизатор может в случайном порядке в процессе Игры предлагать Игроку дополнительные бесплатные Призы. В случае направления такого Приза у Игрока на главной странице отобразится соответствующее уведомление/иконка, нажав на которые Игрок получает Приз.\n1.6.\tПо общему правилу Игрок может получить Призы путем:\n•\tСоревнования в Конкурсе с другими Игроками;\n•\tПриобретения в Магазине за внутриигровую валюту.\n2.\tКОНКУРС. ОПРЕДЕЛЕНИЕ ПОБЕДИТЕЛЕЙ\n2.1.\tЕженедельно в понедельник в 00:00 по московскому времени Организатор запускает Конкурс, с момента такого запуска Игроки соревнуются между собой, зарабатывая внутриигровую валюту в соответствии с возможностями и механикой Игры. Конкурс проводится неограниченное число раз на усмотрение Организатора.\n2.2.\tИгроки, набравшие наибольшее количество внутриигровой валюты, отображаются в Рейтинге с указанием их позиции.\n2.3.\tОрганизатор подводит итоги Конкурса каждую неделю в воскресенье в 23:59 по московскому времени. При подведении итогов определяются лучшие Игроки, наибольшее количество внутриигровой валюты, в соответствии с Рейтингом.\n2.4.\tПобедителями признаются первая тройка игроков в Рейтинге. После определения победителей и перед запуском нового Конкурса результаты всех игроков обнуляются.\n2.5.\tПо итогам Конкурса и определения победителей Организатор связывается с победителем посредством мессенджера Telegram и указывает информацию о порядке получения Приза за участие в Конкурсе.\n2.6.\tПорядок подсчета Тапов и внутриигровой валюты установлен Игрой, такой подсчет считается единственно верным показателем и бесспорно принимается Игроком.\n2.7.\tИгроку запрещено принимать для участия в Игре ботов, стороннее программное обеспечение с целью увеличения внутриигровой валюты, а также использовать иные технические средства, либо мошеннические методы для достижения победы в Конкурсе. В случае обнаружения Организатором недобросовестного поведения Игрока, то его результат и Баланс внутриигровой валюты будет аннулирован.\n3.\tПРИОБРЕТЕНИЕ ПРИЗОВ\n3.1.\tИгрок, накопивший определенное количество внутриигровой валюты, может приобрести определенные призы на свое усмотрение в соответствующем разделе пользовательского интерфейса - «Магазин», в котором представлен перечень доступных к приобретению призов.\n3.2.\tОрганизатор в одностороннем порядке определяет перечень доступных игрокам призов, их стоимость, выраженную в определенном количестве внутриигровой валюты, и другие условия их приобретения.\n3.3.\tВ Магазине Игроку представлено два раздела:\n•\t«Товары и скидки»;\n•\t«Бустеры».\n3.4.\tПриобретение Бустеров позволяет Игроку получать повышенный Пассивных доход. Бустеры делятся на уровни, чем больше уровень Бустера, тем больше пассивного дохода получает Игрок. Количество уровней каждого из Бустеров устанавливается Организатором самостоятельно. На карточке Бустера в Магазине представлена информация о названии Бустера, его уровень, количество пассивного дохода в час и стоимость Бустера.\n3.5.\tВ разделе «Товары и скидки» Игроку предложен перечень доступных к приобретению Призов и промокодов, которые Игрок вправе использовать на сайте https://sima-land.ru, а также в мобильном приложении Sima land, либо другим способом в зависимости от специфики приза.\n3.6.\tНажав на карточку с выбранным призом, Игрок может ознакомится с описанием приза/промокода, а именно на какой товар/услугу распространяется его действие, а также условия его применения, его стоимость во внутриигровой валюте. Нажимая кнопку «Купить промокод», с Баланса Игрока списывается внутриигровая валюта в количестве эквивалентном указанному на карточке приза. С момента списания внутриигровой валюты и отображения промокода в карточке приза, либо информации о успешном приобретении Приза, приз/промокод считается предоставленным Игроку.\n3.7.\tПорядок применения промокодов, получения товаров на основании приобретенных промокодов или скидок на такие товары на сайте https://sima-land.ru или в мобильном приложении Sima land регламентирован в Пользовательском соглашении представленном на сайте по ссылке https://www.sima-land.ru/user-agreement/.\n3.8.\tПромокод на товар действителен пока такой товар есть в наличии.\n3.9.\tПриз/Промокод может быть использован только один раз, если иное не предусмотрено в описании приза/промокода.\n3.10.\tПриобретенные и полученные призы и промокоды не подлежат возврату, возмещению в денежном эквиваленте или обмену на денежные средства.\n3.11.\tПриобретая призы в разделе «Магазин», Игрок подтверждает, что ознакомился с описанием приза, условиями его приобретения, а также Пользовательским соглашением сайта Sima land, размещенным по ссылке https://www.sima-land.ru/user-agreement/. Отношения, связанные с получением/доставкой/возвратом/обменом товаров, возникают непосредственно между Продавцом товаров и Игроком, либо Исполнителем и Игроком в случае если приз является \n\n4.\tЗАКЛЮЧИТЕЛЬНЫЕ ПОЛОЖЕНИЯ\n4.1.\tВ соответствии с условиями настоящих Правил Администрация предоставляет Игрокам/Пользователям доступ к функциональности Игры, без взимания платы, а Пользователь вправе использовать Игру в целях, не противоречащих законодательству РФ и исключительно в рамках настоящих Правил по прямому функциональному назначению. Игрокам/Пользователям запрещено каким-либо образом изменять, декомпилировать, дизассемблировать, дешифровать и производить иные действия с объектным (исходным) кодом Игры.\n4.2.\tПринимая участие в Игре, Игрок полностью и безоговорочно соглашения с настоящими Правилами, Пользовательским соглашением сайта Sima land. В случае несогласия Игрока с настоящими Правилами, Пользовательским соглашением, Игроку следует не начинать использовать Игру, либо незамедлительно прекратить ее использование.\n4.3.\tОрганизатор не несет ответственность за какие-либо прямые или косвенные убытки Игрока, вызванные сбоями в телекоммуникационных и энергетических сетях, действий вредоносных программ, недобросовестных действий третьих лиц.\n4.4.\tОрганизатор вправе в одностороннем порядке изменять положения настоящих Правил, а также приостановить или прекратить проведение Игры или ее отдельных механик. В случае такого изменения, Организатор уведомит Игроков о таком изменении посредством пользовательского интерфейса Игры. Если Игрок продолжает использование Игры, то считается, что он согласен с внесенными изменениями.\n4.5.\tОрганизатор вправе аннулировать Баланс Игрока, а также заблокировать доступ к Игре в случае несоблюдения Игроком настоящих Правил, в случае обнаружения Организатором факта совершения недобросовестных действий Игроком.\n4.6.\tНастоящая Игра не является лотереей, мероприятием, игрой, основанной на риске, пари.\n4.7.\tВсе вопросы и претензии, связанные с использованием/невозможностью использования Игры, ее механиками, настоящими Правилами, должны направляться Организатору по контактным данным указанным в телеграм-канале Организатора по ссылке https://t.me/simalandlive. \n",0,19.7,19.7,25.9,3,1,161],[49,"У тебя 0 друзей",50,50,true,168],[46,1,0,169,[4,16777215]],[53,1,30,170,246],[50,"",20,20,172],[63,"Ссылка скопирована в буфер обмена!",40,173],[21,1,0,176],[67,1,32,250],[66,0.23,0.75,false,31,57,251],[178,56,57,[56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],[73]],[179,7,89,92,[[null,null,null,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97],0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],253],[65,"358 745",40,true,177],[50,"Осталось 10 шт.",30,30,178],[22,0,90],[143,"Набор косметики\n«Love collection»",60,60,60,3,true,179],[144,"Подарочный набор косметики Love collection, \nгель для душа 300 мл и пена для ванны 300 мл,\n ЧИСТОЕ СЧАСТЬЕ.\n\nПромокод на подарок действует в приложении\nи сайте sima-land.ru при сумме заказа\nтовара от 1000 рублей.",40,3,180,[4,2701131775]],[22,0,92],[21,1,0,181],[67,1,34,261],[66,0.23,0.75,false,33,60,262],[180,59,60,[102,103]],[181,6,93,62,96,[111,112],264],[65,"358 745",40,true,182],[22,0,183],[12,"Белое золото",80,80,80,true,184],[81,"Уровень 10\n",50,50,50,185],[12,"7 000",50,50,50,true,186],[63,"Увеличить доход \nэтого бустера в час до:",40,94],[22,0,96],[46,1,0,197,[4,16777215]],[160,1,true,35,198,273],[12,"1",50,50,50,true,199],[64,"Username",0,50,50,50,true,201],[64,"1000000",2,50,50,50,true,202],[21,1,0,206],[48,2,69,[4,4292269782],69],[41,"Карта дня №1",80,80,"ARIAL",80,true,208],[145,"",33.1,33.1,3,true,209,[4,3438408177]],[48,2,70,[4,4292269782],70],[48,2,38,[4,4292269782],38],[46,1,0,212,[4,16777215]],[53,1,39,106,284],[81,"Главная",111.8,111.8,86.5,213],[29,"Друзья",111.8,111.8,86.5,214,[4,4288519581]],[29,"Магазин",111.8,111.8,86.5,215,[4,4288519581]],[29,"Лидеры",111.8,111.8,86.5,216,[4,4288519581]],[29,"Задания",111.8,111.8,86.5,217,[4,4288519581]],[48,2,73,[4,4292269782],73],[21,1,0,220],[53,1,45,221,292]],0,[0,0,1,0,-2,235,0,19,152,0,20,50,0,21,151,0,22,143,0,23,145,0,9,49,0,24,2,0,39,78,0,0,1,0,-1,114,0,-2,115,0,-3,226,0,-4,116,0,-5,117,0,-6,118,0,-7,229,0,-8,120,0,-9,75,0,-10,121,0,-11,133,0,-12,122,0,-13,47,0,-14,78,0,-15,126,0,-16,124,0,-17,46,0,0,2,0,0,2,0,40,241,0,41,83,0,19,152,0,20,50,0,21,151,0,22,143,0,23,145,0,9,49,0,24,2,0,0,2,0,0,2,0,-1,137,0,-2,138,0,-3,48,0,-4,141,0,-5,49,0,-6,80,0,-7,81,0,-8,82,0,-9,23,0,-10,149,0,-11,50,0,-12,83,0,-13,150,0,0,3,0,42,224,0,0,3,0,0,3,0,-1,223,0,-3,4,0,-4,16,0,-5,11,0,-6,20,0,-7,10,0,-9,6,0,-10,5,0,-11,7,0,-12,13,0,-13,12,0,-14,8,0,-15,9,0,0,4,0,-1,162,0,-2,163,0,-3,29,0,-4,167,0,-5,15,0,-6,55,0,-7,87,0,-8,172,0,-9,173,0,-10,174,0,0,5,0,0,5,0,-3,236,0,-1,76,0,-2,127,0,-3,128,0,-4,129,0,-5,130,0,-6,131,0,-7,132,0,0,6,0,0,6,0,-3,265,0,0,6,0,-1,62,0,-2,93,0,-3,183,0,-4,184,0,-5,185,0,-6,94,0,-7,96,0,0,7,0,0,7,0,0,7,0,-4,254,0,-1,88,0,-2,89,0,-3,90,0,-4,179,0,-5,180,0,-6,92,0,0,8,0,0,8,0,0,8,0,-4,152,0,-1,153,0,-2,84,0,-3,154,0,-4,24,0,0,9,0,0,9,0,0,9,0,-4,241,0,-1,157,0,-2,85,0,-3,158,0,-4,26,0,0,10,0,0,10,0,43,108,0,44,112,0,45,111,0,46,110,0,47,109,0,48,290,0,49,289,0,50,288,0,51,287,0,52,286,0,53,43,0,54,42,0,55,72,0,56,41,0,57,40,0,58,20,0,59,11,0,60,16,0,0,10,0,-1,108,0,-2,40,0,-3,41,0,-4,72,0,-5,42,0,-6,43,0,0,11,0,-1,189,0,-2,190,0,-3,97,0,-4,196,0,-5,18,0,-6,19,0,0,12,0,0,12,0,-3,105,0,-1,69,0,-2,208,0,-3,209,0,-4,70,0,-5,38,0,0,13,0,0,13,0,13,105,0,9,291,0,61,221,0,0,13,0,0,13,0,-1,73,0,-2,218,0,-3,219,0,-4,44,0,0,14,0,0,14,0,-1,191,0,-2,192,0,-3,98,0,-4,99,0,-5,100,0,0,15,0,0,15,0,-3,170,0,62,245,0,10,170,0,0,15,0,-1,30,0,-2,54,0,0,16,0,-1,175,0,-2,56,0,-3,59,0,-4,63,0,0,17,0,0,17,0,63,59,0,64,56,0,65,65,0,66,64,0,67,63,0,68,17,0,0,17,0,-1,64,0,-2,65,0,0,18,0,0,18,0,-3,198,0,69,277,0,70,276,0,71,275,0,10,198,0,0,18,0,-1,35,0,-2,66,0,0,19,0,0,19,0,-1,200,0,-2,201,0,-3,202,0,-4,199,0,0,20,0,10,106,0,0,20,0,13,105,0,25,103,0,0,20,0,-1,102,0,-2,36,0,0,21,0,0,21,0,-3,103,0,13,105,0,25,103,0,0,21,0,-1,37,0,-2,68,0,0,22,0,0,22,0,-3,106,0,10,106,0,0,22,0,-1,39,0,-2,71,0,0,23,0,0,23,0,72,23,0,0,23,0,-1,148,0,0,24,0,0,24,0,-3,240,0,-1,25,0,-2,52,0,0,25,0,0,25,0,0,25,0,-4,239,0,-1,155,0,0,26,0,0,26,0,-3,160,0,-1,27,0,-2,53,0,0,27,0,0,27,0,0,27,0,-4,243,0,-1,159,0,0,28,0,0,28,0,-1,161,0,0,29,0,0,29,0,-1,164,0,-2,165,0,-3,166,0,0,30,0,0,30,0,0,30,0,-4,247,0,-1,169,0,0,31,0,0,31,0,-3,252,0,-1,32,0,-2,58,0,0,32,0,0,32,0,0,32,0,-4,251,0,-1,176,0,0,33,0,0,33,0,-3,263,0,-1,34,0,-2,61,0,0,34,0,0,34,0,0,34,0,-4,262,0,-1,181,0,0,35,0,0,35,0,0,35,0,-4,274,0,-1,197,0,0,36,0,-1,204,0,-2,205,0,-3,67,0,0,37,0,0,37,0,0,37,0,-4,207,0,-1,206,0,0,38,0,0,38,0,-3,283,0,-1,210,0,0,39,0,0,39,0,0,39,0,-4,285,0,-1,212,0,0,40,0,0,40,0,-1,109,0,-2,213,0,0,41,0,0,41,0,-1,214,0,-2,110,0,0,42,0,0,42,0,-1,216,0,-2,111,0,0,43,0,0,43,0,-1,217,0,-2,112,0,0,44,0,0,44,0,-3,221,0,-1,45,0,-2,74,0,0,45,0,0,45,0,0,45,0,-4,293,0,-1,220,0,0,46,0,0,46,0,73,234,0,74,119,0,0,46,0,-1,123,0,0,47,0,-1,77,0,-2,135,0,-3,136,0,0,48,0,-1,79,0,-2,139,0,-3,140,0,0,49,0,0,49,0,0,50,0,0,50,0,0,51,0,0,51,0,-1,156,0,0,52,0,0,52,0,0,52,0,0,53,0,0,53,0,0,53,0,0,54,0,0,54,0,0,54,0,-1,86,0,0,55,0,0,55,0,-1,171,0,0,56,0,-2,253,0,0,57,0,0,57,0,0,58,0,0,58,0,0,58,0,0,59,0,-2,264,0,0,60,0,0,60,0,0,61,0,0,61,0,0,61,0,0,62,0,0,62,0,-1,182,0,0,63,0,0,63,0,0,64,0,0,64,0,-1,187,0,0,65,0,0,65,0,-1,188,0,0,66,0,0,66,0,0,66,0,-1,101,0,0,67,0,0,67,0,-2,211,0,0,68,0,0,68,0,0,68,0,-1,104,0,0,69,0,0,69,0,-3,279,0,0,70,0,0,70,0,-3,282,0,0,71,0,0,71,0,0,71,0,-1,107,0,0,72,0,0,72,0,-1,215,0,0,73,0,0,73,0,-3,291,0,0,74,0,0,74,0,0,74,0,-1,113,0,0,75,0,0,75,0,-3,230,0,0,76,0,0,76,0,0,77,0,0,77,0,14,134,0,0,77,0,0,78,0,0,78,0,0,79,0,0,79,0,14,134,0,0,79,0,0,80,0,-1,142,0,-2,144,0,0,81,0,0,81,0,-1,146,0,0,82,0,0,82,0,-1,147,0,0,83,0,0,83,0,0,84,0,0,84,0,0,85,0,0,85,0,0,86,0,0,86,0,0,87,0,0,87,0,0,88,0,0,88,0,-1,177,0,0,89,0,0,89,0,0,90,0,-2,257,0,-1,91,0,0,91,0,0,91,0,-1,178,0,0,92,0,-2,260,0,0,93,0,0,93,0,0,94,0,-2,271,0,-1,95,0,0,95,0,0,95,0,-1,186,0,0,96,0,-2,272,0,0,97,0,0,97,0,0,98,0,0,98,0,-1,193,0,0,99,0,0,99,0,-1,194,0,0,100,0,0,100,0,-1,195,0,0,101,0,0,101,0,0,102,0,0,102,0,-1,203,0,0,104,0,0,104,0,0,107,0,0,107,0,0,108,0,0,108,0,0,109,0,0,109,0,0,110,0,0,110,0,0,111,0,0,111,0,0,112,0,0,112,0,0,113,0,0,113,0,0,114,0,-2,225,0,0,115,0,0,115,0,0,116,0,0,116,0,0,117,0,-2,227,0,0,118,0,-2,228,0,0,120,0,0,121,0,-2,231,0,0,122,0,-2,232,0,0,123,0,-2,233,0,0,124,0,-2,234,0,0,126,0,0,127,0,0,127,0,0,128,0,-2,237,0,0,129,0,0,129,0,0,130,0,0,130,0,0,131,0,0,131,0,0,132,0,0,132,0,0,133,0,0,133,0,0,135,0,0,136,0,0,136,0,0,137,0,0,137,0,0,138,0,0,138,0,0,139,0,0,139,0,0,140,0,0,140,0,0,141,0,0,141,0,0,142,0,-2,143,0,0,144,0,-2,145,0,0,146,0,0,146,0,0,147,0,0,147,0,0,148,0,0,148,0,0,149,0,0,149,0,0,150,0,-2,151,0,0,153,0,0,153,0,0,154,0,0,154,0,0,155,0,-2,238,0,0,156,0,0,156,0,0,157,0,0,157,0,0,158,0,0,158,0,0,159,0,-2,242,0,0,161,0,-2,244,0,0,162,0,0,162,0,0,163,0,0,163,0,0,164,0,0,164,0,0,165,0,0,165,0,0,166,0,0,166,0,0,167,0,-1,168,0,0,168,0,-2,245,0,0,169,0,-2,246,0,0,171,0,0,171,0,0,172,0,-2,248,0,0,173,0,-2,249,0,0,174,0,75,249,0,76,248,0,0,174,0,0,175,0,0,175,0,0,176,0,-2,250,0,0,177,0,-2,255,0,0,178,0,-2,256,0,0,179,0,-2,258,0,0,180,0,-2,259,0,0,181,0,-2,261,0,0,182,0,-2,266,0,0,183,0,-2,267,0,0,184,0,-2,268,0,0,185,0,-2,269,0,0,186,0,-2,270,0,0,187,0,0,187,0,0,188,0,0,188,0,0,189,0,0,189,0,0,190,0,0,190,0,0,191,0,0,191,0,0,192,0,0,192,0,0,193,0,0,193,0,0,194,0,0,194,0,0,195,0,0,195,0,0,196,0,0,196,0,0,197,0,-2,273,0,0,199,0,-2,275,0,0,200,0,0,200,0,0,201,0,-2,276,0,0,202,0,-2,277,0,0,203,0,0,203,0,0,204,0,0,204,0,0,205,0,0,205,0,0,206,0,-2,278,0,0,208,0,-2,280,0,0,209,0,-2,281,0,0,210,0,0,210,0,0,211,0,0,211,0,0,212,0,-2,284,0,0,213,0,-2,286,0,0,214,0,-2,287,0,0,215,0,-2,288,0,0,216,0,-2,289,0,0,217,0,-2,290,0,0,218,0,0,218,0,0,219,0,0,219,0,0,220,0,-2,292,0,-1,224,0,0,226,0,0,229,0,77,222,1,5,3,2,5,3,3,5,222,14,5,97,17,5,63,21,5,67,22,5,36,28,5,53,31,5,56,33,5,59,51,5,52,57,5,58,60,5,61,103,7,207,103,78,207,103,26,104,105,79,283,105,15,282,105,80,281,105,81,280,105,9,279,106,7,285,106,26,107,119,82,125,119,83,236,119,84,235,119,85,233,119,86,225,119,87,232,119,88,230,119,89,227,119,0,120,125,0,126,134,0,135,160,7,243,170,7,247,198,7,274,207,90,278,221,7,293,230,14,231,236,27,237,239,16,240,241,91,244,251,16,252,253,92,254,254,28,260,254,93,259,254,29,258,254,94,256,254,30,257,254,95,255,262,16,263,264,96,265,265,28,272,265,97,270,265,27,271,265,98,269,265,29,268,265,30,267,265,99,266,732],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,231,134,238,238,242,242,246,246,250,250,253,253,253,257,260,254,254,261,261,264,264,267,272,265,265,273,273,278,278,284,284,292,292],[1,1,1,1,1,1,1,1,100,1,1,1,1,1,1,1,1,11,101,102,103,1,2,1,2,1,1,-1,-2,8,2,1,2,1,1,-1,-2,8,-1,-2,8,1,1,1,2,1,2,1,104,1,1,1,2,1,2,1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-1,1,1,1,1,-1,-2,8,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,2,1,2,1,-1,-2,1,1,1,1,-1,-2,8,-1,-2,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,105,1,1,1,1,2,1,2,1,31,32,33,1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,1,2,1,2,1,34,106,34,-1,-2,-3,31,32,33,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,1,107,108,109,-1,-2,8,110,1,1,2,1,2,1,2,1,2,1,111,112,113,1,1,114,35,2,1,115,116,1,1,117,35,2,1,2,1,2,1,2,1],[11,1,12,58,24,1,1,59,60,61,12,25,25,12,13,14,15,15,15,62,63,5,0,2,0,3,5,6,16,6,0,2,0,3,5,6,16,6,6,16,6,11,1,17,26,2,0,3,64,24,65,27,0,2,0,3,18,28,29,30,31,32,33,34,19,35,36,37,38,39,40,41,42,66,1,14,67,43,7,20,7,18,28,29,30,31,32,33,34,19,35,36,37,38,39,40,42,41,0,2,0,3,8,44,1,14,1,43,7,20,7,8,44,45,45,68,27,69,70,1,1,1,71,17,0,2,0,3,72,1,73,5,11,0,2,0,3,46,47,48,5,74,75,76,77,78,79,80,81,82,83,84,85,86,17,87,2,0,3,49,88,49,21,9,22,46,47,48,89,10,90,10,91,1,10,92,10,93,94,0,2,0,3,5,95,96,97,7,20,7,98,13,13,0,4,0,4,26,4,0,4,99,100,101,18,50,50,51,0,4,102,103,8,52,52,51,0,4,0,4,0,4,0,4]],[[[88,"default-particle-gpu-material",[{}],[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}]]],0,0,[0],[36],[104]],[[[14,"CardRow"],[106,"CardRow",33554432,[[5,-2,[0,"e1A/a+SFdBM6cYQ+goYbwn"],[5,-30,774]],[132,1,1,30,true,-3,[0,"95Ee7xXZlFGpUd6UBWQDIO"]]],[2,"e6ovRZYERDLaAn0KC41BWe",null,null,null,-1,0],[1,0,-387,0]]],0,[0,3,1,0,0,1,0,0,1,0,4,1,3],[],[],[]],[[{"name":"default_btn_normal","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"vertices":{"rawPosition":[-20,-20,0,20,-20,0,-20,20,0,20,20,0],"indexes":[0,1,2,2,1,3],"uv":[0,40,40,40,0,0,40,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-20,"y":-20,"z":0},"maxPos":{"x":20,"y":20,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[4],0,[0],[6],[105]],[[{"name":"default_progressbar","rect":{"x":0,"y":0,"width":30,"height":15},"offset":{"x":0,"y":0},"originalSize":{"width":30,"height":15},"rotated":false,"capInsets":[10,4,10,4],"vertices":{"rawPosition":[-15,-7.5,0,15,-7.5,0,-15,7.5,0,15,7.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,15,30,15,0,0,30,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-15,"y":-7.5,"z":0},"maxPos":{"x":15,"y":7.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[4],0,[0],[6],[106]],[[[14,"OpenedEverydayCard"],[27,"OpenedEverydayCard",33554432,[-6],[[5,-2,[0,"99zJYJaqNEK59bXCjVebaG"],[5,244,332]],[10,0,-3,[0,"a9rLh0PnZE1JGmt8963/FI"],0],[68,-5,[0,"2d9P8zcwBJUqo7eBl6J125"],-4]],[2,"34DZqjdKBL2rR5MmAcBF3G",null,null,null,-1,0],[1,15.27800000000002,22.09699999999998,0],[1,0.6,0.6,1]],[39,"DayNumber",33554432,1,[-8],[[28,-7,[0,"9f71TfZUZOwbhkVHOtT9gI"]]],[2,"437ZRWd5NONIw1mLusr8bb",null,null,null,1,0]],[20,"CardDay",33554432,2,[[[5,-9,[0,"d20h10UuhICKpuLBGfAV0H"],[5,33.369140625,75.6]],-10],4,1],[2,"f4a1O8UydBgonnlkl8lZXW",null,null,null,1,0],[1,-8.287999999999784,-5.572999999999865,0]],[37,"1",60,60,60,3,[0,"07sV10ZjdIa5joUqy0w0ga"],[4,4286633970]]],0,[0,3,1,0,0,1,0,0,1,0,17,4,0,0,1,0,-1,2,0,0,2,0,-1,3,0,0,3,0,-2,4,0,4,1,10],[0],[1],[107]],[[[14,"UnlockedEverydayCard"],[27,"UnlockedEverydayCard",33554432,[-6],[[5,-2,[0,"99zJYJaqNEK59bXCjVebaG"],[5,230,320]],[23,-3,[0,"a9rLh0PnZE1JGmt8963/FI"],0],[68,-5,[0,"b6vrw+gSVJ0oSdbYiQNn8o"],-4]],[2,"34DZqjdKBL2rR5MmAcBF3G",null,null,null,-1,0],[1,15.27800000000002,22.09699999999998,0],[1,0.6,0.6,1]],[39,"DayNumber",33554432,1,[-8],[[28,-7,[0,"87vv77BPNLm7Hn2ljS7qpo"]]],[2,"3eRLk07b5FyLMBkQZt3f7t",null,null,null,1,0]],[20,"CardDay",33554432,2,[[[5,-9,[0,"d20h10UuhICKpuLBGfAV0H"],[5,33.369140625,75.6]],-10],4,1],[2,"f4a1O8UydBgonnlkl8lZXW",null,null,null,1,0],[1,-2.0929999999997335,0.6210000000000946,0]],[37,"1",60,60,60,3,[0,"07sV10ZjdIa5joUqy0w0ga"],[4,4286633970]]],0,[0,3,1,0,0,1,0,0,1,0,17,4,0,0,1,0,-1,2,0,0,2,0,-1,3,0,0,3,0,-2,4,0,4,1,10],[0],[1],[108]],[[[14,"FloatingText"],[107,"FloatingText",33554432,[-4],[[28,-2,[0,"dfZyBY1MlFtJ5O3LXVBHrV"]],[182,0.5,-3,[0,"30mVRyjPlBIYWNUX9G9iB0"]]],[2,"7dCazQom9GyKQBZggvZ9uo",null,null,null,-1,0]],[34,"Label",33554432,1,[[5,-5,[0,"2agV+5Zq1Czq0nwYvDOp+l"],[5,135.703125,100.8]],[24,"+13",80,80,80,true,-6,[0,"8fBxek4rRGkaidFfoDO5YH"]]],[2,"fbZhfdwIFLM422/yFPovHT",null,null,null,1,0]]],0,[0,3,1,0,0,1,0,0,1,0,-1,2,0,0,2,0,0,2,0,4,1,6],[],[],[]],[[[14,"OpenedModalCard"],[27,"OpenedModalCard",33554432,[-8,-9,-10,-11],[[5,-2,[0,"99zJYJaqNEK59bXCjVebaG"],[5,440,520]],[10,0,-3,[0,"a9rLh0PnZE1JGmt8963/FI"],2],[183,-7,[0,"2cf83lMqRF9bIVs5m4nHXs"],-6,-5,-4]],[2,"34DZqjdKBL2rR5MmAcBF3G",null,null,null,-1,0],[1,15.27800000000002,22.09699999999998,0],[1,0.6,0.6,1]],[20,"Button",33554432,1,[[[5,-12,[0,"33PujKhrBJ/KllT+V14/FM"],[5,232,320]],[58,1,0,-13,[0,"cdnBLN9bJEn4c2luDtkgVK"],1],-14],4,4,1],[2,"0b073iRWxKsodRHc/u2dHt",null,null,null,1,0],[1,1.84699999999998,-26.204999999999927,0]],[71,"UpsideDownCard",false,33554432,1,[[[5,-15,[0,"8cg/XplOBCsppsw0bzwkCC"],[5,232,320]],-16],4,1],[2,"f3xWhtPVZJXqWTlj8TwEQn",null,null,null,1,0],[1,1.847,-26.205,0]],[20,"NumberOfDay",33554432,1,[[[5,-17,[0,"0cmQ/GXCFBWbiZkMs+YEL1"],[5,201.94215393066406,77.238]],-18],4,1],[2,"57UkN/VKFM4oIUseL2B4Kr",null,null,null,1,0],[1,1.815,194.287,0]],[9,"галочка",33554432,1,[[5,-19,[0,"fbEedZSHVJNpQmFtwjk44a"],[5,80,80]],[23,-20,[0,"d4tTcoIrVBvbobTSZQwiJn"],0]],[2,"3ad7fGtjVJDphzVrSNipdx",null,null,null,1,0],[1,188.992,228.405,0]],[47,3,[0,"eaHDqax7lEDL6HJ1eh7Hv2"]],[82,"День 1",64.3,64.3,61.3,4,[0,"4fp00ncRFFaY6/fcWnOCHb"]],[61,2,2,[0,"e6AV11e/xGuZtG2kq/ljqS"],[4,4292269782],2]],0,[0,3,1,0,0,1,0,0,1,0,15,8,0,12,6,0,18,7,0,0,1,0,-1,3,0,-2,4,0,-3,5,0,-4,2,0,0,2,0,0,2,0,-3,8,0,0,3,0,-2,6,0,0,4,0,-2,7,0,0,5,0,0,5,0,4,1,20],[0,0,0,8],[1,1,1,11],[109,53,54,53]],[[[14,"LockedModalCard"],[27,"LockedModalCard",33554432,[-7,-8],[[5,-2,[0,"99zJYJaqNEK59bXCjVebaG"],[5,440,520]],[23,-3,[0,"a9rLh0PnZE1JGmt8963/FI"],1],[184,-6,[0,"4444ki9TNKrpsA9R0Wc+Q7"],-5,-4]],[2,"34DZqjdKBL2rR5MmAcBF3G",null,null,null,-1,0],[1,15.27800000000002,22.09699999999998,0],[1,0.6,0.6,1]],[31,"UpsideDownCard",33554432,1,[-11],[[5,-9,[0,"8cg/XplOBCsppsw0bzwkCC"],[5,232,320]],[23,-10,[0,"eaHDqax7lEDL6HJ1eh7Hv2"],0]],[2,"f3xWhtPVZJXqWTlj8TwEQn",null,null,null,1,0],[1,1.847,-26.205,0]],[20,"lock",33554432,2,[[[5,-12,[0,"91u6L32E1A9qxxX/P0BQlK"],[5,114,136]],-13],4,1],[2,"8cNV4E1dVDqrbYcvCjLXrp",null,null,null,1,0],[1,-0.437,6.458,0]],[20,"NumberOfDay",33554432,1,[[[5,-14,[0,"0cmQ/GXCFBWbiZkMs+YEL1"],[5,201.94215393066406,77.238]],-15],4,1],[2,"57UkN/VKFM4oIUseL2B4Kr",null,null,null,1,0],[1,1.815,194.287,0]],[47,3,[0,"35YwYnCmhKpI0O5EQ8LD60"]],[37,"День 1",64.3,64.3,61.3,4,[0,"4fp00ncRFFaY6/fcWnOCHb"],[4,4286413430]]],0,[0,3,1,0,0,1,0,0,1,0,118,5,0,18,6,0,0,1,0,-1,2,0,-2,4,0,0,2,0,0,2,0,-1,3,0,0,3,0,-2,5,0,0,4,0,-2,6,0,4,1,15],[0,0,5],[1,1,1],[110,111,112]],[[{"name":"default_btn_pressed","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"vertices":{"rawPosition":[-20,-20,0,20,-20,0,-20,20,0,20,20,0],"indexes":[0,1,2,2,1,3],"uv":[0,40,40,40,0,0,40,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-20,"y":-20,"z":0},"maxPos":{"x":20,"y":20,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[4],0,[0],[6],[113]],[[[14,"BoosterBannerMaxLevel"],[35,"BoosterBannerMaxLevel",33554432,[-4,-5,-6,-7,-8,-9],[[7,-2,[0,"16KzMKaqpCFrUAJo7b0+Qf"],[5,1080,619.9],[0,0.5,1]],[10,0,-3,[0,"eceM8qVQlJNZPkjHeMVhXE"],2]],[2,"1elWHIfTZKKIv5/DOTQ0Wk",null,null,null,-1,0],[1,0,-100,0]],[9,"Image",33554432,1,[[7,-10,[0,"f0vaRrYKBPg5AanGT5YYqt"],[5,960,490],[0,0.5,1]],[10,0,-11,[0,"024Ku6NQ1Gu6PAaQbqpOdN"],0]],[2,"ddFUrSvgxIO44PdxzDV9dX",null,null,null,1,0],[1,0,-60,0]],[9,"Title",33554432,1,[[7,-12,[0,"a1uwndoNZOsIGrjGyMcuCT"],[5,334.765625,63],[0,0,0.5]],[24,"Белое золото",50,50,50,true,-13,[0,"53BxMCYZtB1bOJedQTXJBY"]]],[2,"7bLFMj6VhCQpWjtEqgrXln",null,null,null,1,0],[1,-437.732,-146.904,0]],[9,"Descr",33554432,1,[[7,-14,[0,"28HZXOKfRGn4ES44aIvCg1"],[5,173.4521484375,50.4],[0,0,0.5]],[83,"Доход в час:",30,30,-15,[0,"29bNnpwClHP7uOTuT3JiF6"]]],[2,"b08RUyxm5PnIAt1oyQuZRK",null,null,null,1,0],[1,-433.671,-411.163,0]],[9,"coin",33554432,1,[[5,-16,[0,"61t3UZByRGGLGKflMRj+D3"],[5,92,92]],[10,0,-17,[0,"e2Ygr4krtMg4lgB0Dd5nRj"],1]],[2,"48w7dIHehH6678gI0wtP+i",null,null,null,1,0],[1,-386.374,-488.452,0]],[9,"Income",33554432,1,[[7,-18,[0,"81UGywyoBKS7xplTj/WvoY"],[5,201.85546875,75.6],[0,0,0.5]],[24,"+ 1 302",60,60,60,true,-19,[0,"73aZFnRAdJ+aVL9CgsXa2c"]]],[2,"f9Dc2zUtJDupsNj8oxr2EI",null,null,null,1,0],[1,-307.292,-488.452,0]],[9,"Level",33554432,1,[[7,-20,[0,"d63CsVo5VLIry1Pc9qRX29"],[5,300.966796875,75.6],[0,0,0.5]],[24,"Уровень 1",60,60,60,true,-21,[0,"5dIjclZk5K/4BlrfcyarlI"]]],[2,"8c87tKRi9NQIABI6zGbcr7",null,null,null,1,0],[1,105.609,-488.452,0]]],0,[0,3,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,-3,4,0,-4,5,0,-5,6,0,-6,7,0,0,2,0,0,2,0,0,3,0,0,3,0,0,4,0,0,4,0,0,5,0,0,5,0,0,6,0,0,6,0,0,7,0,0,7,0,4,1,21],[0,0,0],[1,1,1],[8,1,114]],[[[14,"Banner"],[35,"Banner",33554432,[-4,-5,-6,-7,-8],[[7,-2,[0,"d6A/1/nw1NsprZbpAAhB/y"],[5,1080,883.2],[0,0.5,1]],[10,0,-3,[0,"6epBatA0FNFqDo00JeUj4F"],3]],[2,"fc5vyUZa5Eja4KHeNZBVU4",null,null,null,-1,0],[1,0,427.9140000000001,0]],[31,"payButton",33554432,1,[-11],[[5,-9,[0,"e67tsb2+VLELMcJtkUcQmZ"],[5,307,92]],[10,0,-10,[0,"48o60amOFEg7D0Vv8LNnbK"],0]],[2,"22E40ZbRVMgq5+AGznol/U",null,null,null,1,0],[1,-339.227,-811.3479999999998,0]],[31,"coin",33554432,1,[-14],[[5,-12,[0,"d5H4/wM2FD46ZaO5HMnQze"],[5,92,92]],[10,0,-13,[0,"196Jk74KJH/JIYGRUQ7aay"],1]],[2,"a51cX6iypL9ai/9oP33GCj",null,null,null,1,0],[1,79.42899999999997,-814.1889999999999,0]],[34,"Label",33554432,2,[[5,-15,[0,"10BfGBA6JFgZtRizkfRgBM"],[5,158.0810546875,63]],[37,"Купить",50,50,50,-16,[0,"3bAk8al+JKIbdHvPtivbR/"],[4,4278190080]]],[2,"12BMJp8bVHzZCrONDD1wmf",null,null,null,1,0]],[9,"Price",33554432,3,[[7,-17,[0,"fcN+DJGvdA14yhTOWYRO8o"],[5,266.923828125,50.4],[0,0,0.5]],[51,"3 000 000",60,60,true,-18,[0,"9bm7B1ct5IqrJpdIBOf+Un"]]],[2,"f5UHO88qxHn7DUCNVhe/0G",null,null,null,1,0],[1,74.95100000000002,0,0]],[9,"Image",33554432,1,[[7,-19,[0,"8eGGgHEA1JNq3/ZR0ejtBr"],[5,960,452.2],[0,0.5,1]],[59,0,-20,[0,"a17iAc72RLKIPrOtFGNeOu"]]],[2,"8e7Nr3fYpKxpld4H+Uwerr",null,null,null,1,0],[1,0,-54.64799999999991,0]],[9,"heat",33554432,1,[[7,-21,[0,"32a/QT3F1E0o1nn9QpYbRJ"],[5,300,303],[0,1,1]],[10,0,-22,[0,"f75Z9N+itHmrEHBvYHqTKU"],2]],[2,"ceM+fghRxNJK3ChTV9HiHj",null,null,null,1,0],[1,-187.43200000000002,-53.571000000000026,0]],[9,"Title",33554432,1,[[7,-23,[0,"1fl63HZEhKVr9QOZlsy/A3"],[5,783.9599609375,163],[0,0,1]],[146,"Твоё послание на Медиа-экране, \nул. Вайнера, г. Екатеринбург",0,50,50,50,3,true,-24,[0,"eeaFs20YNE654x0Mgt6R9A"]]],[2,"b7UITJvdlLyIOEx1u4mDeq",null,null,null,1,0],[1,-486.153,-521.5879999999999,0]]],0,[0,3,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,-3,6,0,-4,7,0,-5,8,0,0,2,0,0,2,0,-1,4,0,0,3,0,0,3,0,-1,5,0,0,4,0,0,4,0,0,5,0,0,5,0,0,6,0,0,6,0,0,7,0,0,7,0,0,8,0,0,8,0,4,1,24],[0,0,0,0],[1,1,1,1],[55,1,115,116]],[[[14,"UnlockedModalCard"],[27,"UnlockedModalCard",33554432,[-8,-9,-10],[[5,-2,[0,"99zJYJaqNEK59bXCjVebaG"],[5,440,520]],[10,0,-3,[0,"a9rLh0PnZE1JGmt8963/FI"],1],[185,-7,[0,"83psbNhMdDsrUO7duNLp1R"],-6,-5,-4]],[2,"34DZqjdKBL2rR5MmAcBF3G",null,null,null,-1,0],[1,15.27800000000002,22.09699999999998,0],[1,0.6,0.6,1]],[20,"Button",33554432,1,[[[5,-11,[0,"b7dCcGIDlLnb/LZ83nuA3l"],[5,232,320]],[58,1,0,-12,[0,"fabjCnGo1Myp7YlIgq80ja"],0],-13],4,4,1],[2,"4dE5EAfKdOFqKslp6QyG0Y",null,null,null,1,0],[1,0,-26.205,0]],[71,"UpsideDownCard",false,33554432,1,[[[5,-14,[0,"8cg/XplOBCsppsw0bzwkCC"],[5,232,320]],-15],4,1],[2,"f3xWhtPVZJXqWTlj8TwEQn",null,null,null,1,0],[1,1.847,-26.205,0]],[20,"NumberOfDay",33554432,1,[[[5,-16,[0,"0cmQ/GXCFBWbiZkMs+YEL1"],[5,201.94215393066406,77.238]],-17],4,1],[2,"57UkN/VKFM4oIUseL2B4Kr",null,null,null,1,0],[1,1.815,194.287,0]],[47,3,[0,"eaHDqax7lEDL6HJ1eh7Hv2"]],[82,"День 1",64.3,64.3,61.3,4,[0,"4fp00ncRFFaY6/fcWnOCHb"]],[61,2,2,[0,"01t7zcfN9BB7AxXsJuEBK8"],[4,4292269782],2]],0,[0,3,1,0,0,1,0,0,1,0,15,7,0,12,5,0,18,6,0,0,1,0,-1,3,0,-2,4,0,-3,2,0,0,2,0,0,2,0,-3,7,0,0,3,0,-2,5,0,0,4,0,-2,6,0,4,1,17],[0,0,7],[1,1,11],[56,54,56]],[[[14,"QuestItem"],[35,"QuestItem",33554432,[-8,-9,-10,-11],[[5,-2,[0,"dcoDtmmjBAEqzCGqwTieA1"],[5,1080,248.1]],[10,0,-3,[0,"1djZAPJRhKw5vwpr/e8o7o"],2],[186,-7,[0,"cdPmBhcUBFVJAOqt9BwG9V"],-6,-5,-4,[3,4,5]]],[2,"e5JNc1wz5Ka7BAIpCWovGR",null,null,null,-1,0],[1,5.153999999999996,28.619000000000028,0]],[75,"RewardWrapper",33554432,1,[-13,-14],[[28,-12,[0,"69OtVdB/pNZpux68eOhvg8"]]],[2,"7aQp/IrN9BrYM9sPAnGl5O",null,null,null,1,0],[1,-317.721,-41.81099999999992,0],[1,0.1,0.1,1]],[43,"RewardLabel",33554432,2,[[[7,-15,[0,"d1jUyHkkhJ0LQ9i7bnk9Ae"],[5,190.1953125,50.4],[0,1,0]],-16],4,1],[2,"7cDcoWQ3dDrYcp6Ohu2xl9",null,null,null,1,0],[1,2335.23,-265.65999999999804,0],[1,10,10,1]],[34,"coin",33554432,2,[[5,-17,[0,"bb2fSFD7lOcqNjeZGdNoTs"],[5,600,600]],[23,-18,[0,"41MUzg4wlO6Zut5Xe/hN5K"],0]],[2,"80/7Dn/mZIFqkTmsejzpnS",null,null,null,1,0]],[43,"SimaLogo",33554432,1,[[[5,-19,[0,"561+31pJ5AZaIdx7YgIflo"],[5,120,125]],-20],4,1],[2,"66eN0Dt29LTr1y0z/vNd7d",null,null,null,1,0],[1,-457.586,-4.144999999999868,0],[1,1.1,1.1,1]],[20,"QuestLabel",33554432,1,[[[7,-21,[0,"5ejmZziApMZZdRDiC4CV+i"],[5,621.121875,50.4],[0,0,0]],-22],4,1],[2,"e2t7CbcfpL25yW7gt0bUu6",null,null,null,1,0],[1,-343.651,10.353000000000065,0]],[9,"RightArrow",33554432,1,[[5,-23,[0,"7eDLoWKrlJ9qIy0/GSlRu4"],[5,33,96]],[10,0,-24,[0,"86sLyEzsVMLZ+KsAcQgzLL"],1]],[2,"52v2GaVfZDjIfQi2iKNTi7",null,null,null,1,0],[1,463.981,1.519,0]],[84,"+ 1000000",2,40,true,3,[0,"8e9/wHVUxNfb7AR/hVezp8"]],[59,0,5,[0,"02AkzF3hVNorQSm8E88LoN"]],[85,"Дейстие для задания",0,40,3,6,[0,"a0JW1KirNOCK/5+XUuBvv1"]]],0,[0,3,1,0,0,1,0,0,1,0,12,9,0,37,8,0,38,10,0,0,1,0,-1,2,0,-2,5,0,-3,6,0,-4,7,0,0,2,0,-1,3,0,-2,4,0,0,3,0,-2,8,0,0,4,0,0,4,0,0,5,0,-2,9,0,0,6,0,-2,10,0,0,7,0,0,7,0,4,1,24],[0,0,0,0,0,0,9],[1,1,1,-1,-2,-3,1],[1,117,57,21,9,22,9]],[[[14,"Card"],[35,"Card",33554432,[-4,-5,-6,-7,-8],[[7,-2,[0,"24zE8l0OhGB4ERZ06xGZ+j"],[5,520,734],[0,1,0.6]],[10,0,-3,[0,"2fBUTreDxEBpCf/MsYjxvw"],4]],[2,"3bd7g+g5xMjoqGC4+uXDMc",null,null,null,-1,0],[1,0,-293.6,0]],[31,"coin",33554432,1,[-11],[[7,-9,[0,"d4ruEWlSZLNKLwQOApNsv5"],[5,92,92],[0,0.5,1.25]],[10,0,-10,[0,"fdR8fMBTpPQ6KMKxFSMGvN"],2]],[2,"d8Kz0/Hy1Ogb7EiPVUopMF",null,null,null,1,0],[1,-323.033,-297.96000000000004,0]],[9,"Image",33554432,1,[[7,-12,[0,"7e9VGfVzxBJ6QFjv29NEqS"],[5,440,290],[0,1,1.25]],[10,0,-13,[0,"5e19snBX1GI5hz/2krJOaz"],0]],[2,"63ww/44xJHbaqdRDjxCuT3",null,null,null,1,0],[1,-38.57899999999995,328.2930000000001,0]],[9,"Title",33554432,1,[[7,-14,[0,"56o4nj1WVBT7HA5Q1oErZ3"],[5,513.4765625,101.69999999999999],[0,0.5,1.55]],[147,"Набор косметики  \n«Love collection»                ",0,45,45,45,3,false,true,-15,[0,"ccgNGVyEBEB5IlSinMK6bT"],1]],[2,"3eoChDUvdNubuWE7LB4RPQ",null,null,null,1,0],[1,-226.853,-17.80200000000002,0]],[9,"Descr",33554432,1,[[7,-16,[0,"e1NNn6MRpL5J7pMMFY9CH2"],[5,524.619140625,50.4],[0,0.5,2.65]],[148,"При заказе        на Сима-ленд             ",30,30,-17,[0,"f0TqR0dQVDcoMzCbzDTsl0"],[4,3036676095]]],[2,"82KdhI6ZVMiZtFJEpO+flC",null,null,null,1,0],[1,-230.928,-148.01199999999994,0]],[9,"Price",33554432,2,[[7,-18,[0,"7adeTaVg5M85JYV+95o6Gp"],[5,83.349609375,50.4],[0,0,1.9]],[149,"3M",0,60,60,true,-19,[0,"34kZabZcpAF54PhFA5z8l/"]]],[2,"0d00oMLtBBi7euxxfNwcXK",null,null,null,1,0],[1,72.585,0,0]],[108,"heatCard",false,33554432,1,[[7,-20,[0,"187LXMuFpNwr/pb1pzIvi6"],[5,200,200.1],[0,1,1.35]],[10,0,-21,[0,"26PqaRuM9MoLhINB/ZQZA9"],3]],[2,"8b9kvcRf9M5aQjXpotLVGR",null,null,null,1,0],[1,-327.703,374.499,0]]],0,[0,3,1,0,0,1,0,0,1,0,-1,3,0,-2,4,0,-3,5,0,-4,2,0,-5,7,0,0,2,0,0,2,0,-1,6,0,0,3,0,0,3,0,0,4,0,0,4,0,0,5,0,0,5,0,0,6,0,0,6,0,0,7,0,0,7,0,4,1,21],[0,0,0,0,0],[1,119,1,1,1],[19,118,1,119,120]],[[[14,"BoosterBanner"],[35,"BoosterBanner",33554432,[-4,-5,-6,-7,-8,-9,-10,-11],[[7,-2,[0,"16KzMKaqpCFrUAJo7b0+Qf"],[5,1080,750],[0,0.5,1]],[10,0,-3,[0,"eceM8qVQlJNZPkjHeMVhXE"],4]],[2,"1elWHIfTZKKIv5/DOTQ0Wk",null,null,null,-1,0],[1,0,-100,0]],[31,"payButton",33554432,1,[-14],[[5,-12,[0,"13q8NOlOtCqqmkMVSxnF1i"],[5,307,92]],[10,0,-13,[0,"bfz5J2DVlMmKxs1YQhc0Gp"],0]],[2,"647kO2TV1Blrh13iudlzfo",null,null,null,1,0],[1,-339.227,-680,0]],[31,"coin",33554432,1,[-17],[[5,-15,[0,"36uK2O/c5BcLKRJM9JW8yv"],[5,92,92]],[10,0,-16,[0,"c80v5DywxNeqIhm3ZiEbvh"],1]],[2,"1bB/Cl4dZJe7QMZJowN0Hm",null,null,null,1,0],[1,79.42899999999997,-680,0]],[34,"Label",33554432,2,[[5,-18,[0,"1ahkoiUthEIaBKUxHwUGSd"],[5,158.0810546875,63]],[37,"Купить",50,50,50,-19,[0,"f1PQ7OyEpJBaig0LEPOLae"],[4,4278190080]]],[2,"c8cYfcFvVAM7fQNl8LaO05",null,null,null,1,0]],[9,"Price",33554432,3,[[7,-20,[0,"5aSnouJ5xCqILgobNXB/hv"],[5,266.923828125,50.4],[0,0,0.5]],[51,"3 000 000",60,60,true,-21,[0,"a0nVHmRllAm7UiVTOQ3uDy"]]],[2,"5d2iK540VJKYHxI+OhDmgL",null,null,null,1,0],[1,74.95100000000002,0,0]],[9,"Image",33554432,1,[[7,-22,[0,"f0vaRrYKBPg5AanGT5YYqt"],[5,960,490],[0,0.5,1]],[10,0,-23,[0,"024Ku6NQ1Gu6PAaQbqpOdN"],2]],[2,"ddFUrSvgxIO44PdxzDV9dX",null,null,null,1,0],[1,0,-60,0]],[9,"Title",33554432,1,[[7,-24,[0,"a1uwndoNZOsIGrjGyMcuCT"],[5,334.765625,63],[0,0,0.5]],[24,"Белое золото",50,50,50,true,-25,[0,"53BxMCYZtB1bOJedQTXJBY"]]],[2,"7bLFMj6VhCQpWjtEqgrXln",null,null,null,1,0],[1,-437.732,-146.904,0]],[9,"Descr",33554432,1,[[7,-26,[0,"28HZXOKfRGn4ES44aIvCg1"],[5,173.4521484375,50.4],[0,0,0.5]],[83,"Доход в час:",30,30,-27,[0,"29bNnpwClHP7uOTuT3JiF6"]]],[2,"b08RUyxm5PnIAt1oyQuZRK",null,null,null,1,0],[1,-433.671,-411.163,0]],[9,"coin",33554432,1,[[5,-28,[0,"61t3UZByRGGLGKflMRj+D3"],[5,92,92]],[10,0,-29,[0,"e2Ygr4krtMg4lgB0Dd5nRj"],3]],[2,"48w7dIHehH6678gI0wtP+i",null,null,null,1,0],[1,-386.374,-488.452,0]],[9,"Income",33554432,1,[[7,-30,[0,"81UGywyoBKS7xplTj/WvoY"],[5,201.85546875,75.6],[0,0,0.5]],[24,"+ 1 302",60,60,60,true,-31,[0,"73aZFnRAdJ+aVL9CgsXa2c"]]],[2,"f9Dc2zUtJDupsNj8oxr2EI",null,null,null,1,0],[1,-307.292,-488.452,0]],[9,"Level",33554432,1,[[7,-32,[0,"d63CsVo5VLIry1Pc9qRX29"],[5,300.966796875,75.6],[0,0,0.5]],[24,"Уровень 1",60,60,60,true,-33,[0,"5dIjclZk5K/4BlrfcyarlI"]]],[2,"8c87tKRi9NQIABI6zGbcr7",null,null,null,1,0],[1,105.609,-488.452,0]]],0,[0,3,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,-3,6,0,-4,7,0,-5,8,0,-6,9,0,-7,10,0,-8,11,0,0,2,0,0,2,0,-1,4,0,0,3,0,0,3,0,-1,5,0,0,4,0,0,4,0,0,5,0,0,5,0,0,6,0,0,6,0,0,7,0,0,7,0,0,8,0,0,8,0,0,9,0,0,9,0,0,10,0,0,10,0,0,11,0,0,11,0,4,1,33],[0,0,0,0,0],[1,1,1,1,1],[55,1,8,1,121]],[[[14,"QuestItemWithChecker"],[35,"QuestItemWithChecker",33554432,[-9,-10,-11,-12,-13],[[5,-2,[0,"dcoDtmmjBAEqzCGqwTieA1"],[5,1080,248.1]],[10,0,-3,[0,"1djZAPJRhKw5vwpr/e8o7o"],2],[187,"Выполнено","Проверить",-8,[0,"57vxK2jwlLh6nlAzm1y8GR"],-7,-6,-5,[3,4,5],-4,6,7]],[2,"e5JNc1wz5Ka7BAIpCWovGR",null,null,null,-1,0],[1,5.153999999999996,28.619000000000028,0]],[99,"Button",33554432,1,[-17],[[[5,-14,[0,"21opbK3txKAb48tW25cwdi"],[5,440,88]],[58,1,0,-15,[0,"c9cJ1cNa9PBYi76ARFZaN+"],1],-16],4,4,1],[2,"0bxwrEqJ5PF47f2g+gyrr/",null,null,null,1,0],[1,319.00300000000004,-41.926000000000045,0],[1,0.8,0.8,1]],[75,"RewardWrapper",33554432,1,[-19,-20],[[5,-18,[0,"69OtVdB/pNZpux68eOhvg8"],[5,100,108.3]]],[2,"7aQp/IrN9BrYM9sPAnGl5O",null,null,null,1,0],[1,-317.721,-41.81099999999992,0],[1,0.1,0.1,1]],[109,"CheckButton",false,33554432,1,[-23],[[5,-21,[0,"2fq53QSClB0JepKysp8au5"],[5,440,88]],[47,-22,[0,"9eH/rw+JdF34VCSbBSQxUH"]]],[2,"31PwBSnDhOsr3y1ufE5t28",null,null,null,1,0],[1,319.00300000000004,-42.132999999999925,0],[1,0.8,0.8,1]],[43,"RewardLabel",33554432,3,[[[7,-24,[0,"d1jUyHkkhJ0LQ9i7bnk9Ae"],[5,190.1953125,50.4],[0,1,0]],-25],4,1],[2,"7cDcoWQ3dDrYcp6Ohu2xl9",null,null,null,1,0],[1,2335.23,-265.65999999999804,0],[1,10,10,1]],[34,"coin",33554432,3,[[5,-26,[0,"bb2fSFD7lOcqNjeZGdNoTs"],[5,600,600]],[23,-27,[0,"41MUzg4wlO6Zut5Xe/hN5K"],0]],[2,"80/7Dn/mZIFqkTmsejzpnS",null,null,null,1,0]],[43,"SimaLogo",33554432,1,[[[5,-28,[0,"561+31pJ5AZaIdx7YgIflo"],[5,120,125]],-29],4,1],[2,"66eN0Dt29LTr1y0z/vNd7d",null,null,null,1,0],[1,-457.586,-4.144999999999868,0],[1,1.1,1.1,1]],[20,"QuestLabel",33554432,1,[[[7,-30,[0,"5ejmZziApMZZdRDiC4CV+i"],[5,621.121875,50.4],[0,0,0]],-31],4,1],[2,"e2t7CbcfpL25yW7gt0bUu6",null,null,null,1,0],[1,-343.651,10.353000000000065,0]],[110,"Label",512,33554432,2,[[5,-32,[0,"6fEP+NP3NEJpZcEXGbDkRZ"],[5,386.2,57.5]],[150,"Проверить",50,50,50,1,false,true,-33,[0,"a36xEd/S5NX4Ix+ugWarZo"]]],[2,"cbc/ef/a1Gr59B3I+1gM3d",null,null,null,1,0]],[34,"Label",33554432,4,[[5,-34,[0,"d41bznb2tFlqKdEJKtuKDL"],[5,271.4111328125,63]],[24,"Проверить",50,50,50,true,-35,[0,"0069W0xfdK0IkIVuKPbarH"]]],[2,"48PlqG5SxPUoOi+NJx+FFf",null,null,null,1,0]],[84,"+ 1000000",2,40,true,5,[0,"8e9/wHVUxNfb7AR/hVezp8"]],[59,0,7,[0,"02AkzF3hVNorQSm8E88LoN"]],[85,"Дейстие для задания",0,40,3,8,[0,"a0JW1KirNOCK/5+XUuBvv1"]],[61,2,2,[0,"efI7omXqFJ0Ia+pXtq++BE"],[4,4292269782],2]],0,[0,3,1,0,0,1,0,0,1,0,120,14,0,12,12,0,37,11,0,38,13,0,0,1,0,-1,3,0,-2,7,0,-3,8,0,-4,2,0,-5,4,0,0,2,0,0,2,0,-3,14,0,-1,9,0,0,3,0,-1,5,0,-2,6,0,0,4,0,0,4,0,-1,10,0,0,5,0,-2,11,0,0,6,0,0,6,0,0,7,0,-2,12,0,0,8,0,-2,13,0,0,9,0,0,9,0,0,10,0,0,10,0,4,1,35],[0,0,0,0,0,0,0,0,12,14],[1,1,1,-1,-2,-3,121,122,1,11],[1,23,57,21,9,22,122,23,9,23]],[[{"name":"default_btn_disabled","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"vertices":{"rawPosition":[-20,-20,0,20,-20,0,-20,20,0,20,20,0],"indexes":[0,1,2,2,1,3],"uv":[0,40,40,40,0,0,40,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-20,"y":-20,"z":0},"maxPos":{"x":20,"y":20,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[4],0,[0],[6],[123]],[[[89,"particles/builtin-particle-gpu",[{"hash":2859307513,"name":"particles/builtin-particle-gpu|builtin/internal/particle-vs-gpu:gpvs_main|tinted-fs:add","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]},{"name":"SampleConstants","stageFlags":1,"binding":1,"members":[{"name":"u_sampleInfo","type":16,"count":1}],"defines":[]},{"name":"TickConstants","stageFlags":1,"binding":2,"members":[{"name":"u_worldRot","type":16,"count":1},{"name":"u_timeDelta","type":16,"count":1}],"defines":[]},{"name":"ColorConstant","stageFlags":1,"binding":3,"members":[{"name":"u_color_mode","type":5,"count":1}],"defines":["COLOR_OVER_TIME_MODULE_ENABLE"]},{"name":"RotationConstant","stageFlags":1,"binding":4,"members":[{"name":"u_rotation_mode","type":5,"count":1}],"defines":["ROTATION_OVER_TIME_MODULE_ENABLE"]},{"name":"SizeConstant","stageFlags":1,"binding":5,"members":[{"name":"u_size_mode","type":5,"count":1}],"defines":["SIZE_OVER_TIME_MODULE_ENABLE"]},{"name":"ForceConstant","stageFlags":1,"binding":6,"members":[{"name":"u_force_mode","type":5,"count":1},{"name":"u_force_space","type":5,"count":1}],"defines":["FORCE_OVER_TIME_MODULE_ENABLE"]},{"name":"VelocityConstant","stageFlags":1,"binding":7,"members":[{"name":"u_velocity_mode","type":5,"count":1},{"name":"u_velocity_space","type":5,"count":1}],"defines":["VELOCITY_OVER_TIME_MODULE_ENABLE"]},{"name":"AnimationConstant","stageFlags":1,"binding":8,"members":[{"name":"u_anim_info","type":16,"count":1}],"defines":["TEXTURE_ANIMATION_MODULE_ENABLE"]},{"name":"FragConstants","stageFlags":16,"binding":9,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"color_over_time_tex0","type":28,"count":1,"stageFlags":1,"binding":10,"defines":["COLOR_OVER_TIME_MODULE_ENABLE"]},{"name":"rotation_over_time_tex0","type":28,"count":1,"stageFlags":1,"binding":11,"defines":["ROTATION_OVER_TIME_MODULE_ENABLE"]},{"name":"size_over_time_tex0","type":28,"count":1,"stageFlags":1,"binding":12,"defines":["SIZE_OVER_TIME_MODULE_ENABLE"]},{"name":"force_over_time_tex0","type":28,"count":1,"stageFlags":1,"binding":13,"defines":["FORCE_OVER_TIME_MODULE_ENABLE"]},{"name":"velocity_over_time_tex0","type":28,"count":1,"stageFlags":1,"binding":14,"defines":["VELOCITY_OVER_TIME_MODULE_ENABLE"]},{"name":"texture_animation_tex0","type":28,"count":1,"stageFlags":1,"binding":15,"defines":["TEXTURE_ANIMATION_MODULE_ENABLE"]},{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":16,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position_starttime","format":44,"location":0,"defines":[]},{"name":"a_color","format":44,"location":1,"defines":[]},{"name":"a_dir_life","format":44,"location":2,"defines":[]},{"name":"a_rndSeed","format":11,"location":3,"defines":[]},{"name":"a_size_uv","format":44,"location":4,"defines":["!CC_INSTANCE_PARTICLE"]},{"name":"a_rotation_uv","format":44,"location":5,"defines":["!CC_INSTANCE_PARTICLE"]},{"name":"a_size_fid","format":44,"location":6,"defines":["CC_INSTANCE_PARTICLE"]},{"name":"a_rotation","format":32,"location":7,"defines":["CC_INSTANCE_PARTICLE"]},{"name":"a_uv","format":32,"location":8,"defines":["CC_INSTANCE_PARTICLE"]},{"name":"a_texCoord","format":32,"location":9,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","format":32,"location":10,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","format":32,"location":11,"defines":["CC_RENDER_MODE"]},{"name":"a_color1","format":44,"location":12,"defines":["CC_RENDER_MODE"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]},{"name":"SampleConstants","stageFlags":1,"binding":1,"members":[{"name":"u_sampleInfo","type":16,"count":1}],"defines":[]},{"name":"TickConstants","stageFlags":1,"binding":2,"members":[{"name":"u_worldRot","type":16,"count":1},{"name":"u_timeDelta","type":16,"count":1}],"defines":[]},{"name":"ColorConstant","stageFlags":1,"binding":3,"members":[{"name":"u_color_mode","type":5,"count":1}],"defines":["COLOR_OVER_TIME_MODULE_ENABLE"]},{"name":"RotationConstant","stageFlags":1,"binding":4,"members":[{"name":"u_rotation_mode","type":5,"count":1}],"defines":["ROTATION_OVER_TIME_MODULE_ENABLE"]},{"name":"SizeConstant","stageFlags":1,"binding":5,"members":[{"name":"u_size_mode","type":5,"count":1}],"defines":["SIZE_OVER_TIME_MODULE_ENABLE"]},{"name":"ForceConstant","stageFlags":1,"binding":6,"members":[{"name":"u_force_mode","type":5,"count":1},{"name":"u_force_space","type":5,"count":1}],"defines":["FORCE_OVER_TIME_MODULE_ENABLE"]},{"name":"VelocityConstant","stageFlags":1,"binding":7,"members":[{"name":"u_velocity_mode","type":5,"count":1},{"name":"u_velocity_space","type":5,"count":1}],"defines":["VELOCITY_OVER_TIME_MODULE_ENABLE"]},{"name":"AnimationConstant","stageFlags":1,"binding":8,"members":[{"name":"u_anim_info","type":16,"count":1}],"defines":["TEXTURE_ANIMATION_MODULE_ENABLE"]},{"name":"FragConstants","stageFlags":16,"binding":9,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"color_over_time_tex0","type":28,"count":1,"stageFlags":1,"binding":10,"defines":["COLOR_OVER_TIME_MODULE_ENABLE"]},{"name":"rotation_over_time_tex0","type":28,"count":1,"stageFlags":1,"binding":11,"defines":["ROTATION_OVER_TIME_MODULE_ENABLE"]},{"name":"size_over_time_tex0","type":28,"count":1,"stageFlags":1,"binding":12,"defines":["SIZE_OVER_TIME_MODULE_ENABLE"]},{"name":"force_over_time_tex0","type":28,"count":1,"stageFlags":1,"binding":13,"defines":["FORCE_OVER_TIME_MODULE_ENABLE"]},{"name":"velocity_over_time_tex0","type":28,"count":1,"stageFlags":1,"binding":14,"defines":["VELOCITY_OVER_TIME_MODULE_ENABLE"]},{"name":"texture_animation_tex0","type":28,"count":1,"stageFlags":1,"binding":15,"defines":["TEXTURE_ANIMATION_MODULE_ENABLE"]},{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":16,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision mediump float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nvec4 eulerToQuat(vec3 euler) {\n  vec3 er = euler * 0.5;\n  float x = er.x, y = er.y, z = er.z;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat;\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n  highp vec4 cc_reflectionProbeData1;\n  highp vec4 cc_reflectionProbeData2;\n  highp vec4 cc_reflectionProbeBlendData1;\n  highp vec4 cc_reflectionProbeBlendData2;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(std140) uniform SampleConstants {\n  vec4 u_sampleInfo;\n};\nlayout(std140) uniform TickConstants {\n  vec4 u_worldRot;\n  vec4 u_timeDelta;\n};\nin vec4 a_position_starttime;\nin vec4 a_color;\nin vec4 a_dir_life;\nin float a_rndSeed;\n#if !CC_INSTANCE_PARTICLE\n  in vec4 a_size_uv;\n  in vec4 a_rotation_uv;\n#endif\n#if CC_INSTANCE_PARTICLE\n  in vec4 a_size_fid;\n  in vec3 a_rotation;\n  in vec3 a_uv;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord;\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec3 unpackCurveData (sampler2D tex, vec2 coord) {\n  vec4 a = texture(tex, coord);\n  vec4 b = texture(tex, coord + u_sampleInfo.y);\n  float c = fract(coord.x * u_sampleInfo.x);\n  return mix(a.xyz, b.xyz, c);\n}\nvec3 unpackCurveData (sampler2D tex, vec2 coord, out float w) {\n  vec4 a = texture(tex, coord);\n  vec4 b = texture(tex, coord + u_sampleInfo.y);\n  float c = fract(coord.x * u_sampleInfo.x);\n  w = mix(a.w, b.w, c);\n  return mix(a.xyz, b.xyz, c);\n}\nfloat pseudoRandom(float x) {\n#if USE_VK_SHADER\n  float o = x;\n  x = mod(x - 1.0, 2.0) - 1.0;\n  float freqVar = 10.16640753482;\n  float y = sin(freqVar * floor(o * 0.5 - 0.5));\n  float v = max(0.0, 1.0-abs(x));\n  v *= 0.7071067812;\n  v = y < 0.0 ? -v : v;\n  return v;\n#endif\n#if !USE_VK_SHADER\n  float seed = mod(x, 233280.);\n  float q = (seed * 9301. + 49297.) / 233280.;\n  return fract(q);\n#endif\n}\n#if COLOR_OVER_TIME_MODULE_ENABLE\n  uniform sampler2D color_over_time_tex0;\n  layout(std140) uniform ColorConstant {\n    int u_color_mode;\n  };\n#endif\n#if ROTATION_OVER_TIME_MODULE_ENABLE\n  uniform sampler2D rotation_over_time_tex0;\n  layout(std140) uniform RotationConstant {\n    int u_rotation_mode;\n  };\n#endif\n#if SIZE_OVER_TIME_MODULE_ENABLE\n  uniform sampler2D size_over_time_tex0;\n  layout(std140) uniform SizeConstant {\n    int u_size_mode;\n  };\n#endif\n#if FORCE_OVER_TIME_MODULE_ENABLE\n  uniform sampler2D force_over_time_tex0;\n  layout(std140) uniform ForceConstant {\n    int u_force_mode;\n    int u_force_space;\n  };\n#endif\n#if VELOCITY_OVER_TIME_MODULE_ENABLE\n  uniform sampler2D velocity_over_time_tex0;\n  layout(std140) uniform VelocityConstant {\n    int u_velocity_mode;\n    int u_velocity_space;\n  };\n#endif\n#if TEXTURE_ANIMATION_MODULE_ENABLE\n  uniform sampler2D texture_animation_tex0;\n  layout(std140) uniform AnimationConstant {\n    vec4 u_anim_info;\n  };\n#endif\nfloat repeat (float t, float length) {\n  return t - floor(t / length) * length;\n}\nvec4 rotateQuat (vec4 p, vec4 q) {\n  vec3 iv = cross(q.xyz, p.xyz) + q.w * p.xyz;\n  vec3 res = p.xyz + 2.0 * cross(q.xyz, iv);\n  return vec4(res.xyz, p.w);\n}\nvec4 gpvs_main () {\n  float activeTime = u_timeDelta.x - a_position_starttime.w;\n  float normalizedTime = clamp(activeTime / a_dir_life.w, 0.0, 1.0);\n  vec2 timeCoord0 = vec2(normalizedTime, 0.);\n  vec2 timeCoord1 = vec2(normalizedTime, 1.);\n  #if CC_RENDER_MODE == 4\n    vec2 vertIdx = vec2(a_texCoord.x, a_texCoord.y);\n  #endif\n  #if CC_RENDER_MODE != 4\n    #if !CC_INSTANCE_PARTICLE\n      vec2 vertIdx = vec2(a_size_uv.w, a_rotation_uv.w);\n    #endif\n    #if CC_INSTANCE_PARTICLE\n      vec2 vertIdx = a_uv.xy;\n    #endif\n  #endif\n  vec4 velocity = vec4(a_dir_life.xyz, 0.);\n  vec4 pos = vec4(a_position_starttime.xyz, 1.);\n  #if !CC_INSTANCE_PARTICLE\n    vec3 size = a_size_uv.xyz;\n  #endif\n  #if CC_INSTANCE_PARTICLE\n    vec3 size = a_size_fid.xyz;\n  #endif\n  #if SIZE_OVER_TIME_MODULE_ENABLE\n    if (u_size_mode == 1) {\n      size *= unpackCurveData(size_over_time_tex0, timeCoord0);\n    } else {\n      vec3 size_0 = unpackCurveData(size_over_time_tex0, timeCoord0);\n      vec3 size_1 = unpackCurveData(size_over_time_tex0, timeCoord1);\n      float factor_s = pseudoRandom(a_rndSeed + 39825.);\n      size *= mix(size_0, size_1, factor_s);\n    }\n  #endif\n  vec3 compScale = scale.xyz * size;\n  #if FORCE_OVER_TIME_MODULE_ENABLE\n    vec3 forceAnim = vec3(0.);\n    if (u_force_mode == 1) {\n      forceAnim = unpackCurveData(force_over_time_tex0, timeCoord0);\n    } else {\n      vec3 force_0 = unpackCurveData(force_over_time_tex0, timeCoord0);\n      vec3 force_1 = unpackCurveData(force_over_time_tex0, timeCoord1);\n      float factor_f =  pseudoRandom(a_rndSeed + 212165.);\n      forceAnim = mix(force_0, force_1, factor_f);\n    }\n    vec4 forceTrack = vec4(forceAnim, 0.);\n    if (u_force_space == 0) {\n      forceTrack = rotateQuat(forceTrack, u_worldRot);\n    }\n    velocity.xyz += forceTrack.xyz;\n  #endif\n  #if VELOCITY_OVER_TIME_MODULE_ENABLE\n    float speedModifier0 = 1.;\n    float speedModifier1 = 1.;\n    vec3 velocityAnim = vec3(0.);\n    if (u_velocity_mode == 1) {\n      velocityAnim = unpackCurveData(velocity_over_time_tex0, timeCoord0, speedModifier0);\n    } else {\n      vec3 vectory_0 = unpackCurveData(velocity_over_time_tex0, timeCoord0, speedModifier0);\n      vec3 vectory_1 = unpackCurveData(velocity_over_time_tex0, timeCoord1, speedModifier1);\n      float factor_v = pseudoRandom(a_rndSeed + 197866.);\n      velocityAnim = mix(vectory_0, vectory_1, factor_v);\n      speedModifier0 = mix(speedModifier0, speedModifier1, factor_v);\n    }\n    vec4 velocityTrack = vec4(velocityAnim, 0.);\n    if (u_velocity_space == 0) {\n      velocityTrack = rotateQuat(velocityTrack, u_worldRot);\n    }\n    velocity.xyz += velocityTrack.xyz;\n    velocity.xyz *= speedModifier0;\n  #endif\n  pos.xyz += velocity.xyz * normalizedTime * a_dir_life.w;\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = rotateQuat(velocity, u_worldRot);\n    #endif\n  #endif\n  #if !CC_INSTANCE_PARTICLE\n    vec3 startRotation = a_rotation_uv.xyz;\n  #endif\n  #if CC_INSTANCE_PARTICLE\n    vec3 startRotation = a_rotation;\n  #endif\n  #if CC_RENDER_MODE != 4\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = startRotation.xyz;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #endif\n    #if CC_RENDER_MODE != 0 && CC_RENDER_MODE != 1\n      vec3 rotEuler = vec3(0., 0., startRotation.z);\n    #endif\n    vec4 rot = quaternionFromEuler(rotEuler);\n  #endif\n  #if CC_RENDER_MODE == 4\n    vec4 rot = quaternionFromEuler(startRotation);\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    if (u_rotation_mode == 1) {\n      vec3 euler = unpackCurveData(rotation_over_time_tex0, timeCoord0) * normalizedTime * a_dir_life.w;\n      vec4 quat = eulerToQuat(euler);\n      mat3 mLocal = quatToMat3(quat);\n      mat3 mStart = quatToMat3(rot);\n      rot = mat3ToQuat(mStart * mLocal);\n    } else {\n      vec3 rotation_0 = unpackCurveData(rotation_over_time_tex0, timeCoord0);\n      vec3 rotation_1 = unpackCurveData(rotation_over_time_tex0, timeCoord1);\n      float factor_r = pseudoRandom(a_rndSeed + 125292.);\n      vec3 euler = mix(rotation_0, rotation_1, factor_r) * normalizedTime * a_dir_life.w;\n      #if CC_RENDER_MODE == 3 || CC_RENDER_MODE == 2\n        euler = vec3(0.0, 0.0, euler.z);\n      #endif\n      vec4 quat = eulerToQuat(euler);\n      mat3 mLocal = quatToMat3(quat);\n      mat3 mStart = quatToMat3(rot);\n      rot = mat3ToQuat(mStart * mLocal);\n    }\n  #endif\n  #if COLOR_OVER_TIME_MODULE_ENABLE\n    if (u_color_mode == 1) {\n      color = a_color * texture(color_over_time_tex0, timeCoord0);\n    } else {\n      vec4 color_0 = texture(color_over_time_tex0, timeCoord0);\n      vec4 color_1 = texture(color_over_time_tex0, timeCoord1);\n      float factor_c = pseudoRandom(a_rndSeed + 91041.);\n      color = a_color * mix(color_0, color_1, factor_c);\n    }\n  #endif\n  #if !COLOR_OVER_TIME_MODULE_ENABLE\n    color = a_color;\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((vertIdx - 0.5));\n    #if CC_RENDER_MODE == 1\n      rot = vec4(0.0, 0.0, 0.0, 1.0);\n    #endif\n    computeVertPos(pos, cornerOffset, rot, compScale\n      #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n        , cc_matViewInv\n      #endif\n      #if CC_RENDER_MODE == 1\n        , cc_cameraPos.xyz\n        , velocity\n        , frameTile_velLenScale.z\n        , frameTile_velLenScale.w\n        #if !CC_INSTANCE_PARTICLE\n          , a_size_uv.w\n        #endif\n        #if CC_INSTANCE_PARTICLE\n          , a_uv.x\n        #endif\n      #endif\n    );\n  #endif\n  #if CC_RENDER_MODE == 4\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color *= a_color1;\n  #endif\n  pos = cc_matViewProj * pos;\n  float frameIndex = 0.;\n  #if TEXTURE_ANIMATION_MODULE_ENABLE\n    float startFrame = 0.;\n    vec3 frameInfo = vec3(0.);\n    if (int(u_anim_info.x) == 1) {\n      frameInfo = unpackCurveData(texture_animation_tex0, timeCoord0);\n    } else {\n      vec3 frameInfo0 = unpackCurveData(texture_animation_tex0, timeCoord0);\n      vec3 frameInfo1 = unpackCurveData(texture_animation_tex0, timeCoord1);\n      float factor_t = pseudoRandom(a_rndSeed + 90794.);\n      frameInfo = mix(frameInfo0, frameInfo1, factor_t);\n    }\n    startFrame = frameInfo.x / u_anim_info.y;\n    float EPSILON = 1e-6;\n    frameIndex = repeat(u_anim_info.z * (frameInfo.y + startFrame), 1. + EPSILON);\n  #endif\n  uv = computeUV(frameIndex, vertIdx, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  return pos;\n}\nvoid main() { gl_Position = gpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nlayout(std140) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"},"glsl1":{"vert":"\nprecision mediump float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nvec4 eulerToQuat(vec3 euler) {\n  vec3 er = euler * 0.5;\n  float x = er.x, y = er.y, z = er.z;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat;\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\n   uniform vec4 nodeRotation;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\n          uniform vec4 u_sampleInfo;\n    uniform vec4 u_worldRot;\n    uniform vec4 u_timeDelta;\nattribute vec4 a_position_starttime;\nattribute vec4 a_color;\nattribute vec4 a_dir_life;\nattribute float a_rndSeed;\n#if !CC_INSTANCE_PARTICLE\n  attribute vec4 a_size_uv;\n  attribute vec4 a_rotation_uv;\n#endif\n#if CC_INSTANCE_PARTICLE\n  attribute vec4 a_size_fid;\n  attribute vec3 a_rotation;\n  attribute vec3 a_uv;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord;\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec3 unpackCurveData (sampler2D tex, vec2 coord) {\n  vec4 a = texture2D(tex, coord);\n  vec4 b = texture2D(tex, coord + u_sampleInfo.y);\n  float c = fract(coord.x * u_sampleInfo.x);\n  return mix(a.xyz, b.xyz, c);\n}\nvec3 unpackCurveData (sampler2D tex, vec2 coord, out float w) {\n  vec4 a = texture2D(tex, coord);\n  vec4 b = texture2D(tex, coord + u_sampleInfo.y);\n  float c = fract(coord.x * u_sampleInfo.x);\n  w = mix(a.w, b.w, c);\n  return mix(a.xyz, b.xyz, c);\n}\nfloat pseudoRandom(float x) {\n#if USE_VK_SHADER\n  float o = x;\n  x = mod(x - 1.0, 2.0) - 1.0;\n  float freqVar = 10.16640753482;\n  float y = sin(freqVar * floor(o * 0.5 - 0.5));\n  float v = max(0.0, 1.0-abs(x));\n  v *= 0.7071067812;\n  v = y < 0.0 ? -v : v;\n  return v;\n#endif\n#if !USE_VK_SHADER\n  float seed = mod(x, 233280.);\n  float q = (seed * 9301. + 49297.) / 233280.;\n  return fract(q);\n#endif\n}\n#if COLOR_OVER_TIME_MODULE_ENABLE\n  uniform sampler2D color_over_time_tex0;\n      uniform int u_color_mode;\n#endif\n#if ROTATION_OVER_TIME_MODULE_ENABLE\n  uniform sampler2D rotation_over_time_tex0;\n      uniform int u_rotation_mode;\n#endif\n#if SIZE_OVER_TIME_MODULE_ENABLE\n  uniform sampler2D size_over_time_tex0;\n      uniform int u_size_mode;\n#endif\n#if FORCE_OVER_TIME_MODULE_ENABLE\n  uniform sampler2D force_over_time_tex0;\n      uniform int u_force_mode;\n    uniform int u_force_space;\n#endif\n#if VELOCITY_OVER_TIME_MODULE_ENABLE\n  uniform sampler2D velocity_over_time_tex0;\n      uniform int u_velocity_mode;\n    uniform int u_velocity_space;\n#endif\n#if TEXTURE_ANIMATION_MODULE_ENABLE\n  uniform sampler2D texture_animation_tex0;\n      uniform vec4 u_anim_info;\n#endif\nfloat repeat (float t, float length) {\n  return t - floor(t / length) * length;\n}\nvec4 rotateQuat (vec4 p, vec4 q) {\n  vec3 iv = cross(q.xyz, p.xyz) + q.w * p.xyz;\n  vec3 res = p.xyz + 2.0 * cross(q.xyz, iv);\n  return vec4(res.xyz, p.w);\n}\nvec4 gpvs_main () {\n  float activeTime = u_timeDelta.x - a_position_starttime.w;\n  float normalizedTime = clamp(activeTime / a_dir_life.w, 0.0, 1.0);\n  vec2 timeCoord0 = vec2(normalizedTime, 0.);\n  vec2 timeCoord1 = vec2(normalizedTime, 1.);\n  #if CC_RENDER_MODE == 4\n    vec2 vertIdx = vec2(a_texCoord.x, a_texCoord.y);\n  #endif\n  #if CC_RENDER_MODE != 4\n    #if !CC_INSTANCE_PARTICLE\n      vec2 vertIdx = vec2(a_size_uv.w, a_rotation_uv.w);\n    #endif\n    #if CC_INSTANCE_PARTICLE\n      vec2 vertIdx = a_uv.xy;\n    #endif\n  #endif\n  vec4 velocity = vec4(a_dir_life.xyz, 0.);\n  vec4 pos = vec4(a_position_starttime.xyz, 1.);\n  #if !CC_INSTANCE_PARTICLE\n    vec3 size = a_size_uv.xyz;\n  #endif\n  #if CC_INSTANCE_PARTICLE\n    vec3 size = a_size_fid.xyz;\n  #endif\n  #if SIZE_OVER_TIME_MODULE_ENABLE\n    if (u_size_mode == 1) {\n      size *= unpackCurveData(size_over_time_tex0, timeCoord0);\n    } else {\n      vec3 size_0 = unpackCurveData(size_over_time_tex0, timeCoord0);\n      vec3 size_1 = unpackCurveData(size_over_time_tex0, timeCoord1);\n      float factor_s = pseudoRandom(a_rndSeed + 39825.);\n      size *= mix(size_0, size_1, factor_s);\n    }\n  #endif\n  vec3 compScale = scale.xyz * size;\n  #if FORCE_OVER_TIME_MODULE_ENABLE\n    vec3 forceAnim = vec3(0.);\n    if (u_force_mode == 1) {\n      forceAnim = unpackCurveData(force_over_time_tex0, timeCoord0);\n    } else {\n      vec3 force_0 = unpackCurveData(force_over_time_tex0, timeCoord0);\n      vec3 force_1 = unpackCurveData(force_over_time_tex0, timeCoord1);\n      float factor_f =  pseudoRandom(a_rndSeed + 212165.);\n      forceAnim = mix(force_0, force_1, factor_f);\n    }\n    vec4 forceTrack = vec4(forceAnim, 0.);\n    if (u_force_space == 0) {\n      forceTrack = rotateQuat(forceTrack, u_worldRot);\n    }\n    velocity.xyz += forceTrack.xyz;\n  #endif\n  #if VELOCITY_OVER_TIME_MODULE_ENABLE\n    float speedModifier0 = 1.;\n    float speedModifier1 = 1.;\n    vec3 velocityAnim = vec3(0.);\n    if (u_velocity_mode == 1) {\n      velocityAnim = unpackCurveData(velocity_over_time_tex0, timeCoord0, speedModifier0);\n    } else {\n      vec3 vectory_0 = unpackCurveData(velocity_over_time_tex0, timeCoord0, speedModifier0);\n      vec3 vectory_1 = unpackCurveData(velocity_over_time_tex0, timeCoord1, speedModifier1);\n      float factor_v = pseudoRandom(a_rndSeed + 197866.);\n      velocityAnim = mix(vectory_0, vectory_1, factor_v);\n      speedModifier0 = mix(speedModifier0, speedModifier1, factor_v);\n    }\n    vec4 velocityTrack = vec4(velocityAnim, 0.);\n    if (u_velocity_space == 0) {\n      velocityTrack = rotateQuat(velocityTrack, u_worldRot);\n    }\n    velocity.xyz += velocityTrack.xyz;\n    velocity.xyz *= speedModifier0;\n  #endif\n  pos.xyz += velocity.xyz * normalizedTime * a_dir_life.w;\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = rotateQuat(velocity, u_worldRot);\n    #endif\n  #endif\n  #if !CC_INSTANCE_PARTICLE\n    vec3 startRotation = a_rotation_uv.xyz;\n  #endif\n  #if CC_INSTANCE_PARTICLE\n    vec3 startRotation = a_rotation;\n  #endif\n  #if CC_RENDER_MODE != 4\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = startRotation.xyz;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #endif\n    #if CC_RENDER_MODE != 0 && CC_RENDER_MODE != 1\n      vec3 rotEuler = vec3(0., 0., startRotation.z);\n    #endif\n    vec4 rot = quaternionFromEuler(rotEuler);\n  #endif\n  #if CC_RENDER_MODE == 4\n    vec4 rot = quaternionFromEuler(startRotation);\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    if (u_rotation_mode == 1) {\n      vec3 euler = unpackCurveData(rotation_over_time_tex0, timeCoord0) * normalizedTime * a_dir_life.w;\n      vec4 quat = eulerToQuat(euler);\n      mat3 mLocal = quatToMat3(quat);\n      mat3 mStart = quatToMat3(rot);\n      rot = mat3ToQuat(mStart * mLocal);\n    } else {\n      vec3 rotation_0 = unpackCurveData(rotation_over_time_tex0, timeCoord0);\n      vec3 rotation_1 = unpackCurveData(rotation_over_time_tex0, timeCoord1);\n      float factor_r = pseudoRandom(a_rndSeed + 125292.);\n      vec3 euler = mix(rotation_0, rotation_1, factor_r) * normalizedTime * a_dir_life.w;\n      #if CC_RENDER_MODE == 3 || CC_RENDER_MODE == 2\n        euler = vec3(0.0, 0.0, euler.z);\n      #endif\n      vec4 quat = eulerToQuat(euler);\n      mat3 mLocal = quatToMat3(quat);\n      mat3 mStart = quatToMat3(rot);\n      rot = mat3ToQuat(mStart * mLocal);\n    }\n  #endif\n  #if COLOR_OVER_TIME_MODULE_ENABLE\n    if (u_color_mode == 1) {\n      color = a_color * texture2D(color_over_time_tex0, timeCoord0);\n    } else {\n      vec4 color_0 = texture2D(color_over_time_tex0, timeCoord0);\n      vec4 color_1 = texture2D(color_over_time_tex0, timeCoord1);\n      float factor_c = pseudoRandom(a_rndSeed + 91041.);\n      color = a_color * mix(color_0, color_1, factor_c);\n    }\n  #endif\n  #if !COLOR_OVER_TIME_MODULE_ENABLE\n    color = a_color;\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((vertIdx - 0.5));\n    #if CC_RENDER_MODE == 1\n      rot = vec4(0.0, 0.0, 0.0, 1.0);\n    #endif\n    computeVertPos(pos, cornerOffset, rot, compScale\n      #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n        , cc_matViewInv\n      #endif\n      #if CC_RENDER_MODE == 1\n        , cc_cameraPos.xyz\n        , velocity\n        , frameTile_velLenScale.z\n        , frameTile_velLenScale.w\n        #if !CC_INSTANCE_PARTICLE\n          , a_size_uv.w\n        #endif\n        #if CC_INSTANCE_PARTICLE\n          , a_uv.x\n        #endif\n      #endif\n    );\n  #endif\n  #if CC_RENDER_MODE == 4\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color *= a_color1;\n  #endif\n  pos = cc_matViewProj * pos;\n  float frameIndex = 0.;\n  #if TEXTURE_ANIMATION_MODULE_ENABLE\n    float startFrame = 0.;\n    vec3 frameInfo = vec3(0.);\n    if (int(u_anim_info.x) == 1) {\n      frameInfo = unpackCurveData(texture_animation_tex0, timeCoord0);\n    } else {\n      vec3 frameInfo0 = unpackCurveData(texture_animation_tex0, timeCoord0);\n      vec3 frameInfo1 = unpackCurveData(texture_animation_tex0, timeCoord1);\n      float factor_t = pseudoRandom(a_rndSeed + 90794.);\n      frameInfo = mix(frameInfo0, frameInfo1, factor_t);\n    }\n    startFrame = frameInfo.x / u_anim_info.y;\n    float EPSILON = 1e-6;\n    frameIndex = repeat(u_anim_info.z * (frameInfo.y + startFrame), 1. + EPSILON);\n  #endif\n  uv = computeUV(frameIndex, vertIdx, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  return pos;\n}\nvoid main() { gl_Position = gpvs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\n   uniform vec4 tintColor;\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture2D(mainTexture, uv);\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = add(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":71,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":43}},"defines":[{"name":"CC_RENDER_MODE","type":"number","range":[0,4]},{"name":"CC_INSTANCE_PARTICLE","type":"boolean"},{"name":"USE_VK_SHADER","type":"boolean"},{"name":"COLOR_OVER_TIME_MODULE_ENABLE","type":"boolean"},{"name":"ROTATION_OVER_TIME_MODULE_ENABLE","type":"boolean"},{"name":"SIZE_OVER_TIME_MODULE_ENABLE","type":"boolean"},{"name":"FORCE_OVER_TIME_MODULE_ENABLE","type":"boolean"},{"name":"VELOCITY_OVER_TIME_MODULE_ENABLE","type":"boolean"},{"name":"TEXTURE_ANIMATION_MODULE_ENABLE","type":"boolean"},{"name":"CC_USE_WORLD_SPACE","type":"boolean"}]},{"hash":2330235135,"name":"particles/builtin-particle-gpu|builtin/internal/particle-vs-gpu:gpvs_main|tinted-fs:multiply","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]},{"name":"SampleConstants","stageFlags":1,"binding":1,"members":[{"name":"u_sampleInfo","type":16,"count":1}],"defines":[]},{"name":"TickConstants","stageFlags":1,"binding":2,"members":[{"name":"u_worldRot","type":16,"count":1},{"name":"u_timeDelta","type":16,"count":1}],"defines":[]},{"name":"ColorConstant","stageFlags":1,"binding":3,"members":[{"name":"u_color_mode","type":5,"count":1}],"defines":["COLOR_OVER_TIME_MODULE_ENABLE"]},{"name":"RotationConstant","stageFlags":1,"binding":4,"members":[{"name":"u_rotation_mode","type":5,"count":1}],"defines":["ROTATION_OVER_TIME_MODULE_ENABLE"]},{"name":"SizeConstant","stageFlags":1,"binding":5,"members":[{"name":"u_size_mode","type":5,"count":1}],"defines":["SIZE_OVER_TIME_MODULE_ENABLE"]},{"name":"ForceConstant","stageFlags":1,"binding":6,"members":[{"name":"u_force_mode","type":5,"count":1},{"name":"u_force_space","type":5,"count":1}],"defines":["FORCE_OVER_TIME_MODULE_ENABLE"]},{"name":"VelocityConstant","stageFlags":1,"binding":7,"members":[{"name":"u_velocity_mode","type":5,"count":1},{"name":"u_velocity_space","type":5,"count":1}],"defines":["VELOCITY_OVER_TIME_MODULE_ENABLE"]},{"name":"AnimationConstant","stageFlags":1,"binding":8,"members":[{"name":"u_anim_info","type":16,"count":1}],"defines":["TEXTURE_ANIMATION_MODULE_ENABLE"]},{"name":"FragConstants","stageFlags":16,"binding":9,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"color_over_time_tex0","type":28,"count":1,"stageFlags":1,"binding":10,"defines":["COLOR_OVER_TIME_MODULE_ENABLE"]},{"name":"rotation_over_time_tex0","type":28,"count":1,"stageFlags":1,"binding":11,"defines":["ROTATION_OVER_TIME_MODULE_ENABLE"]},{"name":"size_over_time_tex0","type":28,"count":1,"stageFlags":1,"binding":12,"defines":["SIZE_OVER_TIME_MODULE_ENABLE"]},{"name":"force_over_time_tex0","type":28,"count":1,"stageFlags":1,"binding":13,"defines":["FORCE_OVER_TIME_MODULE_ENABLE"]},{"name":"velocity_over_time_tex0","type":28,"count":1,"stageFlags":1,"binding":14,"defines":["VELOCITY_OVER_TIME_MODULE_ENABLE"]},{"name":"texture_animation_tex0","type":28,"count":1,"stageFlags":1,"binding":15,"defines":["TEXTURE_ANIMATION_MODULE_ENABLE"]},{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":16,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position_starttime","format":44,"location":0,"defines":[]},{"name":"a_color","format":44,"location":1,"defines":[]},{"name":"a_dir_life","format":44,"location":2,"defines":[]},{"name":"a_rndSeed","format":11,"location":3,"defines":[]},{"name":"a_size_uv","format":44,"location":4,"defines":["!CC_INSTANCE_PARTICLE"]},{"name":"a_rotation_uv","format":44,"location":5,"defines":["!CC_INSTANCE_PARTICLE"]},{"name":"a_size_fid","format":44,"location":6,"defines":["CC_INSTANCE_PARTICLE"]},{"name":"a_rotation","format":32,"location":7,"defines":["CC_INSTANCE_PARTICLE"]},{"name":"a_uv","format":32,"location":8,"defines":["CC_INSTANCE_PARTICLE"]},{"name":"a_texCoord","format":32,"location":9,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","format":32,"location":10,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","format":32,"location":11,"defines":["CC_RENDER_MODE"]},{"name":"a_color1","format":44,"location":12,"defines":["CC_RENDER_MODE"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]},{"name":"SampleConstants","stageFlags":1,"binding":1,"members":[{"name":"u_sampleInfo","type":16,"count":1}],"defines":[]},{"name":"TickConstants","stageFlags":1,"binding":2,"members":[{"name":"u_worldRot","type":16,"count":1},{"name":"u_timeDelta","type":16,"count":1}],"defines":[]},{"name":"ColorConstant","stageFlags":1,"binding":3,"members":[{"name":"u_color_mode","type":5,"count":1}],"defines":["COLOR_OVER_TIME_MODULE_ENABLE"]},{"name":"RotationConstant","stageFlags":1,"binding":4,"members":[{"name":"u_rotation_mode","type":5,"count":1}],"defines":["ROTATION_OVER_TIME_MODULE_ENABLE"]},{"name":"SizeConstant","stageFlags":1,"binding":5,"members":[{"name":"u_size_mode","type":5,"count":1}],"defines":["SIZE_OVER_TIME_MODULE_ENABLE"]},{"name":"ForceConstant","stageFlags":1,"binding":6,"members":[{"name":"u_force_mode","type":5,"count":1},{"name":"u_force_space","type":5,"count":1}],"defines":["FORCE_OVER_TIME_MODULE_ENABLE"]},{"name":"VelocityConstant","stageFlags":1,"binding":7,"members":[{"name":"u_velocity_mode","type":5,"count":1},{"name":"u_velocity_space","type":5,"count":1}],"defines":["VELOCITY_OVER_TIME_MODULE_ENABLE"]},{"name":"AnimationConstant","stageFlags":1,"binding":8,"members":[{"name":"u_anim_info","type":16,"count":1}],"defines":["TEXTURE_ANIMATION_MODULE_ENABLE"]},{"name":"FragConstants","stageFlags":16,"binding":9,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"color_over_time_tex0","type":28,"count":1,"stageFlags":1,"binding":10,"defines":["COLOR_OVER_TIME_MODULE_ENABLE"]},{"name":"rotation_over_time_tex0","type":28,"count":1,"stageFlags":1,"binding":11,"defines":["ROTATION_OVER_TIME_MODULE_ENABLE"]},{"name":"size_over_time_tex0","type":28,"count":1,"stageFlags":1,"binding":12,"defines":["SIZE_OVER_TIME_MODULE_ENABLE"]},{"name":"force_over_time_tex0","type":28,"count":1,"stageFlags":1,"binding":13,"defines":["FORCE_OVER_TIME_MODULE_ENABLE"]},{"name":"velocity_over_time_tex0","type":28,"count":1,"stageFlags":1,"binding":14,"defines":["VELOCITY_OVER_TIME_MODULE_ENABLE"]},{"name":"texture_animation_tex0","type":28,"count":1,"stageFlags":1,"binding":15,"defines":["TEXTURE_ANIMATION_MODULE_ENABLE"]},{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":16,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision mediump float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nvec4 eulerToQuat(vec3 euler) {\n  vec3 er = euler * 0.5;\n  float x = er.x, y = er.y, z = er.z;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat;\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n  highp vec4 cc_reflectionProbeData1;\n  highp vec4 cc_reflectionProbeData2;\n  highp vec4 cc_reflectionProbeBlendData1;\n  highp vec4 cc_reflectionProbeBlendData2;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(std140) uniform SampleConstants {\n  vec4 u_sampleInfo;\n};\nlayout(std140) uniform TickConstants {\n  vec4 u_worldRot;\n  vec4 u_timeDelta;\n};\nin vec4 a_position_starttime;\nin vec4 a_color;\nin vec4 a_dir_life;\nin float a_rndSeed;\n#if !CC_INSTANCE_PARTICLE\n  in vec4 a_size_uv;\n  in vec4 a_rotation_uv;\n#endif\n#if CC_INSTANCE_PARTICLE\n  in vec4 a_size_fid;\n  in vec3 a_rotation;\n  in vec3 a_uv;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord;\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec3 unpackCurveData (sampler2D tex, vec2 coord) {\n  vec4 a = texture(tex, coord);\n  vec4 b = texture(tex, coord + u_sampleInfo.y);\n  float c = fract(coord.x * u_sampleInfo.x);\n  return mix(a.xyz, b.xyz, c);\n}\nvec3 unpackCurveData (sampler2D tex, vec2 coord, out float w) {\n  vec4 a = texture(tex, coord);\n  vec4 b = texture(tex, coord + u_sampleInfo.y);\n  float c = fract(coord.x * u_sampleInfo.x);\n  w = mix(a.w, b.w, c);\n  return mix(a.xyz, b.xyz, c);\n}\nfloat pseudoRandom(float x) {\n#if USE_VK_SHADER\n  float o = x;\n  x = mod(x - 1.0, 2.0) - 1.0;\n  float freqVar = 10.16640753482;\n  float y = sin(freqVar * floor(o * 0.5 - 0.5));\n  float v = max(0.0, 1.0-abs(x));\n  v *= 0.7071067812;\n  v = y < 0.0 ? -v : v;\n  return v;\n#endif\n#if !USE_VK_SHADER\n  float seed = mod(x, 233280.);\n  float q = (seed * 9301. + 49297.) / 233280.;\n  return fract(q);\n#endif\n}\n#if COLOR_OVER_TIME_MODULE_ENABLE\n  uniform sampler2D color_over_time_tex0;\n  layout(std140) uniform ColorConstant {\n    int u_color_mode;\n  };\n#endif\n#if ROTATION_OVER_TIME_MODULE_ENABLE\n  uniform sampler2D rotation_over_time_tex0;\n  layout(std140) uniform RotationConstant {\n    int u_rotation_mode;\n  };\n#endif\n#if SIZE_OVER_TIME_MODULE_ENABLE\n  uniform sampler2D size_over_time_tex0;\n  layout(std140) uniform SizeConstant {\n    int u_size_mode;\n  };\n#endif\n#if FORCE_OVER_TIME_MODULE_ENABLE\n  uniform sampler2D force_over_time_tex0;\n  layout(std140) uniform ForceConstant {\n    int u_force_mode;\n    int u_force_space;\n  };\n#endif\n#if VELOCITY_OVER_TIME_MODULE_ENABLE\n  uniform sampler2D velocity_over_time_tex0;\n  layout(std140) uniform VelocityConstant {\n    int u_velocity_mode;\n    int u_velocity_space;\n  };\n#endif\n#if TEXTURE_ANIMATION_MODULE_ENABLE\n  uniform sampler2D texture_animation_tex0;\n  layout(std140) uniform AnimationConstant {\n    vec4 u_anim_info;\n  };\n#endif\nfloat repeat (float t, float length) {\n  return t - floor(t / length) * length;\n}\nvec4 rotateQuat (vec4 p, vec4 q) {\n  vec3 iv = cross(q.xyz, p.xyz) + q.w * p.xyz;\n  vec3 res = p.xyz + 2.0 * cross(q.xyz, iv);\n  return vec4(res.xyz, p.w);\n}\nvec4 gpvs_main () {\n  float activeTime = u_timeDelta.x - a_position_starttime.w;\n  float normalizedTime = clamp(activeTime / a_dir_life.w, 0.0, 1.0);\n  vec2 timeCoord0 = vec2(normalizedTime, 0.);\n  vec2 timeCoord1 = vec2(normalizedTime, 1.);\n  #if CC_RENDER_MODE == 4\n    vec2 vertIdx = vec2(a_texCoord.x, a_texCoord.y);\n  #endif\n  #if CC_RENDER_MODE != 4\n    #if !CC_INSTANCE_PARTICLE\n      vec2 vertIdx = vec2(a_size_uv.w, a_rotation_uv.w);\n    #endif\n    #if CC_INSTANCE_PARTICLE\n      vec2 vertIdx = a_uv.xy;\n    #endif\n  #endif\n  vec4 velocity = vec4(a_dir_life.xyz, 0.);\n  vec4 pos = vec4(a_position_starttime.xyz, 1.);\n  #if !CC_INSTANCE_PARTICLE\n    vec3 size = a_size_uv.xyz;\n  #endif\n  #if CC_INSTANCE_PARTICLE\n    vec3 size = a_size_fid.xyz;\n  #endif\n  #if SIZE_OVER_TIME_MODULE_ENABLE\n    if (u_size_mode == 1) {\n      size *= unpackCurveData(size_over_time_tex0, timeCoord0);\n    } else {\n      vec3 size_0 = unpackCurveData(size_over_time_tex0, timeCoord0);\n      vec3 size_1 = unpackCurveData(size_over_time_tex0, timeCoord1);\n      float factor_s = pseudoRandom(a_rndSeed + 39825.);\n      size *= mix(size_0, size_1, factor_s);\n    }\n  #endif\n  vec3 compScale = scale.xyz * size;\n  #if FORCE_OVER_TIME_MODULE_ENABLE\n    vec3 forceAnim = vec3(0.);\n    if (u_force_mode == 1) {\n      forceAnim = unpackCurveData(force_over_time_tex0, timeCoord0);\n    } else {\n      vec3 force_0 = unpackCurveData(force_over_time_tex0, timeCoord0);\n      vec3 force_1 = unpackCurveData(force_over_time_tex0, timeCoord1);\n      float factor_f =  pseudoRandom(a_rndSeed + 212165.);\n      forceAnim = mix(force_0, force_1, factor_f);\n    }\n    vec4 forceTrack = vec4(forceAnim, 0.);\n    if (u_force_space == 0) {\n      forceTrack = rotateQuat(forceTrack, u_worldRot);\n    }\n    velocity.xyz += forceTrack.xyz;\n  #endif\n  #if VELOCITY_OVER_TIME_MODULE_ENABLE\n    float speedModifier0 = 1.;\n    float speedModifier1 = 1.;\n    vec3 velocityAnim = vec3(0.);\n    if (u_velocity_mode == 1) {\n      velocityAnim = unpackCurveData(velocity_over_time_tex0, timeCoord0, speedModifier0);\n    } else {\n      vec3 vectory_0 = unpackCurveData(velocity_over_time_tex0, timeCoord0, speedModifier0);\n      vec3 vectory_1 = unpackCurveData(velocity_over_time_tex0, timeCoord1, speedModifier1);\n      float factor_v = pseudoRandom(a_rndSeed + 197866.);\n      velocityAnim = mix(vectory_0, vectory_1, factor_v);\n      speedModifier0 = mix(speedModifier0, speedModifier1, factor_v);\n    }\n    vec4 velocityTrack = vec4(velocityAnim, 0.);\n    if (u_velocity_space == 0) {\n      velocityTrack = rotateQuat(velocityTrack, u_worldRot);\n    }\n    velocity.xyz += velocityTrack.xyz;\n    velocity.xyz *= speedModifier0;\n  #endif\n  pos.xyz += velocity.xyz * normalizedTime * a_dir_life.w;\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = rotateQuat(velocity, u_worldRot);\n    #endif\n  #endif\n  #if !CC_INSTANCE_PARTICLE\n    vec3 startRotation = a_rotation_uv.xyz;\n  #endif\n  #if CC_INSTANCE_PARTICLE\n    vec3 startRotation = a_rotation;\n  #endif\n  #if CC_RENDER_MODE != 4\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = startRotation.xyz;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #endif\n    #if CC_RENDER_MODE != 0 && CC_RENDER_MODE != 1\n      vec3 rotEuler = vec3(0., 0., startRotation.z);\n    #endif\n    vec4 rot = quaternionFromEuler(rotEuler);\n  #endif\n  #if CC_RENDER_MODE == 4\n    vec4 rot = quaternionFromEuler(startRotation);\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    if (u_rotation_mode == 1) {\n      vec3 euler = unpackCurveData(rotation_over_time_tex0, timeCoord0) * normalizedTime * a_dir_life.w;\n      vec4 quat = eulerToQuat(euler);\n      mat3 mLocal = quatToMat3(quat);\n      mat3 mStart = quatToMat3(rot);\n      rot = mat3ToQuat(mStart * mLocal);\n    } else {\n      vec3 rotation_0 = unpackCurveData(rotation_over_time_tex0, timeCoord0);\n      vec3 rotation_1 = unpackCurveData(rotation_over_time_tex0, timeCoord1);\n      float factor_r = pseudoRandom(a_rndSeed + 125292.);\n      vec3 euler = mix(rotation_0, rotation_1, factor_r) * normalizedTime * a_dir_life.w;\n      #if CC_RENDER_MODE == 3 || CC_RENDER_MODE == 2\n        euler = vec3(0.0, 0.0, euler.z);\n      #endif\n      vec4 quat = eulerToQuat(euler);\n      mat3 mLocal = quatToMat3(quat);\n      mat3 mStart = quatToMat3(rot);\n      rot = mat3ToQuat(mStart * mLocal);\n    }\n  #endif\n  #if COLOR_OVER_TIME_MODULE_ENABLE\n    if (u_color_mode == 1) {\n      color = a_color * texture(color_over_time_tex0, timeCoord0);\n    } else {\n      vec4 color_0 = texture(color_over_time_tex0, timeCoord0);\n      vec4 color_1 = texture(color_over_time_tex0, timeCoord1);\n      float factor_c = pseudoRandom(a_rndSeed + 91041.);\n      color = a_color * mix(color_0, color_1, factor_c);\n    }\n  #endif\n  #if !COLOR_OVER_TIME_MODULE_ENABLE\n    color = a_color;\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((vertIdx - 0.5));\n    #if CC_RENDER_MODE == 1\n      rot = vec4(0.0, 0.0, 0.0, 1.0);\n    #endif\n    computeVertPos(pos, cornerOffset, rot, compScale\n      #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n        , cc_matViewInv\n      #endif\n      #if CC_RENDER_MODE == 1\n        , cc_cameraPos.xyz\n        , velocity\n        , frameTile_velLenScale.z\n        , frameTile_velLenScale.w\n        #if !CC_INSTANCE_PARTICLE\n          , a_size_uv.w\n        #endif\n        #if CC_INSTANCE_PARTICLE\n          , a_uv.x\n        #endif\n      #endif\n    );\n  #endif\n  #if CC_RENDER_MODE == 4\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color *= a_color1;\n  #endif\n  pos = cc_matViewProj * pos;\n  float frameIndex = 0.;\n  #if TEXTURE_ANIMATION_MODULE_ENABLE\n    float startFrame = 0.;\n    vec3 frameInfo = vec3(0.);\n    if (int(u_anim_info.x) == 1) {\n      frameInfo = unpackCurveData(texture_animation_tex0, timeCoord0);\n    } else {\n      vec3 frameInfo0 = unpackCurveData(texture_animation_tex0, timeCoord0);\n      vec3 frameInfo1 = unpackCurveData(texture_animation_tex0, timeCoord1);\n      float factor_t = pseudoRandom(a_rndSeed + 90794.);\n      frameInfo = mix(frameInfo0, frameInfo1, factor_t);\n    }\n    startFrame = frameInfo.x / u_anim_info.y;\n    float EPSILON = 1e-6;\n    frameIndex = repeat(u_anim_info.z * (frameInfo.y + startFrame), 1. + EPSILON);\n  #endif\n  uv = computeUV(frameIndex, vertIdx, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  return pos;\n}\nvoid main() { gl_Position = gpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nlayout(std140) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = multiply(); }"},"glsl1":{"vert":"\nprecision mediump float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nvec4 eulerToQuat(vec3 euler) {\n  vec3 er = euler * 0.5;\n  float x = er.x, y = er.y, z = er.z;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat;\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\n   uniform vec4 nodeRotation;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\n          uniform vec4 u_sampleInfo;\n    uniform vec4 u_worldRot;\n    uniform vec4 u_timeDelta;\nattribute vec4 a_position_starttime;\nattribute vec4 a_color;\nattribute vec4 a_dir_life;\nattribute float a_rndSeed;\n#if !CC_INSTANCE_PARTICLE\n  attribute vec4 a_size_uv;\n  attribute vec4 a_rotation_uv;\n#endif\n#if CC_INSTANCE_PARTICLE\n  attribute vec4 a_size_fid;\n  attribute vec3 a_rotation;\n  attribute vec3 a_uv;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord;\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec3 unpackCurveData (sampler2D tex, vec2 coord) {\n  vec4 a = texture2D(tex, coord);\n  vec4 b = texture2D(tex, coord + u_sampleInfo.y);\n  float c = fract(coord.x * u_sampleInfo.x);\n  return mix(a.xyz, b.xyz, c);\n}\nvec3 unpackCurveData (sampler2D tex, vec2 coord, out float w) {\n  vec4 a = texture2D(tex, coord);\n  vec4 b = texture2D(tex, coord + u_sampleInfo.y);\n  float c = fract(coord.x * u_sampleInfo.x);\n  w = mix(a.w, b.w, c);\n  return mix(a.xyz, b.xyz, c);\n}\nfloat pseudoRandom(float x) {\n#if USE_VK_SHADER\n  float o = x;\n  x = mod(x - 1.0, 2.0) - 1.0;\n  float freqVar = 10.16640753482;\n  float y = sin(freqVar * floor(o * 0.5 - 0.5));\n  float v = max(0.0, 1.0-abs(x));\n  v *= 0.7071067812;\n  v = y < 0.0 ? -v : v;\n  return v;\n#endif\n#if !USE_VK_SHADER\n  float seed = mod(x, 233280.);\n  float q = (seed * 9301. + 49297.) / 233280.;\n  return fract(q);\n#endif\n}\n#if COLOR_OVER_TIME_MODULE_ENABLE\n  uniform sampler2D color_over_time_tex0;\n      uniform int u_color_mode;\n#endif\n#if ROTATION_OVER_TIME_MODULE_ENABLE\n  uniform sampler2D rotation_over_time_tex0;\n      uniform int u_rotation_mode;\n#endif\n#if SIZE_OVER_TIME_MODULE_ENABLE\n  uniform sampler2D size_over_time_tex0;\n      uniform int u_size_mode;\n#endif\n#if FORCE_OVER_TIME_MODULE_ENABLE\n  uniform sampler2D force_over_time_tex0;\n      uniform int u_force_mode;\n    uniform int u_force_space;\n#endif\n#if VELOCITY_OVER_TIME_MODULE_ENABLE\n  uniform sampler2D velocity_over_time_tex0;\n      uniform int u_velocity_mode;\n    uniform int u_velocity_space;\n#endif\n#if TEXTURE_ANIMATION_MODULE_ENABLE\n  uniform sampler2D texture_animation_tex0;\n      uniform vec4 u_anim_info;\n#endif\nfloat repeat (float t, float length) {\n  return t - floor(t / length) * length;\n}\nvec4 rotateQuat (vec4 p, vec4 q) {\n  vec3 iv = cross(q.xyz, p.xyz) + q.w * p.xyz;\n  vec3 res = p.xyz + 2.0 * cross(q.xyz, iv);\n  return vec4(res.xyz, p.w);\n}\nvec4 gpvs_main () {\n  float activeTime = u_timeDelta.x - a_position_starttime.w;\n  float normalizedTime = clamp(activeTime / a_dir_life.w, 0.0, 1.0);\n  vec2 timeCoord0 = vec2(normalizedTime, 0.);\n  vec2 timeCoord1 = vec2(normalizedTime, 1.);\n  #if CC_RENDER_MODE == 4\n    vec2 vertIdx = vec2(a_texCoord.x, a_texCoord.y);\n  #endif\n  #if CC_RENDER_MODE != 4\n    #if !CC_INSTANCE_PARTICLE\n      vec2 vertIdx = vec2(a_size_uv.w, a_rotation_uv.w);\n    #endif\n    #if CC_INSTANCE_PARTICLE\n      vec2 vertIdx = a_uv.xy;\n    #endif\n  #endif\n  vec4 velocity = vec4(a_dir_life.xyz, 0.);\n  vec4 pos = vec4(a_position_starttime.xyz, 1.);\n  #if !CC_INSTANCE_PARTICLE\n    vec3 size = a_size_uv.xyz;\n  #endif\n  #if CC_INSTANCE_PARTICLE\n    vec3 size = a_size_fid.xyz;\n  #endif\n  #if SIZE_OVER_TIME_MODULE_ENABLE\n    if (u_size_mode == 1) {\n      size *= unpackCurveData(size_over_time_tex0, timeCoord0);\n    } else {\n      vec3 size_0 = unpackCurveData(size_over_time_tex0, timeCoord0);\n      vec3 size_1 = unpackCurveData(size_over_time_tex0, timeCoord1);\n      float factor_s = pseudoRandom(a_rndSeed + 39825.);\n      size *= mix(size_0, size_1, factor_s);\n    }\n  #endif\n  vec3 compScale = scale.xyz * size;\n  #if FORCE_OVER_TIME_MODULE_ENABLE\n    vec3 forceAnim = vec3(0.);\n    if (u_force_mode == 1) {\n      forceAnim = unpackCurveData(force_over_time_tex0, timeCoord0);\n    } else {\n      vec3 force_0 = unpackCurveData(force_over_time_tex0, timeCoord0);\n      vec3 force_1 = unpackCurveData(force_over_time_tex0, timeCoord1);\n      float factor_f =  pseudoRandom(a_rndSeed + 212165.);\n      forceAnim = mix(force_0, force_1, factor_f);\n    }\n    vec4 forceTrack = vec4(forceAnim, 0.);\n    if (u_force_space == 0) {\n      forceTrack = rotateQuat(forceTrack, u_worldRot);\n    }\n    velocity.xyz += forceTrack.xyz;\n  #endif\n  #if VELOCITY_OVER_TIME_MODULE_ENABLE\n    float speedModifier0 = 1.;\n    float speedModifier1 = 1.;\n    vec3 velocityAnim = vec3(0.);\n    if (u_velocity_mode == 1) {\n      velocityAnim = unpackCurveData(velocity_over_time_tex0, timeCoord0, speedModifier0);\n    } else {\n      vec3 vectory_0 = unpackCurveData(velocity_over_time_tex0, timeCoord0, speedModifier0);\n      vec3 vectory_1 = unpackCurveData(velocity_over_time_tex0, timeCoord1, speedModifier1);\n      float factor_v = pseudoRandom(a_rndSeed + 197866.);\n      velocityAnim = mix(vectory_0, vectory_1, factor_v);\n      speedModifier0 = mix(speedModifier0, speedModifier1, factor_v);\n    }\n    vec4 velocityTrack = vec4(velocityAnim, 0.);\n    if (u_velocity_space == 0) {\n      velocityTrack = rotateQuat(velocityTrack, u_worldRot);\n    }\n    velocity.xyz += velocityTrack.xyz;\n    velocity.xyz *= speedModifier0;\n  #endif\n  pos.xyz += velocity.xyz * normalizedTime * a_dir_life.w;\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = rotateQuat(velocity, u_worldRot);\n    #endif\n  #endif\n  #if !CC_INSTANCE_PARTICLE\n    vec3 startRotation = a_rotation_uv.xyz;\n  #endif\n  #if CC_INSTANCE_PARTICLE\n    vec3 startRotation = a_rotation;\n  #endif\n  #if CC_RENDER_MODE != 4\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = startRotation.xyz;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #endif\n    #if CC_RENDER_MODE != 0 && CC_RENDER_MODE != 1\n      vec3 rotEuler = vec3(0., 0., startRotation.z);\n    #endif\n    vec4 rot = quaternionFromEuler(rotEuler);\n  #endif\n  #if CC_RENDER_MODE == 4\n    vec4 rot = quaternionFromEuler(startRotation);\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    if (u_rotation_mode == 1) {\n      vec3 euler = unpackCurveData(rotation_over_time_tex0, timeCoord0) * normalizedTime * a_dir_life.w;\n      vec4 quat = eulerToQuat(euler);\n      mat3 mLocal = quatToMat3(quat);\n      mat3 mStart = quatToMat3(rot);\n      rot = mat3ToQuat(mStart * mLocal);\n    } else {\n      vec3 rotation_0 = unpackCurveData(rotation_over_time_tex0, timeCoord0);\n      vec3 rotation_1 = unpackCurveData(rotation_over_time_tex0, timeCoord1);\n      float factor_r = pseudoRandom(a_rndSeed + 125292.);\n      vec3 euler = mix(rotation_0, rotation_1, factor_r) * normalizedTime * a_dir_life.w;\n      #if CC_RENDER_MODE == 3 || CC_RENDER_MODE == 2\n        euler = vec3(0.0, 0.0, euler.z);\n      #endif\n      vec4 quat = eulerToQuat(euler);\n      mat3 mLocal = quatToMat3(quat);\n      mat3 mStart = quatToMat3(rot);\n      rot = mat3ToQuat(mStart * mLocal);\n    }\n  #endif\n  #if COLOR_OVER_TIME_MODULE_ENABLE\n    if (u_color_mode == 1) {\n      color = a_color * texture2D(color_over_time_tex0, timeCoord0);\n    } else {\n      vec4 color_0 = texture2D(color_over_time_tex0, timeCoord0);\n      vec4 color_1 = texture2D(color_over_time_tex0, timeCoord1);\n      float factor_c = pseudoRandom(a_rndSeed + 91041.);\n      color = a_color * mix(color_0, color_1, factor_c);\n    }\n  #endif\n  #if !COLOR_OVER_TIME_MODULE_ENABLE\n    color = a_color;\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((vertIdx - 0.5));\n    #if CC_RENDER_MODE == 1\n      rot = vec4(0.0, 0.0, 0.0, 1.0);\n    #endif\n    computeVertPos(pos, cornerOffset, rot, compScale\n      #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n        , cc_matViewInv\n      #endif\n      #if CC_RENDER_MODE == 1\n        , cc_cameraPos.xyz\n        , velocity\n        , frameTile_velLenScale.z\n        , frameTile_velLenScale.w\n        #if !CC_INSTANCE_PARTICLE\n          , a_size_uv.w\n        #endif\n        #if CC_INSTANCE_PARTICLE\n          , a_uv.x\n        #endif\n      #endif\n    );\n  #endif\n  #if CC_RENDER_MODE == 4\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color *= a_color1;\n  #endif\n  pos = cc_matViewProj * pos;\n  float frameIndex = 0.;\n  #if TEXTURE_ANIMATION_MODULE_ENABLE\n    float startFrame = 0.;\n    vec3 frameInfo = vec3(0.);\n    if (int(u_anim_info.x) == 1) {\n      frameInfo = unpackCurveData(texture_animation_tex0, timeCoord0);\n    } else {\n      vec3 frameInfo0 = unpackCurveData(texture_animation_tex0, timeCoord0);\n      vec3 frameInfo1 = unpackCurveData(texture_animation_tex0, timeCoord1);\n      float factor_t = pseudoRandom(a_rndSeed + 90794.);\n      frameInfo = mix(frameInfo0, frameInfo1, factor_t);\n    }\n    startFrame = frameInfo.x / u_anim_info.y;\n    float EPSILON = 1e-6;\n    frameIndex = repeat(u_anim_info.z * (frameInfo.y + startFrame), 1. + EPSILON);\n  #endif\n  uv = computeUV(frameIndex, vertIdx, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  return pos;\n}\nvoid main() { gl_Position = gpvs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\n   uniform vec4 tintColor;\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture2D(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = multiply(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":71,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":43}},"defines":[{"name":"CC_RENDER_MODE","type":"number","range":[0,4]},{"name":"CC_INSTANCE_PARTICLE","type":"boolean"},{"name":"USE_VK_SHADER","type":"boolean"},{"name":"COLOR_OVER_TIME_MODULE_ENABLE","type":"boolean"},{"name":"ROTATION_OVER_TIME_MODULE_ENABLE","type":"boolean"},{"name":"SIZE_OVER_TIME_MODULE_ENABLE","type":"boolean"},{"name":"FORCE_OVER_TIME_MODULE_ENABLE","type":"boolean"},{"name":"VELOCITY_OVER_TIME_MODULE_ENABLE","type":"boolean"},{"name":"TEXTURE_ANIMATION_MODULE_ENABLE","type":"boolean"},{"name":"CC_USE_WORLD_SPACE","type":"boolean"}]},{"hash":1067163463,"name":"particles/builtin-particle-gpu|builtin/internal/particle-vs-gpu:gpvs_main|no-tint-fs:addSmooth","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]},{"name":"SampleConstants","stageFlags":1,"binding":1,"members":[{"name":"u_sampleInfo","type":16,"count":1}],"defines":[]},{"name":"TickConstants","stageFlags":1,"binding":2,"members":[{"name":"u_worldRot","type":16,"count":1},{"name":"u_timeDelta","type":16,"count":1}],"defines":[]},{"name":"ColorConstant","stageFlags":1,"binding":3,"members":[{"name":"u_color_mode","type":5,"count":1}],"defines":["COLOR_OVER_TIME_MODULE_ENABLE"]},{"name":"RotationConstant","stageFlags":1,"binding":4,"members":[{"name":"u_rotation_mode","type":5,"count":1}],"defines":["ROTATION_OVER_TIME_MODULE_ENABLE"]},{"name":"SizeConstant","stageFlags":1,"binding":5,"members":[{"name":"u_size_mode","type":5,"count":1}],"defines":["SIZE_OVER_TIME_MODULE_ENABLE"]},{"name":"ForceConstant","stageFlags":1,"binding":6,"members":[{"name":"u_force_mode","type":5,"count":1},{"name":"u_force_space","type":5,"count":1}],"defines":["FORCE_OVER_TIME_MODULE_ENABLE"]},{"name":"VelocityConstant","stageFlags":1,"binding":7,"members":[{"name":"u_velocity_mode","type":5,"count":1},{"name":"u_velocity_space","type":5,"count":1}],"defines":["VELOCITY_OVER_TIME_MODULE_ENABLE"]},{"name":"AnimationConstant","stageFlags":1,"binding":8,"members":[{"name":"u_anim_info","type":16,"count":1}],"defines":["TEXTURE_ANIMATION_MODULE_ENABLE"]}],"samplerTextures":[{"name":"color_over_time_tex0","type":28,"count":1,"stageFlags":1,"binding":9,"defines":["COLOR_OVER_TIME_MODULE_ENABLE"]},{"name":"rotation_over_time_tex0","type":28,"count":1,"stageFlags":1,"binding":10,"defines":["ROTATION_OVER_TIME_MODULE_ENABLE"]},{"name":"size_over_time_tex0","type":28,"count":1,"stageFlags":1,"binding":11,"defines":["SIZE_OVER_TIME_MODULE_ENABLE"]},{"name":"force_over_time_tex0","type":28,"count":1,"stageFlags":1,"binding":12,"defines":["FORCE_OVER_TIME_MODULE_ENABLE"]},{"name":"velocity_over_time_tex0","type":28,"count":1,"stageFlags":1,"binding":13,"defines":["VELOCITY_OVER_TIME_MODULE_ENABLE"]},{"name":"texture_animation_tex0","type":28,"count":1,"stageFlags":1,"binding":14,"defines":["TEXTURE_ANIMATION_MODULE_ENABLE"]},{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":15,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position_starttime","format":44,"location":0,"defines":[]},{"name":"a_color","format":44,"location":1,"defines":[]},{"name":"a_dir_life","format":44,"location":2,"defines":[]},{"name":"a_rndSeed","format":11,"location":3,"defines":[]},{"name":"a_size_uv","format":44,"location":4,"defines":["!CC_INSTANCE_PARTICLE"]},{"name":"a_rotation_uv","format":44,"location":5,"defines":["!CC_INSTANCE_PARTICLE"]},{"name":"a_size_fid","format":44,"location":6,"defines":["CC_INSTANCE_PARTICLE"]},{"name":"a_rotation","format":32,"location":7,"defines":["CC_INSTANCE_PARTICLE"]},{"name":"a_uv","format":32,"location":8,"defines":["CC_INSTANCE_PARTICLE"]},{"name":"a_texCoord","format":32,"location":9,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","format":32,"location":10,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","format":32,"location":11,"defines":["CC_RENDER_MODE"]},{"name":"a_color1","format":44,"location":12,"defines":["CC_RENDER_MODE"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]},{"name":"SampleConstants","stageFlags":1,"binding":1,"members":[{"name":"u_sampleInfo","type":16,"count":1}],"defines":[]},{"name":"TickConstants","stageFlags":1,"binding":2,"members":[{"name":"u_worldRot","type":16,"count":1},{"name":"u_timeDelta","type":16,"count":1}],"defines":[]},{"name":"ColorConstant","stageFlags":1,"binding":3,"members":[{"name":"u_color_mode","type":5,"count":1}],"defines":["COLOR_OVER_TIME_MODULE_ENABLE"]},{"name":"RotationConstant","stageFlags":1,"binding":4,"members":[{"name":"u_rotation_mode","type":5,"count":1}],"defines":["ROTATION_OVER_TIME_MODULE_ENABLE"]},{"name":"SizeConstant","stageFlags":1,"binding":5,"members":[{"name":"u_size_mode","type":5,"count":1}],"defines":["SIZE_OVER_TIME_MODULE_ENABLE"]},{"name":"ForceConstant","stageFlags":1,"binding":6,"members":[{"name":"u_force_mode","type":5,"count":1},{"name":"u_force_space","type":5,"count":1}],"defines":["FORCE_OVER_TIME_MODULE_ENABLE"]},{"name":"VelocityConstant","stageFlags":1,"binding":7,"members":[{"name":"u_velocity_mode","type":5,"count":1},{"name":"u_velocity_space","type":5,"count":1}],"defines":["VELOCITY_OVER_TIME_MODULE_ENABLE"]},{"name":"AnimationConstant","stageFlags":1,"binding":8,"members":[{"name":"u_anim_info","type":16,"count":1}],"defines":["TEXTURE_ANIMATION_MODULE_ENABLE"]}],"samplerTextures":[{"name":"color_over_time_tex0","type":28,"count":1,"stageFlags":1,"binding":9,"defines":["COLOR_OVER_TIME_MODULE_ENABLE"]},{"name":"rotation_over_time_tex0","type":28,"count":1,"stageFlags":1,"binding":10,"defines":["ROTATION_OVER_TIME_MODULE_ENABLE"]},{"name":"size_over_time_tex0","type":28,"count":1,"stageFlags":1,"binding":11,"defines":["SIZE_OVER_TIME_MODULE_ENABLE"]},{"name":"force_over_time_tex0","type":28,"count":1,"stageFlags":1,"binding":12,"defines":["FORCE_OVER_TIME_MODULE_ENABLE"]},{"name":"velocity_over_time_tex0","type":28,"count":1,"stageFlags":1,"binding":13,"defines":["VELOCITY_OVER_TIME_MODULE_ENABLE"]},{"name":"texture_animation_tex0","type":28,"count":1,"stageFlags":1,"binding":14,"defines":["TEXTURE_ANIMATION_MODULE_ENABLE"]},{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":15,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision mediump float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nvec4 eulerToQuat(vec3 euler) {\n  vec3 er = euler * 0.5;\n  float x = er.x, y = er.y, z = er.z;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat;\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n  highp vec4 cc_reflectionProbeData1;\n  highp vec4 cc_reflectionProbeData2;\n  highp vec4 cc_reflectionProbeBlendData1;\n  highp vec4 cc_reflectionProbeBlendData2;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(std140) uniform SampleConstants {\n  vec4 u_sampleInfo;\n};\nlayout(std140) uniform TickConstants {\n  vec4 u_worldRot;\n  vec4 u_timeDelta;\n};\nin vec4 a_position_starttime;\nin vec4 a_color;\nin vec4 a_dir_life;\nin float a_rndSeed;\n#if !CC_INSTANCE_PARTICLE\n  in vec4 a_size_uv;\n  in vec4 a_rotation_uv;\n#endif\n#if CC_INSTANCE_PARTICLE\n  in vec4 a_size_fid;\n  in vec3 a_rotation;\n  in vec3 a_uv;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord;\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec3 unpackCurveData (sampler2D tex, vec2 coord) {\n  vec4 a = texture(tex, coord);\n  vec4 b = texture(tex, coord + u_sampleInfo.y);\n  float c = fract(coord.x * u_sampleInfo.x);\n  return mix(a.xyz, b.xyz, c);\n}\nvec3 unpackCurveData (sampler2D tex, vec2 coord, out float w) {\n  vec4 a = texture(tex, coord);\n  vec4 b = texture(tex, coord + u_sampleInfo.y);\n  float c = fract(coord.x * u_sampleInfo.x);\n  w = mix(a.w, b.w, c);\n  return mix(a.xyz, b.xyz, c);\n}\nfloat pseudoRandom(float x) {\n#if USE_VK_SHADER\n  float o = x;\n  x = mod(x - 1.0, 2.0) - 1.0;\n  float freqVar = 10.16640753482;\n  float y = sin(freqVar * floor(o * 0.5 - 0.5));\n  float v = max(0.0, 1.0-abs(x));\n  v *= 0.7071067812;\n  v = y < 0.0 ? -v : v;\n  return v;\n#endif\n#if !USE_VK_SHADER\n  float seed = mod(x, 233280.);\n  float q = (seed * 9301. + 49297.) / 233280.;\n  return fract(q);\n#endif\n}\n#if COLOR_OVER_TIME_MODULE_ENABLE\n  uniform sampler2D color_over_time_tex0;\n  layout(std140) uniform ColorConstant {\n    int u_color_mode;\n  };\n#endif\n#if ROTATION_OVER_TIME_MODULE_ENABLE\n  uniform sampler2D rotation_over_time_tex0;\n  layout(std140) uniform RotationConstant {\n    int u_rotation_mode;\n  };\n#endif\n#if SIZE_OVER_TIME_MODULE_ENABLE\n  uniform sampler2D size_over_time_tex0;\n  layout(std140) uniform SizeConstant {\n    int u_size_mode;\n  };\n#endif\n#if FORCE_OVER_TIME_MODULE_ENABLE\n  uniform sampler2D force_over_time_tex0;\n  layout(std140) uniform ForceConstant {\n    int u_force_mode;\n    int u_force_space;\n  };\n#endif\n#if VELOCITY_OVER_TIME_MODULE_ENABLE\n  uniform sampler2D velocity_over_time_tex0;\n  layout(std140) uniform VelocityConstant {\n    int u_velocity_mode;\n    int u_velocity_space;\n  };\n#endif\n#if TEXTURE_ANIMATION_MODULE_ENABLE\n  uniform sampler2D texture_animation_tex0;\n  layout(std140) uniform AnimationConstant {\n    vec4 u_anim_info;\n  };\n#endif\nfloat repeat (float t, float length) {\n  return t - floor(t / length) * length;\n}\nvec4 rotateQuat (vec4 p, vec4 q) {\n  vec3 iv = cross(q.xyz, p.xyz) + q.w * p.xyz;\n  vec3 res = p.xyz + 2.0 * cross(q.xyz, iv);\n  return vec4(res.xyz, p.w);\n}\nvec4 gpvs_main () {\n  float activeTime = u_timeDelta.x - a_position_starttime.w;\n  float normalizedTime = clamp(activeTime / a_dir_life.w, 0.0, 1.0);\n  vec2 timeCoord0 = vec2(normalizedTime, 0.);\n  vec2 timeCoord1 = vec2(normalizedTime, 1.);\n  #if CC_RENDER_MODE == 4\n    vec2 vertIdx = vec2(a_texCoord.x, a_texCoord.y);\n  #endif\n  #if CC_RENDER_MODE != 4\n    #if !CC_INSTANCE_PARTICLE\n      vec2 vertIdx = vec2(a_size_uv.w, a_rotation_uv.w);\n    #endif\n    #if CC_INSTANCE_PARTICLE\n      vec2 vertIdx = a_uv.xy;\n    #endif\n  #endif\n  vec4 velocity = vec4(a_dir_life.xyz, 0.);\n  vec4 pos = vec4(a_position_starttime.xyz, 1.);\n  #if !CC_INSTANCE_PARTICLE\n    vec3 size = a_size_uv.xyz;\n  #endif\n  #if CC_INSTANCE_PARTICLE\n    vec3 size = a_size_fid.xyz;\n  #endif\n  #if SIZE_OVER_TIME_MODULE_ENABLE\n    if (u_size_mode == 1) {\n      size *= unpackCurveData(size_over_time_tex0, timeCoord0);\n    } else {\n      vec3 size_0 = unpackCurveData(size_over_time_tex0, timeCoord0);\n      vec3 size_1 = unpackCurveData(size_over_time_tex0, timeCoord1);\n      float factor_s = pseudoRandom(a_rndSeed + 39825.);\n      size *= mix(size_0, size_1, factor_s);\n    }\n  #endif\n  vec3 compScale = scale.xyz * size;\n  #if FORCE_OVER_TIME_MODULE_ENABLE\n    vec3 forceAnim = vec3(0.);\n    if (u_force_mode == 1) {\n      forceAnim = unpackCurveData(force_over_time_tex0, timeCoord0);\n    } else {\n      vec3 force_0 = unpackCurveData(force_over_time_tex0, timeCoord0);\n      vec3 force_1 = unpackCurveData(force_over_time_tex0, timeCoord1);\n      float factor_f =  pseudoRandom(a_rndSeed + 212165.);\n      forceAnim = mix(force_0, force_1, factor_f);\n    }\n    vec4 forceTrack = vec4(forceAnim, 0.);\n    if (u_force_space == 0) {\n      forceTrack = rotateQuat(forceTrack, u_worldRot);\n    }\n    velocity.xyz += forceTrack.xyz;\n  #endif\n  #if VELOCITY_OVER_TIME_MODULE_ENABLE\n    float speedModifier0 = 1.;\n    float speedModifier1 = 1.;\n    vec3 velocityAnim = vec3(0.);\n    if (u_velocity_mode == 1) {\n      velocityAnim = unpackCurveData(velocity_over_time_tex0, timeCoord0, speedModifier0);\n    } else {\n      vec3 vectory_0 = unpackCurveData(velocity_over_time_tex0, timeCoord0, speedModifier0);\n      vec3 vectory_1 = unpackCurveData(velocity_over_time_tex0, timeCoord1, speedModifier1);\n      float factor_v = pseudoRandom(a_rndSeed + 197866.);\n      velocityAnim = mix(vectory_0, vectory_1, factor_v);\n      speedModifier0 = mix(speedModifier0, speedModifier1, factor_v);\n    }\n    vec4 velocityTrack = vec4(velocityAnim, 0.);\n    if (u_velocity_space == 0) {\n      velocityTrack = rotateQuat(velocityTrack, u_worldRot);\n    }\n    velocity.xyz += velocityTrack.xyz;\n    velocity.xyz *= speedModifier0;\n  #endif\n  pos.xyz += velocity.xyz * normalizedTime * a_dir_life.w;\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = rotateQuat(velocity, u_worldRot);\n    #endif\n  #endif\n  #if !CC_INSTANCE_PARTICLE\n    vec3 startRotation = a_rotation_uv.xyz;\n  #endif\n  #if CC_INSTANCE_PARTICLE\n    vec3 startRotation = a_rotation;\n  #endif\n  #if CC_RENDER_MODE != 4\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = startRotation.xyz;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #endif\n    #if CC_RENDER_MODE != 0 && CC_RENDER_MODE != 1\n      vec3 rotEuler = vec3(0., 0., startRotation.z);\n    #endif\n    vec4 rot = quaternionFromEuler(rotEuler);\n  #endif\n  #if CC_RENDER_MODE == 4\n    vec4 rot = quaternionFromEuler(startRotation);\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    if (u_rotation_mode == 1) {\n      vec3 euler = unpackCurveData(rotation_over_time_tex0, timeCoord0) * normalizedTime * a_dir_life.w;\n      vec4 quat = eulerToQuat(euler);\n      mat3 mLocal = quatToMat3(quat);\n      mat3 mStart = quatToMat3(rot);\n      rot = mat3ToQuat(mStart * mLocal);\n    } else {\n      vec3 rotation_0 = unpackCurveData(rotation_over_time_tex0, timeCoord0);\n      vec3 rotation_1 = unpackCurveData(rotation_over_time_tex0, timeCoord1);\n      float factor_r = pseudoRandom(a_rndSeed + 125292.);\n      vec3 euler = mix(rotation_0, rotation_1, factor_r) * normalizedTime * a_dir_life.w;\n      #if CC_RENDER_MODE == 3 || CC_RENDER_MODE == 2\n        euler = vec3(0.0, 0.0, euler.z);\n      #endif\n      vec4 quat = eulerToQuat(euler);\n      mat3 mLocal = quatToMat3(quat);\n      mat3 mStart = quatToMat3(rot);\n      rot = mat3ToQuat(mStart * mLocal);\n    }\n  #endif\n  #if COLOR_OVER_TIME_MODULE_ENABLE\n    if (u_color_mode == 1) {\n      color = a_color * texture(color_over_time_tex0, timeCoord0);\n    } else {\n      vec4 color_0 = texture(color_over_time_tex0, timeCoord0);\n      vec4 color_1 = texture(color_over_time_tex0, timeCoord1);\n      float factor_c = pseudoRandom(a_rndSeed + 91041.);\n      color = a_color * mix(color_0, color_1, factor_c);\n    }\n  #endif\n  #if !COLOR_OVER_TIME_MODULE_ENABLE\n    color = a_color;\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((vertIdx - 0.5));\n    #if CC_RENDER_MODE == 1\n      rot = vec4(0.0, 0.0, 0.0, 1.0);\n    #endif\n    computeVertPos(pos, cornerOffset, rot, compScale\n      #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n        , cc_matViewInv\n      #endif\n      #if CC_RENDER_MODE == 1\n        , cc_cameraPos.xyz\n        , velocity\n        , frameTile_velLenScale.z\n        , frameTile_velLenScale.w\n        #if !CC_INSTANCE_PARTICLE\n          , a_size_uv.w\n        #endif\n        #if CC_INSTANCE_PARTICLE\n          , a_uv.x\n        #endif\n      #endif\n    );\n  #endif\n  #if CC_RENDER_MODE == 4\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color *= a_color1;\n  #endif\n  pos = cc_matViewProj * pos;\n  float frameIndex = 0.;\n  #if TEXTURE_ANIMATION_MODULE_ENABLE\n    float startFrame = 0.;\n    vec3 frameInfo = vec3(0.);\n    if (int(u_anim_info.x) == 1) {\n      frameInfo = unpackCurveData(texture_animation_tex0, timeCoord0);\n    } else {\n      vec3 frameInfo0 = unpackCurveData(texture_animation_tex0, timeCoord0);\n      vec3 frameInfo1 = unpackCurveData(texture_animation_tex0, timeCoord1);\n      float factor_t = pseudoRandom(a_rndSeed + 90794.);\n      frameInfo = mix(frameInfo0, frameInfo1, factor_t);\n    }\n    startFrame = frameInfo.x / u_anim_info.y;\n    float EPSILON = 1e-6;\n    frameIndex = repeat(u_anim_info.z * (frameInfo.y + startFrame), 1. + EPSILON);\n  #endif\n  uv = computeUV(frameIndex, vertIdx, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  return pos;\n}\nvoid main() { gl_Position = gpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = addSmooth(); }"},"glsl1":{"vert":"\nprecision mediump float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nvec4 eulerToQuat(vec3 euler) {\n  vec3 er = euler * 0.5;\n  float x = er.x, y = er.y, z = er.z;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat;\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\n   uniform vec4 nodeRotation;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\n          uniform vec4 u_sampleInfo;\n    uniform vec4 u_worldRot;\n    uniform vec4 u_timeDelta;\nattribute vec4 a_position_starttime;\nattribute vec4 a_color;\nattribute vec4 a_dir_life;\nattribute float a_rndSeed;\n#if !CC_INSTANCE_PARTICLE\n  attribute vec4 a_size_uv;\n  attribute vec4 a_rotation_uv;\n#endif\n#if CC_INSTANCE_PARTICLE\n  attribute vec4 a_size_fid;\n  attribute vec3 a_rotation;\n  attribute vec3 a_uv;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord;\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec3 unpackCurveData (sampler2D tex, vec2 coord) {\n  vec4 a = texture2D(tex, coord);\n  vec4 b = texture2D(tex, coord + u_sampleInfo.y);\n  float c = fract(coord.x * u_sampleInfo.x);\n  return mix(a.xyz, b.xyz, c);\n}\nvec3 unpackCurveData (sampler2D tex, vec2 coord, out float w) {\n  vec4 a = texture2D(tex, coord);\n  vec4 b = texture2D(tex, coord + u_sampleInfo.y);\n  float c = fract(coord.x * u_sampleInfo.x);\n  w = mix(a.w, b.w, c);\n  return mix(a.xyz, b.xyz, c);\n}\nfloat pseudoRandom(float x) {\n#if USE_VK_SHADER\n  float o = x;\n  x = mod(x - 1.0, 2.0) - 1.0;\n  float freqVar = 10.16640753482;\n  float y = sin(freqVar * floor(o * 0.5 - 0.5));\n  float v = max(0.0, 1.0-abs(x));\n  v *= 0.7071067812;\n  v = y < 0.0 ? -v : v;\n  return v;\n#endif\n#if !USE_VK_SHADER\n  float seed = mod(x, 233280.);\n  float q = (seed * 9301. + 49297.) / 233280.;\n  return fract(q);\n#endif\n}\n#if COLOR_OVER_TIME_MODULE_ENABLE\n  uniform sampler2D color_over_time_tex0;\n      uniform int u_color_mode;\n#endif\n#if ROTATION_OVER_TIME_MODULE_ENABLE\n  uniform sampler2D rotation_over_time_tex0;\n      uniform int u_rotation_mode;\n#endif\n#if SIZE_OVER_TIME_MODULE_ENABLE\n  uniform sampler2D size_over_time_tex0;\n      uniform int u_size_mode;\n#endif\n#if FORCE_OVER_TIME_MODULE_ENABLE\n  uniform sampler2D force_over_time_tex0;\n      uniform int u_force_mode;\n    uniform int u_force_space;\n#endif\n#if VELOCITY_OVER_TIME_MODULE_ENABLE\n  uniform sampler2D velocity_over_time_tex0;\n      uniform int u_velocity_mode;\n    uniform int u_velocity_space;\n#endif\n#if TEXTURE_ANIMATION_MODULE_ENABLE\n  uniform sampler2D texture_animation_tex0;\n      uniform vec4 u_anim_info;\n#endif\nfloat repeat (float t, float length) {\n  return t - floor(t / length) * length;\n}\nvec4 rotateQuat (vec4 p, vec4 q) {\n  vec3 iv = cross(q.xyz, p.xyz) + q.w * p.xyz;\n  vec3 res = p.xyz + 2.0 * cross(q.xyz, iv);\n  return vec4(res.xyz, p.w);\n}\nvec4 gpvs_main () {\n  float activeTime = u_timeDelta.x - a_position_starttime.w;\n  float normalizedTime = clamp(activeTime / a_dir_life.w, 0.0, 1.0);\n  vec2 timeCoord0 = vec2(normalizedTime, 0.);\n  vec2 timeCoord1 = vec2(normalizedTime, 1.);\n  #if CC_RENDER_MODE == 4\n    vec2 vertIdx = vec2(a_texCoord.x, a_texCoord.y);\n  #endif\n  #if CC_RENDER_MODE != 4\n    #if !CC_INSTANCE_PARTICLE\n      vec2 vertIdx = vec2(a_size_uv.w, a_rotation_uv.w);\n    #endif\n    #if CC_INSTANCE_PARTICLE\n      vec2 vertIdx = a_uv.xy;\n    #endif\n  #endif\n  vec4 velocity = vec4(a_dir_life.xyz, 0.);\n  vec4 pos = vec4(a_position_starttime.xyz, 1.);\n  #if !CC_INSTANCE_PARTICLE\n    vec3 size = a_size_uv.xyz;\n  #endif\n  #if CC_INSTANCE_PARTICLE\n    vec3 size = a_size_fid.xyz;\n  #endif\n  #if SIZE_OVER_TIME_MODULE_ENABLE\n    if (u_size_mode == 1) {\n      size *= unpackCurveData(size_over_time_tex0, timeCoord0);\n    } else {\n      vec3 size_0 = unpackCurveData(size_over_time_tex0, timeCoord0);\n      vec3 size_1 = unpackCurveData(size_over_time_tex0, timeCoord1);\n      float factor_s = pseudoRandom(a_rndSeed + 39825.);\n      size *= mix(size_0, size_1, factor_s);\n    }\n  #endif\n  vec3 compScale = scale.xyz * size;\n  #if FORCE_OVER_TIME_MODULE_ENABLE\n    vec3 forceAnim = vec3(0.);\n    if (u_force_mode == 1) {\n      forceAnim = unpackCurveData(force_over_time_tex0, timeCoord0);\n    } else {\n      vec3 force_0 = unpackCurveData(force_over_time_tex0, timeCoord0);\n      vec3 force_1 = unpackCurveData(force_over_time_tex0, timeCoord1);\n      float factor_f =  pseudoRandom(a_rndSeed + 212165.);\n      forceAnim = mix(force_0, force_1, factor_f);\n    }\n    vec4 forceTrack = vec4(forceAnim, 0.);\n    if (u_force_space == 0) {\n      forceTrack = rotateQuat(forceTrack, u_worldRot);\n    }\n    velocity.xyz += forceTrack.xyz;\n  #endif\n  #if VELOCITY_OVER_TIME_MODULE_ENABLE\n    float speedModifier0 = 1.;\n    float speedModifier1 = 1.;\n    vec3 velocityAnim = vec3(0.);\n    if (u_velocity_mode == 1) {\n      velocityAnim = unpackCurveData(velocity_over_time_tex0, timeCoord0, speedModifier0);\n    } else {\n      vec3 vectory_0 = unpackCurveData(velocity_over_time_tex0, timeCoord0, speedModifier0);\n      vec3 vectory_1 = unpackCurveData(velocity_over_time_tex0, timeCoord1, speedModifier1);\n      float factor_v = pseudoRandom(a_rndSeed + 197866.);\n      velocityAnim = mix(vectory_0, vectory_1, factor_v);\n      speedModifier0 = mix(speedModifier0, speedModifier1, factor_v);\n    }\n    vec4 velocityTrack = vec4(velocityAnim, 0.);\n    if (u_velocity_space == 0) {\n      velocityTrack = rotateQuat(velocityTrack, u_worldRot);\n    }\n    velocity.xyz += velocityTrack.xyz;\n    velocity.xyz *= speedModifier0;\n  #endif\n  pos.xyz += velocity.xyz * normalizedTime * a_dir_life.w;\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = rotateQuat(velocity, u_worldRot);\n    #endif\n  #endif\n  #if !CC_INSTANCE_PARTICLE\n    vec3 startRotation = a_rotation_uv.xyz;\n  #endif\n  #if CC_INSTANCE_PARTICLE\n    vec3 startRotation = a_rotation;\n  #endif\n  #if CC_RENDER_MODE != 4\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = startRotation.xyz;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #endif\n    #if CC_RENDER_MODE != 0 && CC_RENDER_MODE != 1\n      vec3 rotEuler = vec3(0., 0., startRotation.z);\n    #endif\n    vec4 rot = quaternionFromEuler(rotEuler);\n  #endif\n  #if CC_RENDER_MODE == 4\n    vec4 rot = quaternionFromEuler(startRotation);\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    if (u_rotation_mode == 1) {\n      vec3 euler = unpackCurveData(rotation_over_time_tex0, timeCoord0) * normalizedTime * a_dir_life.w;\n      vec4 quat = eulerToQuat(euler);\n      mat3 mLocal = quatToMat3(quat);\n      mat3 mStart = quatToMat3(rot);\n      rot = mat3ToQuat(mStart * mLocal);\n    } else {\n      vec3 rotation_0 = unpackCurveData(rotation_over_time_tex0, timeCoord0);\n      vec3 rotation_1 = unpackCurveData(rotation_over_time_tex0, timeCoord1);\n      float factor_r = pseudoRandom(a_rndSeed + 125292.);\n      vec3 euler = mix(rotation_0, rotation_1, factor_r) * normalizedTime * a_dir_life.w;\n      #if CC_RENDER_MODE == 3 || CC_RENDER_MODE == 2\n        euler = vec3(0.0, 0.0, euler.z);\n      #endif\n      vec4 quat = eulerToQuat(euler);\n      mat3 mLocal = quatToMat3(quat);\n      mat3 mStart = quatToMat3(rot);\n      rot = mat3ToQuat(mStart * mLocal);\n    }\n  #endif\n  #if COLOR_OVER_TIME_MODULE_ENABLE\n    if (u_color_mode == 1) {\n      color = a_color * texture2D(color_over_time_tex0, timeCoord0);\n    } else {\n      vec4 color_0 = texture2D(color_over_time_tex0, timeCoord0);\n      vec4 color_1 = texture2D(color_over_time_tex0, timeCoord1);\n      float factor_c = pseudoRandom(a_rndSeed + 91041.);\n      color = a_color * mix(color_0, color_1, factor_c);\n    }\n  #endif\n  #if !COLOR_OVER_TIME_MODULE_ENABLE\n    color = a_color;\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((vertIdx - 0.5));\n    #if CC_RENDER_MODE == 1\n      rot = vec4(0.0, 0.0, 0.0, 1.0);\n    #endif\n    computeVertPos(pos, cornerOffset, rot, compScale\n      #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n        , cc_matViewInv\n      #endif\n      #if CC_RENDER_MODE == 1\n        , cc_cameraPos.xyz\n        , velocity\n        , frameTile_velLenScale.z\n        , frameTile_velLenScale.w\n        #if !CC_INSTANCE_PARTICLE\n          , a_size_uv.w\n        #endif\n        #if CC_INSTANCE_PARTICLE\n          , a_uv.x\n        #endif\n      #endif\n    );\n  #endif\n  #if CC_RENDER_MODE == 4\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color *= a_color1;\n  #endif\n  pos = cc_matViewProj * pos;\n  float frameIndex = 0.;\n  #if TEXTURE_ANIMATION_MODULE_ENABLE\n    float startFrame = 0.;\n    vec3 frameInfo = vec3(0.);\n    if (int(u_anim_info.x) == 1) {\n      frameInfo = unpackCurveData(texture_animation_tex0, timeCoord0);\n    } else {\n      vec3 frameInfo0 = unpackCurveData(texture_animation_tex0, timeCoord0);\n      vec3 frameInfo1 = unpackCurveData(texture_animation_tex0, timeCoord1);\n      float factor_t = pseudoRandom(a_rndSeed + 90794.);\n      frameInfo = mix(frameInfo0, frameInfo1, factor_t);\n    }\n    startFrame = frameInfo.x / u_anim_info.y;\n    float EPSILON = 1e-6;\n    frameIndex = repeat(u_anim_info.z * (frameInfo.y + startFrame), 1. + EPSILON);\n  #endif\n  uv = computeUV(frameIndex, vertIdx, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  return pos;\n}\nvoid main() { gl_Position = gpvs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture2D(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = addSmooth(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":71,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":42}},"defines":[{"name":"CC_RENDER_MODE","type":"number","range":[0,4]},{"name":"CC_INSTANCE_PARTICLE","type":"boolean"},{"name":"USE_VK_SHADER","type":"boolean"},{"name":"COLOR_OVER_TIME_MODULE_ENABLE","type":"boolean"},{"name":"ROTATION_OVER_TIME_MODULE_ENABLE","type":"boolean"},{"name":"SIZE_OVER_TIME_MODULE_ENABLE","type":"boolean"},{"name":"FORCE_OVER_TIME_MODULE_ENABLE","type":"boolean"},{"name":"VELOCITY_OVER_TIME_MODULE_ENABLE","type":"boolean"},{"name":"TEXTURE_ANIMATION_MODULE_ENABLE","type":"boolean"},{"name":"CC_USE_WORLD_SPACE","type":"boolean"}]},{"hash":3967087977,"name":"particles/builtin-particle-gpu|builtin/internal/particle-vs-gpu:gpvs_main|no-tint-fs:premultiplied","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]},{"name":"SampleConstants","stageFlags":1,"binding":1,"members":[{"name":"u_sampleInfo","type":16,"count":1}],"defines":[]},{"name":"TickConstants","stageFlags":1,"binding":2,"members":[{"name":"u_worldRot","type":16,"count":1},{"name":"u_timeDelta","type":16,"count":1}],"defines":[]},{"name":"ColorConstant","stageFlags":1,"binding":3,"members":[{"name":"u_color_mode","type":5,"count":1}],"defines":["COLOR_OVER_TIME_MODULE_ENABLE"]},{"name":"RotationConstant","stageFlags":1,"binding":4,"members":[{"name":"u_rotation_mode","type":5,"count":1}],"defines":["ROTATION_OVER_TIME_MODULE_ENABLE"]},{"name":"SizeConstant","stageFlags":1,"binding":5,"members":[{"name":"u_size_mode","type":5,"count":1}],"defines":["SIZE_OVER_TIME_MODULE_ENABLE"]},{"name":"ForceConstant","stageFlags":1,"binding":6,"members":[{"name":"u_force_mode","type":5,"count":1},{"name":"u_force_space","type":5,"count":1}],"defines":["FORCE_OVER_TIME_MODULE_ENABLE"]},{"name":"VelocityConstant","stageFlags":1,"binding":7,"members":[{"name":"u_velocity_mode","type":5,"count":1},{"name":"u_velocity_space","type":5,"count":1}],"defines":["VELOCITY_OVER_TIME_MODULE_ENABLE"]},{"name":"AnimationConstant","stageFlags":1,"binding":8,"members":[{"name":"u_anim_info","type":16,"count":1}],"defines":["TEXTURE_ANIMATION_MODULE_ENABLE"]}],"samplerTextures":[{"name":"color_over_time_tex0","type":28,"count":1,"stageFlags":1,"binding":9,"defines":["COLOR_OVER_TIME_MODULE_ENABLE"]},{"name":"rotation_over_time_tex0","type":28,"count":1,"stageFlags":1,"binding":10,"defines":["ROTATION_OVER_TIME_MODULE_ENABLE"]},{"name":"size_over_time_tex0","type":28,"count":1,"stageFlags":1,"binding":11,"defines":["SIZE_OVER_TIME_MODULE_ENABLE"]},{"name":"force_over_time_tex0","type":28,"count":1,"stageFlags":1,"binding":12,"defines":["FORCE_OVER_TIME_MODULE_ENABLE"]},{"name":"velocity_over_time_tex0","type":28,"count":1,"stageFlags":1,"binding":13,"defines":["VELOCITY_OVER_TIME_MODULE_ENABLE"]},{"name":"texture_animation_tex0","type":28,"count":1,"stageFlags":1,"binding":14,"defines":["TEXTURE_ANIMATION_MODULE_ENABLE"]},{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":15,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position_starttime","format":44,"location":0,"defines":[]},{"name":"a_color","format":44,"location":1,"defines":[]},{"name":"a_dir_life","format":44,"location":2,"defines":[]},{"name":"a_rndSeed","format":11,"location":3,"defines":[]},{"name":"a_size_uv","format":44,"location":4,"defines":["!CC_INSTANCE_PARTICLE"]},{"name":"a_rotation_uv","format":44,"location":5,"defines":["!CC_INSTANCE_PARTICLE"]},{"name":"a_size_fid","format":44,"location":6,"defines":["CC_INSTANCE_PARTICLE"]},{"name":"a_rotation","format":32,"location":7,"defines":["CC_INSTANCE_PARTICLE"]},{"name":"a_uv","format":32,"location":8,"defines":["CC_INSTANCE_PARTICLE"]},{"name":"a_texCoord","format":32,"location":9,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","format":32,"location":10,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","format":32,"location":11,"defines":["CC_RENDER_MODE"]},{"name":"a_color1","format":44,"location":12,"defines":["CC_RENDER_MODE"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]},{"name":"SampleConstants","stageFlags":1,"binding":1,"members":[{"name":"u_sampleInfo","type":16,"count":1}],"defines":[]},{"name":"TickConstants","stageFlags":1,"binding":2,"members":[{"name":"u_worldRot","type":16,"count":1},{"name":"u_timeDelta","type":16,"count":1}],"defines":[]},{"name":"ColorConstant","stageFlags":1,"binding":3,"members":[{"name":"u_color_mode","type":5,"count":1}],"defines":["COLOR_OVER_TIME_MODULE_ENABLE"]},{"name":"RotationConstant","stageFlags":1,"binding":4,"members":[{"name":"u_rotation_mode","type":5,"count":1}],"defines":["ROTATION_OVER_TIME_MODULE_ENABLE"]},{"name":"SizeConstant","stageFlags":1,"binding":5,"members":[{"name":"u_size_mode","type":5,"count":1}],"defines":["SIZE_OVER_TIME_MODULE_ENABLE"]},{"name":"ForceConstant","stageFlags":1,"binding":6,"members":[{"name":"u_force_mode","type":5,"count":1},{"name":"u_force_space","type":5,"count":1}],"defines":["FORCE_OVER_TIME_MODULE_ENABLE"]},{"name":"VelocityConstant","stageFlags":1,"binding":7,"members":[{"name":"u_velocity_mode","type":5,"count":1},{"name":"u_velocity_space","type":5,"count":1}],"defines":["VELOCITY_OVER_TIME_MODULE_ENABLE"]},{"name":"AnimationConstant","stageFlags":1,"binding":8,"members":[{"name":"u_anim_info","type":16,"count":1}],"defines":["TEXTURE_ANIMATION_MODULE_ENABLE"]}],"samplerTextures":[{"name":"color_over_time_tex0","type":28,"count":1,"stageFlags":1,"binding":9,"defines":["COLOR_OVER_TIME_MODULE_ENABLE"]},{"name":"rotation_over_time_tex0","type":28,"count":1,"stageFlags":1,"binding":10,"defines":["ROTATION_OVER_TIME_MODULE_ENABLE"]},{"name":"size_over_time_tex0","type":28,"count":1,"stageFlags":1,"binding":11,"defines":["SIZE_OVER_TIME_MODULE_ENABLE"]},{"name":"force_over_time_tex0","type":28,"count":1,"stageFlags":1,"binding":12,"defines":["FORCE_OVER_TIME_MODULE_ENABLE"]},{"name":"velocity_over_time_tex0","type":28,"count":1,"stageFlags":1,"binding":13,"defines":["VELOCITY_OVER_TIME_MODULE_ENABLE"]},{"name":"texture_animation_tex0","type":28,"count":1,"stageFlags":1,"binding":14,"defines":["TEXTURE_ANIMATION_MODULE_ENABLE"]},{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":15,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision mediump float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nvec4 eulerToQuat(vec3 euler) {\n  vec3 er = euler * 0.5;\n  float x = er.x, y = er.y, z = er.z;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat;\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n  highp vec4 cc_reflectionProbeData1;\n  highp vec4 cc_reflectionProbeData2;\n  highp vec4 cc_reflectionProbeBlendData1;\n  highp vec4 cc_reflectionProbeBlendData2;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(std140) uniform SampleConstants {\n  vec4 u_sampleInfo;\n};\nlayout(std140) uniform TickConstants {\n  vec4 u_worldRot;\n  vec4 u_timeDelta;\n};\nin vec4 a_position_starttime;\nin vec4 a_color;\nin vec4 a_dir_life;\nin float a_rndSeed;\n#if !CC_INSTANCE_PARTICLE\n  in vec4 a_size_uv;\n  in vec4 a_rotation_uv;\n#endif\n#if CC_INSTANCE_PARTICLE\n  in vec4 a_size_fid;\n  in vec3 a_rotation;\n  in vec3 a_uv;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord;\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec3 unpackCurveData (sampler2D tex, vec2 coord) {\n  vec4 a = texture(tex, coord);\n  vec4 b = texture(tex, coord + u_sampleInfo.y);\n  float c = fract(coord.x * u_sampleInfo.x);\n  return mix(a.xyz, b.xyz, c);\n}\nvec3 unpackCurveData (sampler2D tex, vec2 coord, out float w) {\n  vec4 a = texture(tex, coord);\n  vec4 b = texture(tex, coord + u_sampleInfo.y);\n  float c = fract(coord.x * u_sampleInfo.x);\n  w = mix(a.w, b.w, c);\n  return mix(a.xyz, b.xyz, c);\n}\nfloat pseudoRandom(float x) {\n#if USE_VK_SHADER\n  float o = x;\n  x = mod(x - 1.0, 2.0) - 1.0;\n  float freqVar = 10.16640753482;\n  float y = sin(freqVar * floor(o * 0.5 - 0.5));\n  float v = max(0.0, 1.0-abs(x));\n  v *= 0.7071067812;\n  v = y < 0.0 ? -v : v;\n  return v;\n#endif\n#if !USE_VK_SHADER\n  float seed = mod(x, 233280.);\n  float q = (seed * 9301. + 49297.) / 233280.;\n  return fract(q);\n#endif\n}\n#if COLOR_OVER_TIME_MODULE_ENABLE\n  uniform sampler2D color_over_time_tex0;\n  layout(std140) uniform ColorConstant {\n    int u_color_mode;\n  };\n#endif\n#if ROTATION_OVER_TIME_MODULE_ENABLE\n  uniform sampler2D rotation_over_time_tex0;\n  layout(std140) uniform RotationConstant {\n    int u_rotation_mode;\n  };\n#endif\n#if SIZE_OVER_TIME_MODULE_ENABLE\n  uniform sampler2D size_over_time_tex0;\n  layout(std140) uniform SizeConstant {\n    int u_size_mode;\n  };\n#endif\n#if FORCE_OVER_TIME_MODULE_ENABLE\n  uniform sampler2D force_over_time_tex0;\n  layout(std140) uniform ForceConstant {\n    int u_force_mode;\n    int u_force_space;\n  };\n#endif\n#if VELOCITY_OVER_TIME_MODULE_ENABLE\n  uniform sampler2D velocity_over_time_tex0;\n  layout(std140) uniform VelocityConstant {\n    int u_velocity_mode;\n    int u_velocity_space;\n  };\n#endif\n#if TEXTURE_ANIMATION_MODULE_ENABLE\n  uniform sampler2D texture_animation_tex0;\n  layout(std140) uniform AnimationConstant {\n    vec4 u_anim_info;\n  };\n#endif\nfloat repeat (float t, float length) {\n  return t - floor(t / length) * length;\n}\nvec4 rotateQuat (vec4 p, vec4 q) {\n  vec3 iv = cross(q.xyz, p.xyz) + q.w * p.xyz;\n  vec3 res = p.xyz + 2.0 * cross(q.xyz, iv);\n  return vec4(res.xyz, p.w);\n}\nvec4 gpvs_main () {\n  float activeTime = u_timeDelta.x - a_position_starttime.w;\n  float normalizedTime = clamp(activeTime / a_dir_life.w, 0.0, 1.0);\n  vec2 timeCoord0 = vec2(normalizedTime, 0.);\n  vec2 timeCoord1 = vec2(normalizedTime, 1.);\n  #if CC_RENDER_MODE == 4\n    vec2 vertIdx = vec2(a_texCoord.x, a_texCoord.y);\n  #endif\n  #if CC_RENDER_MODE != 4\n    #if !CC_INSTANCE_PARTICLE\n      vec2 vertIdx = vec2(a_size_uv.w, a_rotation_uv.w);\n    #endif\n    #if CC_INSTANCE_PARTICLE\n      vec2 vertIdx = a_uv.xy;\n    #endif\n  #endif\n  vec4 velocity = vec4(a_dir_life.xyz, 0.);\n  vec4 pos = vec4(a_position_starttime.xyz, 1.);\n  #if !CC_INSTANCE_PARTICLE\n    vec3 size = a_size_uv.xyz;\n  #endif\n  #if CC_INSTANCE_PARTICLE\n    vec3 size = a_size_fid.xyz;\n  #endif\n  #if SIZE_OVER_TIME_MODULE_ENABLE\n    if (u_size_mode == 1) {\n      size *= unpackCurveData(size_over_time_tex0, timeCoord0);\n    } else {\n      vec3 size_0 = unpackCurveData(size_over_time_tex0, timeCoord0);\n      vec3 size_1 = unpackCurveData(size_over_time_tex0, timeCoord1);\n      float factor_s = pseudoRandom(a_rndSeed + 39825.);\n      size *= mix(size_0, size_1, factor_s);\n    }\n  #endif\n  vec3 compScale = scale.xyz * size;\n  #if FORCE_OVER_TIME_MODULE_ENABLE\n    vec3 forceAnim = vec3(0.);\n    if (u_force_mode == 1) {\n      forceAnim = unpackCurveData(force_over_time_tex0, timeCoord0);\n    } else {\n      vec3 force_0 = unpackCurveData(force_over_time_tex0, timeCoord0);\n      vec3 force_1 = unpackCurveData(force_over_time_tex0, timeCoord1);\n      float factor_f =  pseudoRandom(a_rndSeed + 212165.);\n      forceAnim = mix(force_0, force_1, factor_f);\n    }\n    vec4 forceTrack = vec4(forceAnim, 0.);\n    if (u_force_space == 0) {\n      forceTrack = rotateQuat(forceTrack, u_worldRot);\n    }\n    velocity.xyz += forceTrack.xyz;\n  #endif\n  #if VELOCITY_OVER_TIME_MODULE_ENABLE\n    float speedModifier0 = 1.;\n    float speedModifier1 = 1.;\n    vec3 velocityAnim = vec3(0.);\n    if (u_velocity_mode == 1) {\n      velocityAnim = unpackCurveData(velocity_over_time_tex0, timeCoord0, speedModifier0);\n    } else {\n      vec3 vectory_0 = unpackCurveData(velocity_over_time_tex0, timeCoord0, speedModifier0);\n      vec3 vectory_1 = unpackCurveData(velocity_over_time_tex0, timeCoord1, speedModifier1);\n      float factor_v = pseudoRandom(a_rndSeed + 197866.);\n      velocityAnim = mix(vectory_0, vectory_1, factor_v);\n      speedModifier0 = mix(speedModifier0, speedModifier1, factor_v);\n    }\n    vec4 velocityTrack = vec4(velocityAnim, 0.);\n    if (u_velocity_space == 0) {\n      velocityTrack = rotateQuat(velocityTrack, u_worldRot);\n    }\n    velocity.xyz += velocityTrack.xyz;\n    velocity.xyz *= speedModifier0;\n  #endif\n  pos.xyz += velocity.xyz * normalizedTime * a_dir_life.w;\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = rotateQuat(velocity, u_worldRot);\n    #endif\n  #endif\n  #if !CC_INSTANCE_PARTICLE\n    vec3 startRotation = a_rotation_uv.xyz;\n  #endif\n  #if CC_INSTANCE_PARTICLE\n    vec3 startRotation = a_rotation;\n  #endif\n  #if CC_RENDER_MODE != 4\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = startRotation.xyz;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #endif\n    #if CC_RENDER_MODE != 0 && CC_RENDER_MODE != 1\n      vec3 rotEuler = vec3(0., 0., startRotation.z);\n    #endif\n    vec4 rot = quaternionFromEuler(rotEuler);\n  #endif\n  #if CC_RENDER_MODE == 4\n    vec4 rot = quaternionFromEuler(startRotation);\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    if (u_rotation_mode == 1) {\n      vec3 euler = unpackCurveData(rotation_over_time_tex0, timeCoord0) * normalizedTime * a_dir_life.w;\n      vec4 quat = eulerToQuat(euler);\n      mat3 mLocal = quatToMat3(quat);\n      mat3 mStart = quatToMat3(rot);\n      rot = mat3ToQuat(mStart * mLocal);\n    } else {\n      vec3 rotation_0 = unpackCurveData(rotation_over_time_tex0, timeCoord0);\n      vec3 rotation_1 = unpackCurveData(rotation_over_time_tex0, timeCoord1);\n      float factor_r = pseudoRandom(a_rndSeed + 125292.);\n      vec3 euler = mix(rotation_0, rotation_1, factor_r) * normalizedTime * a_dir_life.w;\n      #if CC_RENDER_MODE == 3 || CC_RENDER_MODE == 2\n        euler = vec3(0.0, 0.0, euler.z);\n      #endif\n      vec4 quat = eulerToQuat(euler);\n      mat3 mLocal = quatToMat3(quat);\n      mat3 mStart = quatToMat3(rot);\n      rot = mat3ToQuat(mStart * mLocal);\n    }\n  #endif\n  #if COLOR_OVER_TIME_MODULE_ENABLE\n    if (u_color_mode == 1) {\n      color = a_color * texture(color_over_time_tex0, timeCoord0);\n    } else {\n      vec4 color_0 = texture(color_over_time_tex0, timeCoord0);\n      vec4 color_1 = texture(color_over_time_tex0, timeCoord1);\n      float factor_c = pseudoRandom(a_rndSeed + 91041.);\n      color = a_color * mix(color_0, color_1, factor_c);\n    }\n  #endif\n  #if !COLOR_OVER_TIME_MODULE_ENABLE\n    color = a_color;\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((vertIdx - 0.5));\n    #if CC_RENDER_MODE == 1\n      rot = vec4(0.0, 0.0, 0.0, 1.0);\n    #endif\n    computeVertPos(pos, cornerOffset, rot, compScale\n      #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n        , cc_matViewInv\n      #endif\n      #if CC_RENDER_MODE == 1\n        , cc_cameraPos.xyz\n        , velocity\n        , frameTile_velLenScale.z\n        , frameTile_velLenScale.w\n        #if !CC_INSTANCE_PARTICLE\n          , a_size_uv.w\n        #endif\n        #if CC_INSTANCE_PARTICLE\n          , a_uv.x\n        #endif\n      #endif\n    );\n  #endif\n  #if CC_RENDER_MODE == 4\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color *= a_color1;\n  #endif\n  pos = cc_matViewProj * pos;\n  float frameIndex = 0.;\n  #if TEXTURE_ANIMATION_MODULE_ENABLE\n    float startFrame = 0.;\n    vec3 frameInfo = vec3(0.);\n    if (int(u_anim_info.x) == 1) {\n      frameInfo = unpackCurveData(texture_animation_tex0, timeCoord0);\n    } else {\n      vec3 frameInfo0 = unpackCurveData(texture_animation_tex0, timeCoord0);\n      vec3 frameInfo1 = unpackCurveData(texture_animation_tex0, timeCoord1);\n      float factor_t = pseudoRandom(a_rndSeed + 90794.);\n      frameInfo = mix(frameInfo0, frameInfo1, factor_t);\n    }\n    startFrame = frameInfo.x / u_anim_info.y;\n    float EPSILON = 1e-6;\n    frameIndex = repeat(u_anim_info.z * (frameInfo.y + startFrame), 1. + EPSILON);\n  #endif\n  uv = computeUV(frameIndex, vertIdx, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  return pos;\n}\nvoid main() { gl_Position = gpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = premultiplied(); }"},"glsl1":{"vert":"\nprecision mediump float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nvec4 eulerToQuat(vec3 euler) {\n  vec3 er = euler * 0.5;\n  float x = er.x, y = er.y, z = er.z;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat;\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\n   uniform vec4 nodeRotation;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\n          uniform vec4 u_sampleInfo;\n    uniform vec4 u_worldRot;\n    uniform vec4 u_timeDelta;\nattribute vec4 a_position_starttime;\nattribute vec4 a_color;\nattribute vec4 a_dir_life;\nattribute float a_rndSeed;\n#if !CC_INSTANCE_PARTICLE\n  attribute vec4 a_size_uv;\n  attribute vec4 a_rotation_uv;\n#endif\n#if CC_INSTANCE_PARTICLE\n  attribute vec4 a_size_fid;\n  attribute vec3 a_rotation;\n  attribute vec3 a_uv;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord;\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec3 unpackCurveData (sampler2D tex, vec2 coord) {\n  vec4 a = texture2D(tex, coord);\n  vec4 b = texture2D(tex, coord + u_sampleInfo.y);\n  float c = fract(coord.x * u_sampleInfo.x);\n  return mix(a.xyz, b.xyz, c);\n}\nvec3 unpackCurveData (sampler2D tex, vec2 coord, out float w) {\n  vec4 a = texture2D(tex, coord);\n  vec4 b = texture2D(tex, coord + u_sampleInfo.y);\n  float c = fract(coord.x * u_sampleInfo.x);\n  w = mix(a.w, b.w, c);\n  return mix(a.xyz, b.xyz, c);\n}\nfloat pseudoRandom(float x) {\n#if USE_VK_SHADER\n  float o = x;\n  x = mod(x - 1.0, 2.0) - 1.0;\n  float freqVar = 10.16640753482;\n  float y = sin(freqVar * floor(o * 0.5 - 0.5));\n  float v = max(0.0, 1.0-abs(x));\n  v *= 0.7071067812;\n  v = y < 0.0 ? -v : v;\n  return v;\n#endif\n#if !USE_VK_SHADER\n  float seed = mod(x, 233280.);\n  float q = (seed * 9301. + 49297.) / 233280.;\n  return fract(q);\n#endif\n}\n#if COLOR_OVER_TIME_MODULE_ENABLE\n  uniform sampler2D color_over_time_tex0;\n      uniform int u_color_mode;\n#endif\n#if ROTATION_OVER_TIME_MODULE_ENABLE\n  uniform sampler2D rotation_over_time_tex0;\n      uniform int u_rotation_mode;\n#endif\n#if SIZE_OVER_TIME_MODULE_ENABLE\n  uniform sampler2D size_over_time_tex0;\n      uniform int u_size_mode;\n#endif\n#if FORCE_OVER_TIME_MODULE_ENABLE\n  uniform sampler2D force_over_time_tex0;\n      uniform int u_force_mode;\n    uniform int u_force_space;\n#endif\n#if VELOCITY_OVER_TIME_MODULE_ENABLE\n  uniform sampler2D velocity_over_time_tex0;\n      uniform int u_velocity_mode;\n    uniform int u_velocity_space;\n#endif\n#if TEXTURE_ANIMATION_MODULE_ENABLE\n  uniform sampler2D texture_animation_tex0;\n      uniform vec4 u_anim_info;\n#endif\nfloat repeat (float t, float length) {\n  return t - floor(t / length) * length;\n}\nvec4 rotateQuat (vec4 p, vec4 q) {\n  vec3 iv = cross(q.xyz, p.xyz) + q.w * p.xyz;\n  vec3 res = p.xyz + 2.0 * cross(q.xyz, iv);\n  return vec4(res.xyz, p.w);\n}\nvec4 gpvs_main () {\n  float activeTime = u_timeDelta.x - a_position_starttime.w;\n  float normalizedTime = clamp(activeTime / a_dir_life.w, 0.0, 1.0);\n  vec2 timeCoord0 = vec2(normalizedTime, 0.);\n  vec2 timeCoord1 = vec2(normalizedTime, 1.);\n  #if CC_RENDER_MODE == 4\n    vec2 vertIdx = vec2(a_texCoord.x, a_texCoord.y);\n  #endif\n  #if CC_RENDER_MODE != 4\n    #if !CC_INSTANCE_PARTICLE\n      vec2 vertIdx = vec2(a_size_uv.w, a_rotation_uv.w);\n    #endif\n    #if CC_INSTANCE_PARTICLE\n      vec2 vertIdx = a_uv.xy;\n    #endif\n  #endif\n  vec4 velocity = vec4(a_dir_life.xyz, 0.);\n  vec4 pos = vec4(a_position_starttime.xyz, 1.);\n  #if !CC_INSTANCE_PARTICLE\n    vec3 size = a_size_uv.xyz;\n  #endif\n  #if CC_INSTANCE_PARTICLE\n    vec3 size = a_size_fid.xyz;\n  #endif\n  #if SIZE_OVER_TIME_MODULE_ENABLE\n    if (u_size_mode == 1) {\n      size *= unpackCurveData(size_over_time_tex0, timeCoord0);\n    } else {\n      vec3 size_0 = unpackCurveData(size_over_time_tex0, timeCoord0);\n      vec3 size_1 = unpackCurveData(size_over_time_tex0, timeCoord1);\n      float factor_s = pseudoRandom(a_rndSeed + 39825.);\n      size *= mix(size_0, size_1, factor_s);\n    }\n  #endif\n  vec3 compScale = scale.xyz * size;\n  #if FORCE_OVER_TIME_MODULE_ENABLE\n    vec3 forceAnim = vec3(0.);\n    if (u_force_mode == 1) {\n      forceAnim = unpackCurveData(force_over_time_tex0, timeCoord0);\n    } else {\n      vec3 force_0 = unpackCurveData(force_over_time_tex0, timeCoord0);\n      vec3 force_1 = unpackCurveData(force_over_time_tex0, timeCoord1);\n      float factor_f =  pseudoRandom(a_rndSeed + 212165.);\n      forceAnim = mix(force_0, force_1, factor_f);\n    }\n    vec4 forceTrack = vec4(forceAnim, 0.);\n    if (u_force_space == 0) {\n      forceTrack = rotateQuat(forceTrack, u_worldRot);\n    }\n    velocity.xyz += forceTrack.xyz;\n  #endif\n  #if VELOCITY_OVER_TIME_MODULE_ENABLE\n    float speedModifier0 = 1.;\n    float speedModifier1 = 1.;\n    vec3 velocityAnim = vec3(0.);\n    if (u_velocity_mode == 1) {\n      velocityAnim = unpackCurveData(velocity_over_time_tex0, timeCoord0, speedModifier0);\n    } else {\n      vec3 vectory_0 = unpackCurveData(velocity_over_time_tex0, timeCoord0, speedModifier0);\n      vec3 vectory_1 = unpackCurveData(velocity_over_time_tex0, timeCoord1, speedModifier1);\n      float factor_v = pseudoRandom(a_rndSeed + 197866.);\n      velocityAnim = mix(vectory_0, vectory_1, factor_v);\n      speedModifier0 = mix(speedModifier0, speedModifier1, factor_v);\n    }\n    vec4 velocityTrack = vec4(velocityAnim, 0.);\n    if (u_velocity_space == 0) {\n      velocityTrack = rotateQuat(velocityTrack, u_worldRot);\n    }\n    velocity.xyz += velocityTrack.xyz;\n    velocity.xyz *= speedModifier0;\n  #endif\n  pos.xyz += velocity.xyz * normalizedTime * a_dir_life.w;\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = rotateQuat(velocity, u_worldRot);\n    #endif\n  #endif\n  #if !CC_INSTANCE_PARTICLE\n    vec3 startRotation = a_rotation_uv.xyz;\n  #endif\n  #if CC_INSTANCE_PARTICLE\n    vec3 startRotation = a_rotation;\n  #endif\n  #if CC_RENDER_MODE != 4\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = startRotation.xyz;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #endif\n    #if CC_RENDER_MODE != 0 && CC_RENDER_MODE != 1\n      vec3 rotEuler = vec3(0., 0., startRotation.z);\n    #endif\n    vec4 rot = quaternionFromEuler(rotEuler);\n  #endif\n  #if CC_RENDER_MODE == 4\n    vec4 rot = quaternionFromEuler(startRotation);\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    if (u_rotation_mode == 1) {\n      vec3 euler = unpackCurveData(rotation_over_time_tex0, timeCoord0) * normalizedTime * a_dir_life.w;\n      vec4 quat = eulerToQuat(euler);\n      mat3 mLocal = quatToMat3(quat);\n      mat3 mStart = quatToMat3(rot);\n      rot = mat3ToQuat(mStart * mLocal);\n    } else {\n      vec3 rotation_0 = unpackCurveData(rotation_over_time_tex0, timeCoord0);\n      vec3 rotation_1 = unpackCurveData(rotation_over_time_tex0, timeCoord1);\n      float factor_r = pseudoRandom(a_rndSeed + 125292.);\n      vec3 euler = mix(rotation_0, rotation_1, factor_r) * normalizedTime * a_dir_life.w;\n      #if CC_RENDER_MODE == 3 || CC_RENDER_MODE == 2\n        euler = vec3(0.0, 0.0, euler.z);\n      #endif\n      vec4 quat = eulerToQuat(euler);\n      mat3 mLocal = quatToMat3(quat);\n      mat3 mStart = quatToMat3(rot);\n      rot = mat3ToQuat(mStart * mLocal);\n    }\n  #endif\n  #if COLOR_OVER_TIME_MODULE_ENABLE\n    if (u_color_mode == 1) {\n      color = a_color * texture2D(color_over_time_tex0, timeCoord0);\n    } else {\n      vec4 color_0 = texture2D(color_over_time_tex0, timeCoord0);\n      vec4 color_1 = texture2D(color_over_time_tex0, timeCoord1);\n      float factor_c = pseudoRandom(a_rndSeed + 91041.);\n      color = a_color * mix(color_0, color_1, factor_c);\n    }\n  #endif\n  #if !COLOR_OVER_TIME_MODULE_ENABLE\n    color = a_color;\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((vertIdx - 0.5));\n    #if CC_RENDER_MODE == 1\n      rot = vec4(0.0, 0.0, 0.0, 1.0);\n    #endif\n    computeVertPos(pos, cornerOffset, rot, compScale\n      #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n        , cc_matViewInv\n      #endif\n      #if CC_RENDER_MODE == 1\n        , cc_cameraPos.xyz\n        , velocity\n        , frameTile_velLenScale.z\n        , frameTile_velLenScale.w\n        #if !CC_INSTANCE_PARTICLE\n          , a_size_uv.w\n        #endif\n        #if CC_INSTANCE_PARTICLE\n          , a_uv.x\n        #endif\n      #endif\n    );\n  #endif\n  #if CC_RENDER_MODE == 4\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color *= a_color1;\n  #endif\n  pos = cc_matViewProj * pos;\n  float frameIndex = 0.;\n  #if TEXTURE_ANIMATION_MODULE_ENABLE\n    float startFrame = 0.;\n    vec3 frameInfo = vec3(0.);\n    if (int(u_anim_info.x) == 1) {\n      frameInfo = unpackCurveData(texture_animation_tex0, timeCoord0);\n    } else {\n      vec3 frameInfo0 = unpackCurveData(texture_animation_tex0, timeCoord0);\n      vec3 frameInfo1 = unpackCurveData(texture_animation_tex0, timeCoord1);\n      float factor_t = pseudoRandom(a_rndSeed + 90794.);\n      frameInfo = mix(frameInfo0, frameInfo1, factor_t);\n    }\n    startFrame = frameInfo.x / u_anim_info.y;\n    float EPSILON = 1e-6;\n    frameIndex = repeat(u_anim_info.z * (frameInfo.y + startFrame), 1. + EPSILON);\n  #endif\n  uv = computeUV(frameIndex, vertIdx, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  return pos;\n}\nvoid main() { gl_Position = gpvs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture2D(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = premultiplied(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":71,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":42}},"defines":[{"name":"CC_RENDER_MODE","type":"number","range":[0,4]},{"name":"CC_INSTANCE_PARTICLE","type":"boolean"},{"name":"USE_VK_SHADER","type":"boolean"},{"name":"COLOR_OVER_TIME_MODULE_ENABLE","type":"boolean"},{"name":"ROTATION_OVER_TIME_MODULE_ENABLE","type":"boolean"},{"name":"SIZE_OVER_TIME_MODULE_ENABLE","type":"boolean"},{"name":"FORCE_OVER_TIME_MODULE_ENABLE","type":"boolean"},{"name":"VELOCITY_OVER_TIME_MODULE_ENABLE","type":"boolean"},{"name":"TEXTURE_ANIMATION_MODULE_ENABLE","type":"boolean"},{"name":"CC_USE_WORLD_SPACE","type":"boolean"}]}],[{"name":"add","passes":[{"program":"particles/builtin-particle-gpu|builtin/internal/particle-vs-gpu:gpvs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5]}}},{"phase":"deferred-forward","propertyIndex":0,"program":"particles/builtin-particle-gpu|builtin/internal/particle-vs-gpu:gpvs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false}}]},{"name":"alpha-blend","passes":[{"program":"particles/builtin-particle-gpu|builtin/internal/particle-vs-gpu:gpvs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":0,"blendDstAlpha":1,"blendAlphaEq":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5]}}},{"phase":"deferred-forward","propertyIndex":0,"program":"particles/builtin-particle-gpu|builtin/internal/particle-vs-gpu:gpvs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":0,"blendDstAlpha":1,"blendAlphaEq":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false}}]},{"name":"add-multiply","passes":[{"program":"particles/builtin-particle-gpu|builtin/internal/particle-vs-gpu:gpvs_main|tinted-fs:multiply","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":7,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":3}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5]}}},{"phase":"deferred-forward","propertyIndex":0,"program":"particles/builtin-particle-gpu|builtin/internal/particle-vs-gpu:gpvs_main|tinted-fs:multiply","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":7,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":3}]},"depthStencilState":{"depthTest":true,"depthWrite":false}}]},{"name":"add-smooth","passes":[{"program":"particles/builtin-particle-gpu|builtin/internal/particle-vs-gpu:gpvs_main|no-tint-fs:addSmooth","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]}}},{"phase":"deferred-forward","propertyIndex":0,"program":"particles/builtin-particle-gpu|builtin/internal/particle-vs-gpu:gpvs_main|no-tint-fs:addSmooth","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false}}]},{"name":"premultiply-blend","passes":[{"program":"particles/builtin-particle-gpu|builtin/internal/particle-vs-gpu:gpvs_main|no-tint-fs:premultiplied","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":0,"blendDstAlpha":1,"blendAlphaEq":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]}}},{"phase":"deferred-forward","propertyIndex":0,"program":"particles/builtin-particle-gpu|builtin/internal/particle-vs-gpu:gpvs_main|no-tint-fs:premultiplied","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":0,"blendDstAlpha":1,"blendAlphaEq":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false}}]}]]],0,0,[],[],[]],[[[14,"LockedEverydayCard"],[27,"LockedEverydayCard",33554432,[-6],[[5,-2,[0,"99zJYJaqNEK59bXCjVebaG"],[5,232,320]],[23,-3,[0,"a9rLh0PnZE1JGmt8963/FI"],0],[68,-5,[0,"b6vrw+gSVJ0oSdbYiQNn8o"],-4]],[2,"34DZqjdKBL2rR5MmAcBF3G",null,null,null,-1,0],[1,15.27800000000002,22.09699999999998,0],[1,0.6,0.6,1]],[39,"DayNumber",33554432,1,[-8],[[28,-7,[0,"87vv77BPNLm7Hn2ljS7qpo"]]],[2,"3eRLk07b5FyLMBkQZt3f7t",null,null,null,1,0]],[20,"CardDay",33554432,2,[[[5,-9,[0,"d20h10UuhICKpuLBGfAV0H"],[5,33.369140625,75.6]],-10],4,1],[2,"f4a1O8UydBgonnlkl8lZXW",null,null,null,1,0],[1,-2.0929999999997335,0.6210000000000946,0]],[37,"1",60,60,60,3,[0,"07sV10ZjdIa5joUqy0w0ga"],[4,4288453788]]],0,[0,3,1,0,0,1,0,0,1,0,17,4,0,0,1,0,-1,2,0,0,2,0,-1,3,0,0,3,0,-2,4,0,4,1,10],[0],[1],[124]],[[{"name":"default_progressbar_bg","rect":{"x":0,"y":0,"width":60,"height":15},"offset":{"x":0,"y":0},"originalSize":{"width":60,"height":15},"rotated":false,"capInsets":[10,4,10,4],"vertices":{"rawPosition":[-30,-7.5,0,30,-7.5,0,-30,7.5,0,30,7.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,15,60,15,0,0,60,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-30,"y":-7.5,"z":0},"maxPos":{"x":30,"y":7.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[4],0,[0],[6],[125]],[[{"name":"default_scrollbar_vertical","rect":{"x":0,"y":0,"width":15,"height":30},"offset":{"x":0,"y":0},"originalSize":{"width":15,"height":30},"rotated":false,"capInsets":[4,10,4,10],"vertices":{"rawPosition":[-7.5,-15,0,7.5,-15,0,-7.5,15,0,7.5,15,0],"indexes":[0,1,2,2,1,3],"uv":[0,30,15,30,0,0,15,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-7.5,"y":-15,"z":0},"maxPos":{"x":7.5,"y":15,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[4],0,[0],[6],[126]],[[{"name":"default_panel","rect":{"x":0,"y":0,"width":20,"height":20},"offset":{"x":0,"y":0},"originalSize":{"width":20,"height":20},"rotated":false,"capInsets":[8,8,8,8],"vertices":{"rawPosition":[-10,-10,0,10,-10,0,-10,10,0,10,10,0],"indexes":[0,1,2,2,1,3],"uv":[0,20,20,20,0,0,20,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-10,"y":-10,"z":0},"maxPos":{"x":10,"y":10,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[4],0,[0],[6],[127]],[[[88,"default-particle-material",[{}],[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}]]],0,0,[0],[36],[128]],[[[188,"Lion_Kid 2","\nLion_Kid 2.png\nsize: 1024,1024\nformat: RGBA8888\nfilter: Linear,Linear\nrepeat: none\nBack Paw 1\n  rotate: false\n  xy: 406, 33\n  size: 125, 128\n  orig: 129, 128\n  offset: 0, 0\n  index: -1\nBack Paw 2\n  rotate: 180\n  xy: 243, 326\n  size: 122, 134\n  orig: 137, 137\n  offset: 15, 3\n  index: -1\nBody\n  rotate: 270\n  xy: 359, 254\n  size: 356, 366\n  orig: 367, 377\n  offset: 5, 5\n  index: -1\nClose Eye 1\n  rotate: false\n  xy: 243, 460\n  size: 99, 79\n  orig: 101, 86\n  offset: 1, 5\n  index: -1\nClose Eye 2\n  rotate: false\n  xy: 1, 819\n  size: 99, 72\n  orig: 101, 86\n  offset: 1, 13\n  index: -1\nEar 1\n  rotate: true\n  xy: 221, 101\n  size: 208, 238\n  orig: 216, 254\n  offset: 8, 9\n  index: -1\nEar 2\n  rotate: true\n  xy: 1, 32\n  size: 194, 232\n  orig: 209, 244\n  offset: 1, 4\n  index: -1\nEye 1\n  rotate: false\n  xy: 719, 442\n  size: 104, 94\n  orig: 111, 101\n  offset: 4, 2\n  index: -1\nEye 2\n  rotate: false\n  xy: 457, 160\n  size: 97, 89\n  orig: 107, 97\n  offset: 5, 4\n  index: -1\nFace\n  rotate: 180\n  xy: 558, 536\n  size: 447, 431\n  orig: 490, 433\n  offset: 43, 0\n  index: -1\nNewYear\n  rotate: false\n  xy: 1, 536\n  size: 628, 470\n  orig: 630, 470\n  offset: 2, 0\n  index: -1\nPaw 1\n  rotate: false\n  xy: 552, 35\n  size: 136, 252\n  orig: 138, 252\n  offset: 0, 0\n  index: -1\nPaw 2\n  rotate: 270\n  xy: 1, 873\n  size: 133, 235\n  orig: 133, 244\n  offset: 0, 0\n  index: -1\nShadow 1\n  rotate: false\n  xy: 1, 257\n  size: 243, 281\n  orig: 243, 281\n  offset: 0, 0\n  index: -1\nShadow 2\n  rotate: true\n  xy: 724, 260\n  size: 164, 281\n  orig: 164, 281\n  offset: 0, 0\n  index: -1\nTail\n  rotate: false\n  xy: 686, 59\n  size: 236, 213\n  orig: 261, 230\n  offset: 20, 11\n  index: -1\n",["Lion_Kid 2.png"],{"skeleton":{"hash":"/P8PtJ9Hg3zMWP42zwy2qSmhOU8","spine":"3.8.75","x":-916.07,"y":-72.13,"width":2309.29,"height":2592.22,"images":"../../Ассеты/images/","audio":"C:/Users/User/Desktop/Анимация Лев Развитие/Ассеты"},"bones":[{"name":"root","shearX":0.05},{"name":"bone","parent":"root","x":0.56,"y":97.15},{"name":"bone2","parent":"bone","length":431.74,"rotation":89.06,"x":-0.45,"y":-4.18},{"name":"bone3","parent":"bone2","length":328.02,"rotation":0.81,"x":428.94,"y":2.3},{"name":"bone4","parent":"bone3","length":185.84,"rotation":-0.33,"x":324.27,"y":-0.59,"transform":"noScale"},{"name":"bone5","parent":"bone3","length":156.05,"rotation":-89.48,"x":163.98,"y":-102.49,"transform":"noScale"},{"name":"bone8","parent":"bone3","length":178.43,"rotation":90.12,"x":164.79,"y":89.09,"transform":"noScale"},{"name":"bone11","parent":"bone2","length":187.21,"rotation":-57.4,"x":243.29,"y":-387.99},{"name":"bone12","parent":"bone11","length":179.4,"rotation":11.56,"x":187.21},{"name":"bone13","parent":"bone12","length":137.69,"rotation":14.15,"x":177.45,"y":-0.37},{"name":"bone14","parent":"bone13","length":155.68,"rotation":10.25,"x":137.69},{"name":"bone15","parent":"bone14","length":178.24,"rotation":6.96,"x":155.3,"y":2.19},{"name":"bone44","parent":"bone4","x":312.32,"y":13.49},{"name":"bone16","parent":"bone44","length":150.3,"rotation":-45.45,"x":514.55,"y":-580.32},{"name":"bone17","parent":"bone16","length":199.57,"rotation":26.16,"x":150.3},{"name":"bone18","parent":"bone44","length":144.6,"rotation":60.77,"x":476.81,"y":574.19},{"name":"bone19","parent":"bone18","length":187.42,"rotation":-24.35,"x":144.6},{"name":"bone22","parent":"bone2","length":200.51,"rotation":35.06,"x":-83.94,"y":449.3},{"name":"bone23","parent":"bone22","length":192.62,"rotation":26.47,"x":200.51},{"name":"bone24","parent":"bone2","length":203.99,"rotation":-31.91,"x":-71.9,"y":-391.35},{"name":"bone25","parent":"bone24","length":190.16,"rotation":-24.8,"x":203.99},{"name":"bone34","parent":"bone4","x":784.46,"y":-41.4,"color":"00ffffff"},{"name":"bone20","parent":"bone44","x":113.52,"y":-353.18},{"name":"bone21","parent":"bone34","x":-61.97,"y":-331.3},{"name":"bone30","parent":"bone34","x":-69.97,"y":386.52},{"name":"bone33","parent":"bone44","x":86.36,"y":337.99},{"name":"bone36","parent":"bone44","x":688.27,"y":-4.38,"color":"00ffffff"},{"name":"bone39","parent":"bone36","x":2.51,"y":-354.81},{"name":"bone26","parent":"bone39","x":-145.94,"y":150.36},{"name":"bone27","parent":"bone39","x":-116.73,"y":2.15},{"name":"bone28","parent":"bone39","x":-235.91,"y":-127.1},{"name":"bone35","parent":"bone36","x":-68.95,"y":377.25},{"name":"bone29","parent":"bone35","x":-122.36,"y":-140.65},{"name":"bone31","parent":"bone35","x":-109,"y":-1.65},{"name":"bone32","parent":"bone35","x":-213.9,"y":110.29},{"name":"bone41","parent":"bone4","x":550.32,"y":-1.89},{"name":"bone42","parent":"bone41","x":-224.08,"y":-510.49},{"name":"bone43","parent":"bone41","x":-236.69,"y":502.39},{"name":"bone45","parent":"bone44","x":256.25,"y":-373.04},{"name":"bone46","parent":"bone44","x":232.3,"y":334.24},{"name":"bone9","parent":"bone8","length":315.5,"rotation":77.9,"x":175.31,"y":-2.25},{"name":"bone10","parent":"bone9","length":227.11,"rotation":33.31,"x":315.5},{"name":"bone38","parent":"bone10","length":218.78,"rotation":-134.61,"x":227.11,"transform":"noRotationOrReflection"},{"name":"Левая Лапа","parent":"bone2","rotation":-89.01,"x":71.65,"y":230.76,"color":"ff3f00ff"},{"name":"bone6","parent":"bone5","length":333.1,"rotation":-83.31,"x":155.4,"y":2.95},{"name":"bone7","parent":"bone6","length":210.53,"rotation":-33.99,"x":333.1},{"name":"bone37","parent":"bone7","length":208.64,"rotation":-52.04,"x":210.53,"transform":"noRotationOrReflection"},{"name":"Правая Лапа","parent":"bone2","rotation":-89.01,"x":81.74,"y":-204.1,"color":"ff3f00ff"},{"name":"bone40","parent":"bone37","rotation":141.1,"x":140.5,"y":-61.37},{"name":"bone47","parent":"bone38","rotation":-136.33,"x":146.16,"y":43.91},{"name":"bone48","parent":"bone4","x":548.07,"y":-292.83},{"name":"bone49","parent":"bone4","x":528.7,"y":300.15},{"name":"bone50","parent":"bone4","length":404.75,"rotation":-29.15,"x":952.3,"y":-142.1},{"name":"bone51","parent":"bone50","length":321.53,"rotation":-42.26,"x":405.67,"y":-1.61},{"name":"bone52","parent":"bone51","length":299.05,"rotation":-43.73,"x":321.53},{"name":"bone53","parent":"bone52","length":280.85,"rotation":-34.41,"x":304.83,"y":0.94},{"name":"bone54","parent":"bone53","length":259.58,"rotation":-20.54,"x":284.12,"y":-1.73},{"name":"bone55","parent":"bone54","length":311.33,"rotation":-5.33,"x":259.58}],"slots":[{"name":"Tail","bone":"root","attachment":"Tail"},{"name":"Body","bone":"root","attachment":"Body"},{"name":"Ear 2","bone":"root","attachment":"Ear 2"},{"name":"Ear 1","bone":"root","attachment":"Ear 1"},{"name":"Shadow 1","bone":"root","attachment":"Shadow 1"},{"name":"Eye 2","bone":"root","attachment":"Eye 2"},{"name":"Eye 1","bone":"root","attachment":"Eye 1"},{"name":"Face","bone":"root","attachment":"Face"},{"name":"Close Eye 1","bone":"root","attachment":"Close Eye 1"},{"name":"Back Paw 2","bone":"root","attachment":"Back Paw 2"},{"name":"Back Paw 1","bone":"root","attachment":"Back Paw 1"},{"name":"Shadow 2","bone":"root"},{"name":"Paw 2","bone":"root","attachment":"Paw 2"},{"name":"Paw 1","bone":"root","attachment":"Paw 1"},{"name":"Close Eye 2","bone":"root","attachment":"Close Eye 2"},{"name":"NewYear","bone":"root","attachment":"NewYear"}],"ik":[{"name":"Левая Лапа","target":"Левая Лапа","bones":["bone9","bone10"]},{"name":"Правая Лапа","order":1,"target":"Правая Лапа","bendPositive":false,"bones":["bone6","bone7"]}],"skins":[{"name":"default","attachments":{"Body":{"Body":{"type":"mesh","hull":33,"width":1222,"height":1257,"uvs":[0.4769,0.01624,0.35843,0.03527,0.24375,0.10068,0.18452,0.17322,0.15428,0.23505,0.14167,0.30522,0.14167,0.3956,0.10135,0.4396,0.05094,0.50143,0.02573,0.56803,0.01439,0.6703,0.03618,0.73507,0.0396,0.74522,0.08622,0.80705,0.16058,0.87722,0.25005,0.9343,0.35969,0.96997,0.46303,0.98424,0.55881,0.98305,0.65459,0.95808,0.72138,0.91527,0.78061,0.88316,0.86883,0.82251,0.93562,0.74878,0.98351,0.65722,0.97973,0.54068,0.92302,0.45505,0.85244,0.42176,0.84614,0.32068,0.82976,0.2077,0.79069,0.1197,0.70248,0.04241,0.59662,0.01981],"triangles":[2,1,0,2,0,32,2,32,31,3,29,4,3,2,29,30,2,31,30,29,2,5,28,6,4,28,5,29,28,4,6,28,27,27,8,7,27,7,6,26,8,27,9,8,26,9,26,25,24,10,9,24,9,25,23,11,10,11,13,12,10,24,23,11,22,13,23,22,11,21,14,13,22,21,13,20,14,21,15,14,20,20,16,15,19,16,20,19,17,16,18,17,19],"vertices":[1,3,712.52,0.02,1,1,3,689.13,144.99,1,2,2,1028.88,297.15,0.00009,3,605.64,285.85,0.99991,2,2,934.47,368.06,0.00714,3,512.35,359.05,0.99286,2,2,854.33,403.89,0.02515,3,432.62,396.74,0.97485,2,2,763.75,418.19,0.06783,3,341.96,413.01,0.93217,2,2,647.98,417.99,0.68447,3,225.64,415.3,0.31553,2,2,590.66,466.89,0.856,3,169.09,465.62,0.144,2,2,509.95,527.72,0.95003,3,89.31,528.39,0.04997,2,2,423.37,557.5,0.96538,3,2.98,560.11,0.03462,1,2,286.54,556.09,1,1,2,187.77,516.69,1,1,2,121.52,481.99,1,1,2,72.29,444.36,1,1,2,-29.71,336.53,1,2,2,-47.56,277.71,0.98883,3,-475.76,289.01,0.01117,1,2,-92.14,143.2,1,1,2,-109.09,16.7,1,1,2,-106.13,-100.31,1,2,2,-72.36,-216.95,0.99559,3,-511.01,-207.19,0.00441,2,2,-15.89,-297.87,0.97463,3,-456,-289.63,0.02537,1,2,26.52,-369.76,1,1,2,106.36,-476.59,1,1,2,202.83,-557.05,1,2,2,322.18,-613.78,0.8559,3,-123.16,-613.93,0.1441,2,2,472.9,-606.84,0.65476,3,28.3,-610.12,0.34524,2,2,582.64,-535.94,0.48669,3,139.97,-541.24,0.51331,2,2,624.65,-449.47,0.54437,3,183.98,-455.29,0.45563,2,2,754.69,-439.6,0.2095,3,314.73,-448.14,0.7905,2,2,899.84,-417.53,0.02466,3,460.93,-429.07,0.97534,2,2,1012.66,-368.55,0.00407,3,575.25,-382.28,0.99593,1,3,676.27,-275.34,1,1,3,706.64,-146.23,1],"edges":[0,2,2,4,4,6,6,8,8,10,10,12,12,14,14,16,16,18,18,20,24,26,26,28,28,30,30,32,32,34,34,36,36,38,38,40,40,42,42,44,44,46,46,48,48,50,50,52,52,54,54,56,56,58,58,60,60,62,62,64,0,64,8,58,62,4,16,52,50,18,20,48,20,22,22,24,46,22,26,44,42,28,30,40,38,32]}},"Ear 1":{"Ear 1":{"type":"mesh","hull":17,"width":720,"height":845,"uvs":[0.59159,0.95112,0.39409,0.96121,0.21437,0.88885,0.09784,0.74918,0.04057,0.57921,0.04254,0.40756,0.10377,0.27798,0.22424,0.1484,0.37632,0.05753,0.56592,0.02892,0.75552,0.03902,0.88389,0.10297,0.97869,0.20898,1,0.30827,1,0.48161,0.85822,0.78788,0.74959,0.87876,0.17487,0.33352,0.48494,0.54219,0.75552,0.64147],"triangles":[17,4,5,4,17,18,18,17,8,17,7,8,5,6,17,17,6,7,0,1,18,19,16,0,18,1,2,2,3,18,16,19,15,19,0,18,15,19,14,3,4,18,19,18,13,14,19,13,10,11,13,10,13,9,18,9,13,18,8,9,13,11,12],"vertices":[2,15,-212.85,271.12,0.99981,16,-437.43,99.62,0.00019,2,15,-92.32,347.06,0.97792,16,-358.94,218.5,0.02208,2,15,50.54,355.76,0.88768,16,-232.38,285.33,0.11232,2,15,180.9,292.71,0.66126,16,-87.62,281.64,0.33874,2,15,286.19,186.68,0.24532,16,52.02,228.45,0.75468,2,15,354.77,58.87,0.00481,16,167.2,140.29,0.99519,1,16,228.35,39.33,1,2,15,345.54,-196.05,0.10894,16,263.9,-95.76,0.89106,2,15,286.54,-316.07,0.335,16,259.63,-229.43,0.665,2,15,178.53,-402.98,0.57307,16,197.07,-353.14,0.42693,2,15,54.77,-461.23,0.74942,16,108.33,-457.23,0.25058,2,15,-52.26,-458.37,0.83929,16,9.65,-498.76,0.16071,2,15,-155.21,-412.71,0.9091,16,-102.98,-499.61,0.0909,2,15,-209.05,-346.56,0.94798,16,-179.3,-461.54,0.05202,2,15,-279.57,-218.18,0.99277,16,-296.47,-373.66,0.00723,1,15,-314.7,57.8,1,1,15,-283.12,162.75,1,1,16,160.09,26.53,1,1,15,20.82,5.22,1,1,15,-190.32,-15.03,1],"edges":[0,2,2,4,4,6,6,8,8,10,10,12,12,14,14,16,16,18,18,20,20,22,22,24,24,26,26,28,28,30,30,32,0,32]}},"Ear 2":{"Ear 2":{"type":"mesh","hull":19,"width":695,"height":812,"uvs":[0.50746,0.98069,0.66705,0.93516,0.77754,0.81082,0.85324,0.69349,0.91462,0.5779,0.93508,0.44831,0.91667,0.32923,0.86961,0.19964,0.798,0.10157,0.63432,0.03327,0.4645,0.03152,0.31718,0.06479,0.19237,0.1401,0.11258,0.22591,0.04301,0.34849,0.01027,0.48334,0.00823,0.6427,0.05733,0.79681,0.17191,0.90889,0.66296,0.16637,0.53815,0.45707,0.39902,0.82483],"triangles":[18,21,0,0,21,1,1,21,2,18,17,21,2,21,20,20,21,16,2,20,3,21,17,16,20,16,15,3,20,6,5,4,3,15,14,20,14,13,20,13,12,20,12,11,20,20,11,19,19,6,20,5,3,6,7,6,19,19,8,7,19,10,9,10,19,11,19,9,8],"vertices":[1,13,-206.1,-285.4,1,1,13,-95.45,-323.17,1,2,14,-238.4,-205.27,0.00196,13,26.8,-289.34,0.99804,2,14,-129.66,-209.72,0.06906,13,126.37,-245.4,0.93094,2,14,-26.64,-205.9,0.31967,13,217.16,-196.56,0.68033,2,14,73.84,-171.56,0.72901,13,292.21,-121.44,0.27099,2,14,154.61,-116.87,0.97285,13,340.59,-36.75,0.02715,1,14,234.1,-40.56,1,2,14,283.07,39.57,0.97299,13,386.93,160.3,0.02701,2,14,281.79,166.12,0.82276,13,330.01,273.33,0.17724,2,14,230.28,272.32,0.60506,13,236.95,345.95,0.39494,2,14,160.33,351.82,0.40906,13,139.12,386.47,0.59094,2,14,66.85,402.06,0.24294,13,33.06,390.35,0.75706,2,14,-20.28,420.5,0.13528,13,-53.27,368.5,0.86472,2,14,-130.93,419.23,0.04543,13,-152.03,318.58,0.95457,2,14,-239.04,390.61,0.00654,13,-236.45,245.23,0.99346,1,13,-315.96,143.13,1,1,13,-364.6,22.88,1,1,13,-356.35,-97.76,1,2,14,194.03,99.98,0.87787,13,280.39,175.28,0.12213,2,14,-55.89,72,0.01157,13,68.39,39.99,0.98843,1,13,-189.42,-139.05,1],"edges":[0,2,2,4,4,6,6,8,8,10,10,12,12,14,14,16,16,18,18,20,20,22,22,24,24,26,26,28,28,30,30,32,32,34,34,36,0,36]}},"Shadow 1":{"Shadow 1":{"type":"mesh","hull":4,"width":809,"height":935,"uvs":[1,1,0,1,0,0,1,0],"triangles":[1,2,3,1,3,0],"vertices":[508.16,-71.89,-300.84,-71.89,-300.84,863.11,508.16,863.11],"edges":[0,2,2,4,4,6,0,6]}},"Shadow 2":{"Shadow 2":{"type":"mesh","hull":4,"width":545,"height":935,"uvs":[1,1,0,1,0,0,1,0],"triangles":[1,2,3,1,3,0],"vertices":[518.47,-20.93,-26.53,-20.93,-26.53,914.07,518.47,914.07],"edges":[0,2,2,4,4,6,0,6]}},"Paw 1":{"Paw 1":{"type":"mesh","hull":22,"width":459,"height":839,"uvs":[0.57143,1,0.41683,1,0.26224,1,0.08386,1,0,0.94068,0,0.82647,0.14134,0.73817,0.13936,0.60512,0.13341,0.54743,0.10566,0.48385,0.04224,0.31313,0.0581,0.09061,0.1235,0.00231,0.54764,0.00701,0.78746,0.14006,0.98368,0.24367,0.98764,0.47326,0.98566,0.53684,0.98169,0.59571,0.97575,0.76172,0.96584,0.92066,0.84097,0.97953,0.22912,0.95531,0.21107,0.84687,0.27266,0.74738,0.42381,0.73153,0.56423,0.74509,0.69022,0.73442,0.81895,0.75294,0.91155,0.84153,0.57918,0.82983,0.57886,0.9727,0.86787,0.70171],"triangles":[21,29,20,0,31,21,31,30,21,30,31,1,1,2,22,3,4,22,4,23,22,4,5,23,20,29,19,21,30,29,30,27,28,30,25,26,25,24,7,25,23,24,24,6,7,23,6,24,5,6,23,23,30,1,25,30,23,26,25,27,30,26,27,8,27,25,32,27,8,28,27,32,19,32,18,28,32,19,29,28,19,30,28,29,23,1,22,3,22,2,0,1,31,14,10,13,13,11,12,13,10,11,9,10,14,14,15,16,14,16,9,9,16,8,17,8,16,17,32,8,8,25,7,17,18,32],"vertices":[1,49,-74.04,-79.05,1,2,42,194.65,98.44,0.024,49,-72.73,-5.97,0.976,1,49,-71.41,67.11,1,2,42,301.37,-17.29,0.008,49,-69.9,151.43,0.992,1,49,-21.98,190.23,1,1,49,68.89,188.6,1,1,49,136.57,120.53,1,3,42,52.37,-211.04,0.14601,41,56.92,-135.16,0.83322,40,437.23,-81.6,0.02077,3,42,20.41,-244.22,0.04885,41,13.5,-119.9,0.79953,40,392.6,-92.68,0.15163,3,42,-8.01,-288.09,0.00842,41,-38.16,-112.28,0.4931,40,345.27,-114.67,0.49848,2,41,-174.66,-87.14,0.00411,40,217.48,-168.59,0.99589,1,40,42.53,-193.42,1,1,40,-32.01,-175.9,1,1,40,-64.97,21.3,1,2,41,-165.38,290.25,0.05251,40,18.1,151.68,0.94749,2,41,-53.76,343.79,0.185,40,81.94,257.65,0.815,3,42,-296.93,12.71,0.01319,41,115.23,275.12,0.56376,40,260.76,293.05,0.42305,3,42,-259.09,46.39,0.04827,41,161.54,254.71,0.66287,40,310.64,301.43,0.28886,3,42,-223.32,76.82,0.11828,41,204.04,234.85,0.69929,40,357.03,308.16,0.18242,1,49,113.31,-273.7,1,2,42,-27.77,246.47,0.024,49,-14.25,-266.62,0.976,2,42,46.72,234.81,0.008,49,-60.04,-206.76,0.992,1,49,-35.81,82.13,1,1,49,50.06,89.12,1,1,49,128.55,58.56,1,1,49,140.82,-12.88,1,1,49,129.11,-79.15,1,1,49,137.21,-138.73,1,1,49,121.44,-199.49,1,1,49,49.66,-242.07,1,1,49,61.54,-85.04,1,1,49,-52.34,-82.93,1,1,49,163.2,-222.69,1],"edges":[0,2,2,4,4,6,6,8,8,10,10,12,12,14,14,16,16,18,18,20,20,22,22,24,24,26,26,28,28,30,30,32,32,34,34,36,36,38,38,40,40,42,0,42]}},"Paw 2":{"Paw 2":{"type":"mesh","hull":30,"width":442,"height":813,"uvs":[0.96356,0.97983,0.8258,1,0.69272,1,0.51293,1,0.34249,1,0.16504,1,0.0553,0.97729,0,0.91129,0,0.8402,0.00394,0.74881,0.07632,0.67391,0.11127,0.62178,0.16738,0.53809,0.19072,0.48478,0.2094,0.42512,0.2491,0.28041,0.31914,0.16109,0.47791,0.08619,0.78611,0.03923,0.94488,0.03796,0.99858,0.14205,1,0.30326,0.90285,0.46827,0.87483,0.52032,0.83981,0.58379,0.8188,0.68534,0.84681,0.74627,0.95655,0.78689,1,0.85289,0.99624,0.93413,0.43112,0.96327,0.4118,0.84543,0.4174,0.74756,0.73293,0.74661,0.81028,0.85049,0.78744,0.97934,0.19907,0.74822,0.08044,0.83572],"triangles":[7,31,29,34,31,27,8,9,37,8,37,31,37,9,36,27,37,33,27,33,26,33,25,26,37,36,32,12,33,32,32,36,11,37,32,33,34,27,28,31,37,27,7,8,31,29,34,28,31,34,29,21,17,20,20,18,19,20,17,18,21,16,17,21,15,16,22,15,21,14,15,22,23,14,22,13,14,23,24,13,23,12,13,24,24,33,12,12,32,11,24,25,33,11,36,10,9,10,36,30,7,29,6,7,30,35,30,29,6,30,35,0,35,29,4,5,6,6,3,4,35,3,6,2,3,35,1,35,0,2,35,1],"vertices":[1,46,298.05,50.27,1,1,46,272.61,-7.46,1,1,46,235.71,-53.28,1,1,46,185.86,-115.18,1,1,46,138.6,-173.86,1,1,46,89.4,-234.95,1,1,46,44.6,-261.13,1,2,46,-12.5,-246.47,0.68,48,3.03,240.14,0.32,1,48,60.83,240.15,1,3,46,-114.24,-162.17,0.80676,45,309.36,-171.99,0.19285,44,493.44,-315.59,0.00039,3,46,-141.53,-98.98,0.27731,45,240.56,-170.08,0.70492,44,437.46,-275.54,0.01777,3,46,-164.89,-60.3,0.17309,45,195.63,-174.94,0.7369,44,398.85,-254.07,0.09001,3,46,-202.14,1.68,0.00577,45,123.73,-182.56,0.78825,44,333.61,-220.55,0.20598,2,45,80.31,-192.39,0.62898,44,292.11,-204.43,0.37102,2,45,33.17,-206.37,0.41768,44,245.2,-189.66,0.58232,2,45,-80.18,-242.51,0.07349,44,131,-156.24,0.92651,2,45,-180.94,-257.46,0.00357,44,39.1,-112.3,0.99643,1,44,-11.69,-34.44,1,1,44,-31.06,105.73,1,1,44,-22.58,175.42,1,1,44,64.48,187.41,1,1,44,194.45,170.15,1,2,45,-70.62,84.09,0.16065,44,321.56,109.21,0.83935,3,46,-17.25,254.15,0.00464,45,-27.17,91.58,0.47276,44,361.77,91.14,0.5226,3,46,13.15,209.71,0.04903,45,25.94,100.39,0.82874,44,410.74,68.74,0.12223,2,46,71.52,150.71,0.36949,45,104.06,128.43,0.63051,1,48,137.25,-134.18,1,2,46,174,146.35,0.24,48,104.22,-182.7,0.76,1,48,50.56,-201.91,1,2,46,278.19,84.84,0.696,48,-15.5,-200.26,0.304,2,46,139.93,-124.59,0.672,48,-39.21,49.56,0.328,1,48,56.6,58.11,1,1,48,136.18,55.64,1,1,48,136.96,-83.84,1,1,48,52.5,-118.04,1,2,46,248.9,-10.12,0.672,48,-52.27,-107.96,0.328,1,48,135.63,152.15,1,1,48,64.48,204.59,1],"edges":[0,2,2,4,4,6,6,8,8,10,10,12,12,14,14,16,16,18,18,20,24,26,26,28,28,30,30,32,32,34,34,36,36,38,38,40,40,42,42,44,44,46,46,48,48,50,50,52,52,54,54,56,56,58,0,58,58,14,16,62,52,66,66,64,56,68,68,62,0,70,70,12,18,72,72,64,16,74,74,54,20,22,22,24]}},"Close Eye 1":{"Close Eye 1":{"type":"mesh","hull":35,"width":336,"height":288,"uvs":[0.94582,0.70814,0.98217,0.59337,0.96267,0.46866,0.93272,0.34632,0.87979,0.23259,0.80615,0.14669,0.72536,0.08944,0.61811,0.04944,0.50669,0.03768,0.40083,0.05493,0.2887,0.10356,0.20235,0.17414,0.13827,0.26512,0.08813,0.36473,0.0561,0.45178,0.0366,0.52786,0.01672,0.63884,0.01255,0.72589,0.01533,0.8255,0.03553,0.93843,0.07801,0.54237,0.10169,0.46629,0.13651,0.38786,0.19222,0.30237,0.26187,0.23414,0.33499,0.19179,0.42762,0.16591,0.51188,0.1612,0.61496,0.18081,0.69644,0.22081,0.75494,0.27022,0.81216,0.33052,0.85534,0.39013,0.89643,0.48581,0.92707,0.60737],"triangles":[24,23,11,30,29,5,25,24,10,29,28,6,26,25,9,28,27,7,27,26,8,19,18,20,16,20,17,20,18,17,0,34,1,16,15,20,1,34,2,34,33,2,15,14,20,20,14,21,2,33,3,33,32,3,22,21,13,21,14,13,32,31,3,23,22,12,22,13,12,31,4,3,31,30,4,30,5,4,23,12,11,29,6,5,24,11,10,28,7,6,25,10,9,26,9,8,27,8,7],"vertices":[1,22,109.5,-154.79,1,1,22,142.63,-162.15,1,1,22,179.94,-156.21,1,1,22,216.61,-146.76,1,1,22,250.83,-129.54,1,1,22,276.86,-105.23,1,1,22,294.39,-78.37,1,1,22,306.93,-42.54,1,1,22,311.06,-5.16,1,1,22,306.5,30.49,1,1,22,292.11,66.07,1,1,22,270.39,96.62,1,1,22,245.26,119.74,1,1,22,215.83,137.08,1,1,22,190.04,148.27,1,1,22,167.45,155.2,1,1,22,133.72,160.57,1,1,22,108.51,164.26,1,1,22,78.78,163.82,1,1,22,44.98,157.59,1,2,22,166.65,142,0.536,23,-144.21,176.18,0.464,2,22,185.94,133.72,0.448,23,-124.92,167.9,0.552,2,22,207.04,122.13,0.352,23,-103.82,156.32,0.648,2,22,233.67,104.84,0.232,23,-77.19,139.03,0.768,2,22,254.76,78.28,0.144,23,-56.1,112.47,0.856,2,22,269.34,54.63,0.088,23,-41.51,88.82,0.912,2,22,277.69,21.96,0.056,23,-33.16,56.15,0.944,2,22,279.76,-8.26,0.064,23,-31.09,25.93,0.936,2,22,273.34,-42.79,0.112,23,-37.52,-8.6,0.888,2,22,260.44,-72.3,0.184,23,-50.41,-38.11,0.816,2,22,248.62,-93.87,0.256,23,-62.24,-59.68,0.744,2,22,226.07,-114.13,0.38401,23,-84.78,-79.94,0.61599,2,22,206.45,-126.2,0.48,23,-104.41,-92.02,0.52,2,22,175.83,-138.1,0.632,23,-135.03,-103.91,0.368,2,22,138.91,-148.25,0.8,23,-171.94,-114.06,0.2],"edges":[0,2,2,4,4,6,6,8,8,10,10,12,12,14,14,16,16,18,18,20,20,22,22,24,24,26,26,28,28,30,30,32,32,34,34,36,36,38,40,42,42,44,44,46,46,48,48,50,50,52,52,54,54,56,56,58,58,60,60,62,62,64,64,66,66,68,68,0,38,40]}},"Close Eye 2":{"Close Eye 2":{"type":"mesh","hull":37,"width":336,"height":288,"uvs":[0.02714,0.81596,0.06338,0.6677,0.09769,0.51676,0.15057,0.38485,0.23607,0.27395,0.33858,0.19861,0.44208,0.15595,0.55289,0.15398,0.64964,0.17105,0.7447,0.22224,0.81558,0.30295,0.86956,0.39607,0.90613,0.49188,0.95731,0.73798,0.9815,0.84757,0.98319,0.73601,0.97475,0.59688,0.95281,0.48663,0.91344,0.37376,0.86844,0.27532,0.80885,0.17704,0.74972,0.11475,0.69502,0.07677,0.62661,0.04241,0.55717,0.02252,0.47216,0.01883,0.41039,0.02689,0.34706,0.04388,0.2737,0.07414,0.20869,0.11485,0.16008,0.16667,0.10881,0.23512,0.07937,0.30357,0.05054,0.38566,0.03156,0.46304,0.0146,0.56364,0.01412,0.65007],"triangles":[5,4,29,6,25,7,7,23,8,5,27,6,9,8,21,9,20,10,7,25,24,7,24,23,6,26,25,8,23,22,8,22,21,5,28,27,27,26,6,9,21,20,5,29,28,30,29,4,31,30,4,10,20,19,3,31,4,32,31,3,33,32,3,11,19,18,10,19,11,12,11,18,17,12,18,2,33,3,34,33,2,35,34,2,1,35,2,36,35,1,16,12,17,13,16,15,13,12,16,0,36,1,14,13,15],"vertices":[1,25,95.97,150.46,1,2,25,138.5,139.65,0.744,24,-187.99,145.93,0.256,2,25,181.83,127.6,0.54399,24,-144.66,133.88,0.45601,2,25,219.6,109.38,0.36801,24,-106.89,115.65,0.63199,2,25,251.2,80.27,0.192,24,-75.3,86.54,0.808,2,25,272.47,45.56,0.09596,24,-54.02,51.84,0.90404,2,25,284.34,10.64,0.032,24,-42.15,16.92,0.968,2,25,284.46,-26.6,0.032,24,-42.04,-20.32,0.968,2,25,279.15,-59.04,0.064,24,-47.34,-52.77,0.936,2,25,264.02,-90.8,0.136,24,-62.47,-84.53,0.864,2,25,240.49,-114.33,0.24,24,-86,-108.06,0.76,2,25,213.46,-132.15,0.368,24,-113.04,-125.87,0.632,2,25,185.71,-144.1,0.504,24,-140.78,-137.82,0.496,2,25,114.64,-160.44,0.808,24,-211.85,-154.17,0.192,1,25,82.98,-168.19,1,1,25,115.1,-169.14,1,1,25,154.1,-163.56,1,1,25,186.49,-158.47,1,1,25,219.7,-146.97,1,1,25,248.23,-132.19,1,1,25,275.71,-111.16,1,1,25,292.12,-92.09,1,1,25,304.26,-71.95,1,1,25,311.76,-55.53,1,1,25,317.55,-35.25,1,1,25,321.05,-10.01,1,1,25,321.12,10.31,1,1,25,318.6,29.44,1,1,25,312.2,53.65,1,1,25,304.14,74.8,1,1,25,294.33,90.21,1,1,25,269.6,114.88,1,1,25,247.1,128.53,1,1,25,220.46,140.31,1,1,25,197.37,148.69,1,1,25,171.69,154.56,1,1,25,143.78,156.14,1],"edges":[2,4,4,6,6,8,8,10,10,12,12,14,14,16,16,18,18,20,20,22,22,24,28,30,30,32,32,34,34,36,36,38,38,40,0,72,56,58,58,60,60,62,62,64,64,66,66,68,68,70,70,72,52,54,54,56,48,50,50,52,44,46,46,48,40,42,42,44,0,2,26,28,24,26]}},"NewYear":{"NewYear":{"type":"mesh","hull":36,"width":2101,"height":1566,"uvs":[0.47925,0.95014,0.39888,0.7697,0.25454,0.61566,0.03968,0.51444,0.0036,0.39561,0.00688,0.23938,0.04788,0.10514,0.13317,0.05013,0.20534,0.06554,0.29391,0.00832,0.42348,0,0.53173,0,0.62194,0.03473,0.71215,0.11835,0.80728,0.18876,0.84665,0.28339,0.88109,0.41542,0.90569,0.53645,0.91553,0.63767,0.9549,0.68168,0.9877,0.72349,1,0.81531,1,0.91933,0.9631,0.98315,0.86469,1,0.77777,0.96364,0.73572,0.88541,0.7499,0.75507,0.78694,0.67721,0.78021,0.60323,0.76515,0.5399,0.76911,0.60134,0.76866,0.65711,0.73708,0.7818,0.69485,0.8808,0.64162,0.94574],"triangles":[11,30,1,0,1,35,35,1,34,34,1,33,33,1,32,11,2,10,11,1,2,10,2,9,2,4,8,2,8,9,2,3,4,8,4,5,5,6,8,6,7,8,31,32,1,30,31,1,12,30,11,13,30,12,30,16,17,30,15,16,30,14,15,30,13,14,27,28,19,28,18,19,28,29,18,29,17,18,17,29,30,21,24,27,22,23,24,27,19,21,22,24,21,21,19,20,26,27,25,24,25,27],"vertices":[1,52,-343.52,-514.51,1,1,52,-227.13,-258.32,1,3,56,62.53,-1090.61,0.00036,54,-318.6,-838.63,0.00218,52,-205.31,72.2,0.99746,1,52,-313.84,466.6,1,1,52,-219.95,610.44,1,1,52,-44.57,724.67,1,2,53,-709.3,393.22,0.00014,52,145.2,766.43,0.99986,2,53,-543.35,430.51,0.00861,52,293.09,682.42,0.99139,2,53,-421.66,381.25,0.04538,52,350.02,564.12,0.95462,2,53,-249.3,420.08,0.18851,52,503.69,476.94,0.81149,2,53,-19.94,378.57,0.57348,52,645.52,291.96,0.42652,2,53,169.58,334.81,0.9095,52,756.35,132.12,0.0905,3,54,-184.55,173.19,0.05412,53,317.02,253.05,0.94368,52,810.47,-27.55,0.0022,2,54,12.28,166.82,0.69712,53,449.68,107.5,0.30288,2,54,206.97,180.1,0.99907,55,-181.98,92.52,0.00093,2,54,334.97,111.85,0.48151,55,-37.81,108.54,0.51849,1,55,149.11,96.97,1,2,56,2.61,82.72,0.73791,55,315.59,74.81,0.26209,2,57,-129.14,83.3,0.0419,56,138.74,94.94,0.9581,2,57,-74.08,157.04,0.38765,56,200.41,163.25,0.61235,2,57,-21.34,218.86,0.64705,56,258.67,219.9,0.35295,2,57,100.26,247.42,0.9118,56,382.4,237.03,0.0882,2,57,239.36,254.79,0.99822,56,521.58,231.44,0.00178,1,57,328.25,193.1,1,1,57,360.27,17.73,1,1,57,320.03,-140.8,1,2,57,219.48,-221.78,0.98751,56,457.49,-241.22,0.01249,2,57,43.82,-205.56,0.75854,56,284.11,-208.75,0.24146,5,57,-63.86,-144.62,0.22763,56,182.55,-138.06,0.75566,55,406.64,-195.07,0.01428,53,411.69,-651.77,0.00009,52,272,-760.83,0.00233,5,57,-162.14,-161.93,0.01164,56,83.09,-146.16,0.80908,55,310.65,-167.75,0.14766,53,422.27,-552.54,0.00306,52,346.57,-694.52,0.02857,1,52,400.88,-624.01,1,1,52,337.29,-676.68,1,1,52,275.43,-718.53,1,1,52,105.8,-766.92,1,1,52,-46.43,-780.01,1,1,52,-172.43,-750.92,1],"edges":[0,2,2,4,4,6,6,8,8,10,10,12,12,14,14,16,16,18,18,20,20,22,22,24,24,26,26,28,28,30,30,32,32,34,34,36,36,38,38,40,40,42,42,44,44,46,46,48,48,50,50,52,66,68,68,70,0,70,52,54,54,56,64,66,60,62,62,64,56,58,58,60]}},"Eye 1":{"Eye 1":{"type":"mesh","hull":11,"width":371,"height":338,"uvs":[0.945,0.8013,0.73909,0.94911,0.44906,0.97485,0.17974,0.915,0.03774,0.7255,0.03817,0.42231,0.1314,0.20628,0.38345,0.05468,0.69421,0.06226,0.90828,0.24797,0.96226,0.536,0.76042,0.78505,0.62153,0.83989,0.47979,0.8023,0.37696,0.68773,0.33802,0.51849,0.37666,0.35095,0.50708,0.24616,0.63579,0.23121,0.77145,0.31479,0.84582,0.47861,0.83862,0.6664,0.62936,0.5393,0.3506,0.60564,0.42558,0.75775,0.54963,0.82604,0.69587,0.81911,0.80066,0.73009,0.85296,0.58515,0.82185,0.40595,0.71102,0.26458,0.56892,0.23224,0.42546,0.29268,0.3483,0.43423],"triangles":[2,13,25,13,22,25,2,24,13,13,24,22,1,26,11,11,26,22,22,29,20,10,20,29,22,19,29,29,19,9,22,30,19,19,30,9,22,18,30,30,18,8,16,32,22,16,6,32,33,16,22,16,33,6,6,33,15,15,33,22,23,14,3,14,23,22,15,23,3,23,15,22,32,17,22,32,7,17,17,31,22,17,7,31,22,31,18,18,31,8,22,20,28,28,20,10,10,21,28,21,22,28,27,21,0,27,22,21,0,11,27,11,22,27,3,14,24,24,14,22,1,12,26,2,25,12,26,12,22,22,12,25,1,2,12,3,24,2,0,1,11,0,21,10,3,4,5,10,29,9,3,6,15,6,3,5,6,7,32,9,30,8,8,31,7],"vertices":[1,39,-97,-178.05,1,1,39,-147.92,-102.3,1,1,39,-157.97,5.19,1,1,39,-139,105.35,1,1,39,-75.62,158.84,1,1,39,26.86,159.97,1,1,39,100.3,126.3,1,1,39,152.72,33.44,1,1,39,151.6,-81.87,1,1,39,89.84,-162.08,1,1,39,-7.26,-183.33,1,1,51,-76.45,-61.93,1,1,51,-95.64,-10.64,1,1,51,-83.59,42.1,1,1,51,-45.35,80.74,1,1,51,11.67,95.9,1,1,51,68.47,82.28,1,2,39,88.58,-13.24,0.008,51,104.5,34.34,0.992,1,51,110.15,-13.34,1,1,51,82.54,-64.02,1,1,51,27.52,-92.31,1,1,51,-35.99,-90.44,1,1,39,-9.93,-59.85,1,1,51,-17.73,90.86,1,1,51,-68.79,62.4,1,1,51,-91.29,16.09,1,1,51,-88.26,-38.13,1,1,51,-57.69,-76.63,1,1,51,-8.46,-95.41,1,1,51,51.96,-83.11,1,1,51,99.22,-41.39,1,1,51,109.49,11.46,1,1,51,88.39,64.43,1,1,51,40.19,92.44,1],"edges":[0,2,2,4,4,6,6,8,8,10,10,12,12,14,14,16,16,18,18,20,0,20,12,6,30,44]}},"Eye 2":{"Eye 2":{"type":"mesh","hull":13,"width":356,"height":323,"uvs":[0.90835,0.80727,0.70325,0.91038,0.42978,0.95201,0.13831,0.90642,0.05196,0.73588,0.05555,0.4781,0.11313,0.22428,0.29664,0.07357,0.53413,0.04799,0.73564,0.09737,0.89036,0.24411,0.95225,0.4424,0.95225,0.66449,0.21446,0.79211,0.31191,0.83727,0.41558,0.83171,0.52197,0.79224,0.59195,0.71504,0.63412,0.62096,0.64277,0.51275,0.60428,0.3919,0.54093,0.29543,0.44122,0.23432,0.35109,0.22733,0.23916,0.26025,0.1531,0.35297,0.11473,0.44511,0.10732,0.57123,0.15346,0.70606,0.36995,0.53697],"triangles":[3,13,14,13,4,28,13,29,14,13,28,29,14,15,2,15,14,29,2,15,16,16,15,29,1,17,18,17,29,18,0,18,19,18,29,19,29,20,19,9,19,20,29,22,21,22,8,21,29,23,22,22,23,7,25,24,29,25,6,24,27,26,29,27,5,26,4,27,28,28,27,29,26,25,29,26,5,25,24,23,29,23,24,7,29,21,20,20,21,9,16,17,1,17,16,29,2,3,14,2,16,1,0,1,18,13,3,4,9,11,12,4,5,27,10,11,9,9,12,0,25,5,6,9,0,19,21,8,9,8,22,7,24,6,7],"vertices":[1,38,-99.55,-127.95,1,1,38,-142.67,-41.51,1,1,38,-147.06,51.37,1,1,38,-135.02,145.76,1,1,38,-80.33,177.19,1,1,38,2.95,176.96,1,1,38,85.18,157.5,1,1,38,134.68,92.78,1,1,38,144,8.35,1,1,38,128.96,-63.58,1,1,38,82.26,-119.26,1,1,38,18.49,-142.09,1,1,38,-53.24,-143,1,1,50,-76.68,56.39,1,1,50,-91.62,23.82,1,1,50,-91.84,-11.17,1,1,50,-81.41,-47.08,1,1,50,-57.38,-71.22,1,1,50,-25.3,-88.2,1,1,50,10.73,-92.47,1,1,50,50.68,-79.97,1,1,50,82.45,-58.42,1,1,50,102.45,-23.77,1,1,50,104.73,7.68,1,1,50,93.76,47.14,1,1,50,63.59,77.31,1,1,50,34.08,90.25,1,1,50,-6.5,92.46,1,1,50,-49.47,76.89,1,1,38,-15.61,68.51,1],"edges":[0,2,2,4,4,6,6,8,8,10,10,12,12,14,14,16,16,18,18,20,20,22,22,24,0,24,18,0]}},"Tail":{"Tail":{"type":"mesh","hull":45,"width":869,"height":766,"uvs":[0.07973,0.86146,0.10292,0.91049,0.14403,0.94876,0.20833,0.91376,0.25108,0.88694,0.27263,0.87342,0.31489,0.84733,0.3528,0.82393,0.38438,0.80118,0.41842,0.77666,0.49206,0.71672,0.5308,0.68371,0.56748,0.65246,0.60375,0.61636,0.63488,0.58539,0.66898,0.55295,0.70621,0.51754,0.76539,0.47536,0.81855,0.46543,0.88195,0.43853,0.92437,0.39676,0.97107,0.29981,0.98097,0.17107,0.97275,0.08926,0.95357,0.02798,0.90402,0.09016,0.82286,0.1344,0.73115,0.17148,0.68583,0.22648,0.65421,0.3078,0.65421,0.37237,0.61942,0.44054,0.60095,0.4664,0.57262,0.50607,0.541,0.53477,0.50978,0.56309,0.47511,0.59015,0.44064,0.61705,0.36586,0.66856,0.33557,0.68885,0.30167,0.71155,0.26746,0.73156,0.23225,0.75215,0.18786,0.78107,0.16195,0.79795],"triangles":[9,38,10,39,38,9,8,39,9,40,39,8,7,40,8,7,41,40,6,41,7,42,41,6,5,42,6,43,42,5,4,43,5,1,0,44,4,44,43,3,44,4,1,44,3,2,1,3,38,37,10,12,36,35,10,37,11,11,36,12,37,36,11,16,31,30,15,31,16,32,31,15,33,32,15,14,33,15,13,33,14,13,35,34,34,33,13,12,35,13,30,29,17,19,27,20,28,18,29,28,19,18,18,17,29,17,16,30,25,24,23,25,22,26,22,25,23,21,26,22,20,26,21,20,27,26,28,27,19],"vertices":[1,7,-127.22,24.19,1,1,7,-126.42,-18.42,1,1,7,-108,-60.8,1,1,7,-46.88,-63.92,1,1,7,-11.41,-63.83,1,1,7,20.75,-62.08,1,2,8,-140.68,-41.84,0.096,7,54.79,-63.28,0.904,2,8,-98.39,-46.88,0.128,7,97.35,-61.67,0.872,2,8,-61.16,-51.74,0.21933,7,134.88,-60.66,0.78067,2,8,-11.98,-51.37,0.272,7,183.4,-52.62,0.728,2,8,44.84,-50.35,0.68771,7,239.36,-42.74,0.31229,3,9,-98.33,-28.06,0.096,8,86.75,-47.59,0.70874,7,280.33,-33.46,0.19526,2,9,-53.2,-33.32,0.3371,8,132.02,-43.69,0.6629,2,9,-12.2,-35.95,0.77713,8,172.71,-38.03,0.22288,2,9,27.34,-35.13,0.90247,8,211.28,-29.31,0.09753,2,10,-77.4,-27.44,0.12,9,64.64,-37.52,0.88,2,10,-21.46,-39.49,0.28025,9,121.69,-42,0.71975,2,10,21.95,-58.25,0.93571,9,167.22,-54.8,0.06429,1,10,57.9,-88.41,1,2,11,-54.85,-115.35,0.022,10,109.41,-117.01,0.978,2,11,-6.71,-126.3,0.15153,10,158.25,-124.25,0.84847,2,11,79.08,-113.61,0.65493,10,242.83,-105.04,0.34507,2,11,163.37,-58.85,0.98538,10,322.69,-44.01,0.01462,1,11,208.39,-14.56,1,1,11,235.11,27.48,1,1,11,171.07,32.08,1,1,11,100.94,66.79,1,2,11,29.66,112.06,0.95587,10,176.32,116.19,0.04413,2,11,-26.85,117.45,0.71619,10,119.56,117.25,0.28381,3,11,-91.55,102.64,0.30034,10,56.18,97.55,0.69364,9,180.36,104.17,0.00602,3,11,-130.27,73.99,0.07901,10,19.76,66.02,0.74986,9,148.47,68.07,0.17114,3,11,-168.98,66.8,0.00771,10,-18.29,55.9,0.27786,9,112.11,52.96,0.71443,2,10,-53.73,54.31,0.20213,9,77.2,46.66,0.79787,2,9,36.89,43.36,0.83689,8,204.9,49.51,0.16311,2,9,2.25,46.03,0.72942,8,170.42,45.17,0.27058,2,9,-39.55,51.01,0.46361,8,128.47,41.66,0.53639,3,9,-78.58,57.86,0.10985,8,88.86,40.55,0.73015,7,268.65,53.93,0.16,2,8,41.17,42.22,0.50169,7,221.29,48.13,0.49831,2,8,-4.75,45.29,0.272,7,175.45,43.99,0.728,2,8,-38.08,47.81,0.17518,7,142.13,41.28,0.82482,2,8,-73.61,52.02,0.104,7,106.39,39.89,0.896,2,8,-117.94,59.21,0.04,7,61.48,40.07,0.96,1,7,26.51,39.58,1,1,7,-13.87,36.19,1,1,7,-55.22,33.79,1],"edges":[0,2,2,4,4,6,18,20,32,34,34,36,42,44,44,46,46,48,48,50,50,52,52,54,54,56,56,58,58,60,60,62,74,76,0,88,36,38,38,40,40,42,20,22,22,24,70,72,72,74,28,30,30,32,62,64,64,66,24,26,26,28,66,68,68,70,14,16,16,18,76,78,78,80,80,82,82,84,10,12,12,14,6,8,8,10,84,86,86,88]}},"Face":{"Face":{"type":"mesh","hull":39,"width":1633,"height":1444,"uvs":[0.55323,0.99999,0.49959,0.99539,0.44595,0.99079,0.35181,0.98369,0.27651,0.96037,0.20389,0.91374,0.15279,0.84986,0.10976,0.76774,0.08914,0.68562,0.0981,0.62073,0.11872,0.56193,0.11962,0.4869,0.12589,0.43317,0.13217,0.37944,0.16713,0.2892,0.21375,0.21621,0.27113,0.15031,0.33926,0.09657,0.41098,0.05196,0.47284,0.02053,0.54367,0.00634,0.6127,0.00938,0.67097,0.02966,0.72745,0.06616,0.76959,0.10265,0.82696,0.14625,0.8691,0.21418,0.90406,0.29833,0.93096,0.37335,0.95606,0.45547,0.98296,0.54165,0.9982,0.62073,0.9973,0.71908,0.97578,0.80931,0.94261,0.8742,0.88703,0.92286,0.80545,0.96037,0.7149,0.98166,0.61688,0.99849,0.55077,0.80043,0.45939,0.71705,0.64408,0.71097,0.37868,0.80339,0.47732,0.86811,0.55173,0.82756,0.63152,0.86406,0.70482,0.8377,0.73777,0.79853,0.41294,0.84079,0.43662,0.68448,0.651,0.67699,0.63354,0.59149,0.89159,0.58661,0.87688,0.66107,0.80892,0.71157,0.46597,0.59445,0.2081,0.59972,0.22493,0.68179,0.32442,0.72304,0.45381,0.48577,0.64701,0.49516,0.42618,0.6694,0.34151,0.69122,0.25238,0.65124,0.25221,0.5773,0.27928,0.52743,0.33403,0.50162,0.41092,0.52758,0.43664,0.60021,0.76184,0.67871,0.6759,0.65655,0.67128,0.58148,0.69544,0.52139,0.74657,0.497,0.80009,0.5066,0.8321,0.53788,0.85629,0.59832,0.84458,0.64255,0.39194,0.6883,0.28837,0.68051,0.71458,0.67695,0.80447,0.66766,0.37571,0.50456,0.43473,0.63819,0.42846,0.56266,0.24545,0.61373,0.66786,0.62348,0.39606,0.73116,0.70412,0.72827,0.73694,0.85604,0.36517,0.8544,0.4028,0.92318,0.70756,0.92067,0.65536,0.97473,0.54865,0.71813,0.54981,0.61908,0.55106,0.54027,0.55004,0.92629,0.84831,0.76069,0.25768,0.77975,0.92545,0.68658,0.182,0.70145,0.54823,0.75689,0.17539,0.49614,0.16069,0.59912,0.87531,0.50967,0.20055,0.39816,0.88136,0.36849,0.81217,0.28475,0.71651,0.25352,0.24185,0.32343,0.30639,0.27238,0.39377,0.24969,0.4948,0.34148,0.6204,0.3355,0.64926,0.27165,0.45857,0.26977,0.55424,0.3434,0.55442,0.46374,0.41735,0.4463,0.341,0.43619,0.25734,0.47246,0.2207,0.53851,0.71612,0.39042,0.2319,0.47291,0.24368,0.43285,0.28555,0.3664,0.35936,0.32118,0.41823,0.33952,0.43578,0.38973,0.42003,0.41629,0.37891,0.39497,0.311,0.41309,0.66957,0.40577,0.64604,0.37163,0.67442,0.31914,0.75532,0.31935,0.86525,0.4226,0.84973,0.4704,0.81479,0.35649,0.87376,0.46896,0.68404,0.44783,0.80444,0.41618,0.76277,0.43501,0.45168,0.97313,0.93946,0.58353,0.92425,0.46511,0.55411,0.29277,0.26343,0.48047,0.82653,0.46365],"triangles":[41,95,50,41,50,88,138,140,105,149,138,105,35,98,34,145,30,31,6,101,99,6,7,101,56,122,64,65,122,148,66,148,120,107,146,137,105,146,145,88,69,54,52,105,145,54,77,53,75,105,52,77,76,53,54,81,77,76,81,75,88,80,69,88,70,80,74,149,75,81,73,74,50,70,88,66,120,82,49,78,61,63,57,56,63,85,79,62,65,66,65,64,122,84,67,59,68,83,78,83,61,78,58,62,87,49,87,78,62,78,87,42,58,87,147,20,21,128,116,113,114,115,135,134,117,114,129,128,113,90,99,42,119,130,59,38,97,93,87,49,40,91,90,48,92,46,89,45,46,92,46,45,41,97,43,44,45,44,39,41,45,39,40,95,41,41,102,94,102,40,94,40,102,39,94,40,41,39,43,40,39,102,41,44,43,39,97,44,45,46,41,88,97,45,93,43,48,40,144,43,97,48,87,40,91,48,43,93,45,92,90,42,48,42,87,48,5,6,99,0,1,97,38,0,97,40,49,95,118,59,129,89,46,47,144,91,43,1,144,97,128,112,116,147,21,115,147,116,20,15,16,111,3,4,90,90,4,99,91,3,90,61,83,49,55,83,68,55,49,83,68,84,55,68,78,84,55,84,59,59,67,119,67,84,82,67,82,119,65,62,64,64,79,85,62,79,64,85,56,64,65,148,66,63,56,85,57,63,79,58,79,62,78,62,66,66,84,78,84,66,82,82,120,119,50,86,70,70,86,80,50,51,86,86,51,71,71,80,86,71,51,60,71,73,69,80,71,69,71,60,72,73,71,72,72,141,73,73,81,69,74,73,143,81,74,75,69,81,54,77,81,76,76,75,52,53,76,52,75,149,105,145,53,52,105,140,146,107,27,28,137,139,107,28,146,107,107,139,108,7,8,101,8,9,101,33,100,32,98,100,33,32,100,31,34,98,33,36,89,35,89,98,35,4,5,99,60,141,72,58,57,79,148,124,121,148,121,132,124,125,121,124,106,125,121,125,132,120,132,131,125,126,132,125,106,126,131,132,127,132,126,127,126,111,127,148,132,120,130,129,59,119,131,130,130,131,129,131,128,129,131,127,128,127,112,128,120,131,119,140,138,137,137,138,142,140,137,146,138,149,142,142,139,137,142,123,139,136,108,139,139,123,136,118,134,133,141,133,123,133,134,123,134,135,123,123,135,136,134,114,135,135,109,136,143,123,142,46,88,47,30,146,29,148,122,124,38,93,37,2,144,1,3,91,2,2,91,144,93,92,37,37,92,36,92,89,36,89,47,98,47,54,98,47,88,54,9,104,101,101,56,57,101,104,56,100,53,145,49,55,95,95,51,50,9,10,104,95,96,51,95,55,96,56,104,122,104,103,122,104,10,103,96,55,59,30,145,146,51,96,60,10,11,103,96,118,60,96,59,118,122,103,124,149,74,143,73,141,143,11,12,103,103,106,124,103,12,106,141,60,133,118,113,117,113,118,129,146,28,29,60,118,133,134,118,117,143,142,149,141,123,143,12,13,106,13,14,106,106,110,126,106,14,110,27,107,108,126,110,111,113,147,117,117,147,114,113,116,147,114,147,115,14,15,110,110,15,111,127,111,112,136,109,108,135,115,109,108,26,27,116,19,20,26,108,25,111,16,112,109,115,23,115,21,22,112,18,116,116,18,19,108,109,25,109,24,25,109,23,24,23,115,22,16,17,112,112,17,18,98,53,100,98,54,53,101,57,99,99,57,58,42,99,58,100,145,31],"vertices":[2,4,-46.28,-25.99,0.328,12,-354.27,-23.57,0.672,2,4,-41.12,61.71,0.328,12,-349.12,64.13,0.672,2,4,-35.95,149.4,0.536,12,-343.94,151.83,0.464,3,4,-28.31,303.28,0.35735,37,-382.77,-197.56,0.11721,12,-336.31,305.7,0.52544,3,4,3.27,426.81,0.28945,37,-351.19,-74.02,0.20013,12,-304.73,429.23,0.51042,3,4,68.59,546.52,0.23274,37,-285.87,45.69,0.22146,12,-239.41,548.94,0.5458,3,4,159.38,631.52,0.18511,37,-195.07,130.69,0.1778,12,-148.61,633.94,0.63708,3,4,276.75,703.8,0.11041,37,-77.71,202.96,0.08629,12,-31.25,706.22,0.8033,3,4,394.75,739.47,0.23585,37,40.29,238.64,0.02079,12,86.76,741.89,0.74336,4,4,488.7,726.42,0.43294,15,-1.28,326.65,0.01804,37,134.37,225.82,0.05117,12,180.83,729.08,0.49786,4,4,574.16,694.2,0.40128,13,-1153.35,595.06,0,15,10.48,236.08,0.05472,12,266.47,697.11,0.544,4,4,682.51,694.57,0.4095,13,-1086.91,680.71,0,15,61.77,140.65,0.1185,12,375.07,697.41,0.472,4,4,760.26,685.64,0.39332,13,-1031.97,736.51,0,15,90.46,67.84,0.14268,12,452.87,688.14,0.464,3,4,838.01,676.71,0.26208,15,119.15,-4.96,0.07392,12,530.47,678.84,0.664,3,4,969.27,621.83,0.4686,15,132.45,-146.6,0.0514,12,661.36,623.85,0.48,3,4,1075.96,547.5,0.48465,15,117.04,-275.7,0.08335,12,767.86,549.02,0.432,2,4,1172.68,455.43,0.448,12,864.69,457.85,0.552,2,4,1252.16,345.49,0.56,12,944.16,347.91,0.44,2,4,1318.55,229.48,0.536,12,1010.55,231.9,0.464,2,4,1365.64,129.25,0.568,12,1057.65,131.67,0.432,2,4,1388.09,13.96,0.496,12,1080.09,16.38,0.504,2,4,1385.6,-98.83,0.36,12,1077.61,-96.41,0.64,2,4,1357.96,-194.48,0.64,12,1049.96,-192.05,0.36,2,4,1306.82,-287.59,0.536,12,998.82,-285.16,0.464,2,4,1255.29,-357.28,0.56,12,947.3,-354.86,0.44,2,4,1193.94,-452.03,0.528,12,885.94,-449.61,0.472,3,4,1096.98,-522.49,0.38123,13,127.92,257.8,0.13877,12,786.79,-511.66,0.48,3,4,976.47,-581.63,0.3593,13,100.31,126.35,0.1687,12,668.23,-573.42,0.472,4,4,868.9,-627.36,0.28454,13,70.11,13.38,0.33944,15,-1017.02,-645.57,0.00002,12,563.69,-621.62,0.376,4,4,751.06,-670.36,0.4456,13,31.43,-106.01,0.20241,15,-1110.39,-561.82,0,12,446.42,-670.15,0.352,3,4,627.39,-716.4,0.45197,13,-8.46,-231.87,0.07603,12,321.8,-716.99,0.472,5,4,513.62,-743.22,0.28227,13,-57.39,-338.09,0.02724,15,-1286.35,-386.57,0,36,148.35,-234.15,0.008,12,207.43,-743.76,0.6825,3,4,371.6,-744.17,0.22645,36,4.52,-232.13,0.05304,12,63.6,-741.75,0.72051,3,4,240.72,-711.25,0.1617,36,-126.35,-199.21,0.16531,12,-67.28,-708.83,0.67299,3,4,146.14,-658.68,0.35566,36,-220.93,-146.64,0.24974,12,-161.85,-656.26,0.3946,3,4,74.31,-569.11,0.06068,36,-292.77,-57.07,0.14807,12,-233.69,-566.69,0.79125,3,4,17.92,-436.83,0.46077,36,-349.15,75.21,0.111,12,-290.07,-434.41,0.42822,3,4,-15.32,-289.51,0.55358,36,-382.39,222.53,0.05793,12,-323.32,-287.09,0.38849,3,4,-42.33,-129.88,0.608,15,-1006.63,392.46,0,12,-350.32,-127.46,0.392,1,12,-66.25,-14.65,1,1,12,51.61,136.58,1,1,12,65.51,-164.81,1,3,4,232.73,263.83,0.13867,37,-121.73,-237.01,0.09268,12,-75.26,266.25,0.76865,2,37,-212.46,-399.65,0.04,12,-165.99,103.61,0.96,1,12,-105.48,-17.02,1,2,36,-214.95,361.55,0.04,12,-155.87,-148.07,0.96,2,36,-174.86,242.51,0.072,12,-115.78,-267.1,0.928,3,4,249.73,-322.37,0.7056,36,-117.34,189.67,0.16,12,-58.26,-319.95,0.1344,2,37,-174.79,-293.86,0.096,12,-128.33,209.39,0.904,2,4,406.06,172.14,0.712,12,98.06,174.56,0.288,2,4,422.78,-177.71,0.536,12,114.79,-175.29,0.464,3,4,545.44,-147.08,0.43059,12,237.45,-144.66,0.49741,23,-177.09,234.13,0.072,3,4,559.72,-568.31,0.29363,12,251.72,-565.89,0.69837,23,-162.08,-184.42,0.008,3,4,452.03,-546.13,0.26633,36,84.95,-34.09,0.15511,12,144.03,-543.7,0.57856,3,4,377.25,-436.41,0.48567,36,10.17,75.63,0.13673,12,69.25,-433.99,0.3776,3,4,536.84,126.41,0.60403,12,228.85,128.83,0.36397,24,-178.38,-212.75,0.032,3,4,522.08,547.33,0.49364,37,167.62,46.5,0.02381,12,214.08,549.75,0.48256,3,4,404.07,517.85,0.58269,37,49.61,17.01,0.096,12,96.07,520.27,0.32131,3,4,347.29,354.39,0.77718,37,-7.17,-146.45,0.056,12,39.29,356.81,0.16682,4,4,693.74,148.89,0.3168,32,-137.66,-83.24,0.0352,12,385.74,151.32,0.528,24,-21.4,-186.16,0.12,4,4,684.96,-166.72,0.53654,28,-160.63,42.46,0.05962,12,376.96,-164.3,0.32384,23,-37.61,212.46,0.08,1,12,119.49,191.98,1,1,12,85.63,329.72,1,1,12,140.89,476.2,1,1,12,247.64,478.28,1,1,12,320.4,435.31,1,1,12,359.18,346.55,1,1,12,323.83,220.36,1,1,12,219.68,176.59,1,1,12,115.34,-356.3,1,1,12,144.95,-215.44,1,1,12,253.22,-206.06,1,2,4,648.64,-246.45,0.008,12,340.64,-244.03,0.992,1,12,377.27,-326.93,1,1,12,364.89,-414.55,1,1,12,320.61,-467.57,1,1,12,234.03,-508.56,1,1,12,169.84,-490.51,1,1,12,91.25,247.43,1,1,12,99.64,416.71,1,1,12,116.58,-279.09,1,1,12,132.48,-425.63,1,1,12,356.08,278.42,1,1,12,164.78,178.79,1,1,12,273.66,190.87,1,1,12,194.85,488.44,1,1,12,192.48,-201.51,1,3,4,337.49,237.23,0.01549,37,-16.97,-263.61,0.032,12,29.49,239.65,0.95251,3,4,350.24,-265.71,0.68301,36,-16.84,246.33,0.072,12,42.24,-263.29,0.24499,3,4,166.67,-322.42,0.5569,36,-200.41,189.62,0.19387,12,-141.33,-320,0.24922,3,4,158.71,284.64,0.12415,37,-195.75,-216.2,0.04341,12,-149.29,287.06,0.83245,3,4,60.48,221.5,0.65498,37,-293.98,-279.33,0.048,12,-247.51,223.92,0.29702,3,4,72.52,-276.03,0.45312,36,-294.55,236.01,0.056,12,-235.47,-273.61,0.49088,3,4,-6.96,-192.13,0.73011,36,-374.03,319.91,0.008,12,-314.95,-189.7,0.26189,1,12,52.52,-9.17,1,2,4,503.61,-11.09,0.688,12,195.62,-8.66,0.312,2,4,617.41,-11.19,0.64,12,309.41,-8.77,0.36,1,12,-247.98,-16.55,1,3,4,307.42,-501.92,0.56129,36,-59.66,10.12,0.166,12,-0.58,-499.5,0.2727,3,4,263.54,461.97,0.56538,37,-90.92,-38.86,0.10215,12,-44.45,464.4,0.33246,3,4,416.55,-626.07,0.48866,36,49.47,-114.03,0.21022,12,108.55,-623.65,0.30112,3,4,374.49,587.45,0.52693,37,20.03,86.61,0.13916,12,66.5,589.87,0.33391,1,12,-3.46,-9.44,1,3,4,671.05,603.45,0.7488,34,-68.81,120.37,0.0832,12,363.05,605.87,0.168,3,4,521.64,624.75,0.61697,37,167.19,123.92,0.07378,12,213.65,627.17,0.30925,4,4,668.96,-539.66,0.08225,30,-86.67,-53.02,0.00914,12,360.96,-537.23,0.86061,23,-51.87,-152.46,0.048,4,4,813.04,564.35,0.71478,33,-31.71,193.21,0.0396,34,73.19,81.27,0.03762,12,505.05,566.77,0.208,3,4,874.84,-546.32,0.3456,30,119.22,-59.68,0.0384,12,566.85,-543.9,0.616,4,4,993.42,-431.25,0.64973,29,118.62,-73.86,0.07219,12,685.43,-428.83,0.23808,23,270.52,-53.58,0.04,5,4,1035.39,-274.26,0.74972,28,189.8,-65.08,0.03946,29,160.59,83.13,0.04154,12,727.39,-271.84,0.11328,23,312.06,101.52,0.056,4,4,921.92,498.43,0.722,33,77.16,127.28,0.038,34,182.07,15.35,0.04,12,613.92,500.85,0.2,4,4,997.03,394.59,0.42855,33,152.27,23.44,0.04762,12,689.03,397.01,0.48384,24,281.26,58.14,0.04,5,4,1031.79,252.72,0.55207,32,200.4,20.58,0.02906,33,187.04,-118.43,0.03059,12,723.8,255.14,0.33229,24,315.07,-85.96,0.056,4,4,901.39,85.62,0.59939,32,70,-146.52,0.0666,12,593.39,88.04,0.30202,24,184.37,-253.62,0.032,4,4,913.62,-119.29,0.48591,28,68.02,89.89,0.05399,12,605.62,-116.87,0.3721,23,191.22,260.7,0.088,4,4,1007.1,-164.89,0.53136,28,161.51,44.29,0.05904,12,699.1,-162.47,0.3936,23,284.68,214.98,0.016,4,4,1004.36,146.48,0.49893,32,172.96,-85.66,0.05544,12,696.36,148.9,0.42163,24,288.12,-191.01,0.024,4,4,900.32,-11.47,0.47319,32,68.92,-243.6,0.08518,12,592.32,-9.04,0.40963,23,177.48,368.6,0.032,2,4,727.19,-14.74,0.776,12,419.19,-12.32,0.224,4,4,748.81,209.45,0.43684,32,-82.59,-22.69,0.10921,12,440.81,211.87,0.31795,24,30.76,-128.12,0.136,4,4,761.69,334.25,0.53729,33,-83.06,-36.89,0.13432,12,453.7,336.68,0.17638,24,42.24,-5.43,0.152,4,4,707.19,469.88,0.15333,33,-137.57,98.73,0.46,34,-32.67,-13.2,0.30667,24,-28.09,136.04,0.08,4,4,610.93,528.3,0.52531,34,-128.92,45.22,0.13133,12,302.94,530.72,0.25536,24,-107.89,189.57,0.088,3,28,-7.87,-67.76,0.76467,12,529.73,-274.52,0.16333,23,123.17,109.95,0.072,2,33,-138.84,140.29,0.92,24,-33.05,179.86,0.08,5,4,764.02,493.04,0.1891,33,-80.74,121.9,0.4608,34,24.17,9.96,0.2717,12,456.02,495.46,0.0384,24,30.46,158.89,0.04,2,33,16.21,55,0.936,24,121.99,94.57,0.064,3,32,96.5,74.85,0.38011,33,83.14,-64.16,0.56389,24,188.92,-24.59,0.056,3,32,71.24,-21.59,0.53453,12,594.64,212.97,0.39347,24,174.88,-120.03,0.072,3,32,-0.75,-51.42,0.47731,12,522.65,183.14,0.42669,24,104.16,-149.75,0.096,3,32,-39.34,-26.41,0.7296,12,484.06,208.15,0.1824,24,58.38,-125.37,0.088,2,32,-9.49,41.18,0.904,24,82.94,-58.26,0.096,2,33,-50.53,12.46,0.952,24,55.26,52.03,0.048,3,28,-32.09,7.94,0.71424,12,505.51,-198.81,0.24576,23,98.37,185.82,0.04,3,28,17,47.13,0.66976,12,554.59,-159.63,0.25024,23,147.34,225.04,0.08,3,28,93.62,2.08,0.46029,12,631.21,-204.68,0.46771,23,222.28,180.47,0.072,4,28,96.01,-130.03,0.44557,29,66.8,18.18,0.44557,12,633.6,-336.79,0.05286,23,227.91,47.43,0.056,3,30,40.3,-34.64,0.73011,12,487.92,-518.86,0.26189,23,80.73,-134.21,0.008,3,30,-30.33,-10.31,0.75117,12,417.3,-494.52,0.21683,23,10.39,-109.96,0.032,4,29,15.11,-79.86,0.65692,30,134.29,49.38,0.1034,12,581.92,-434.83,0.19968,23,175.12,-50.3,0.04,2,30,-29.85,-49.21,0.616,12,417.78,-533.43,0.384,3,4,753.73,-225.97,0.7296,28,-91.86,-16.79,0.1824,23,31.2,149.48,0.088,4,29,-71.35,-64.43,0.46552,30,47.82,64.82,0.22722,12,495.45,-419.4,0.29126,23,88.02,-34.69,0.016,4,4,774.99,-354.26,0.68301,29,-99.81,3.13,0.17075,12,466.99,-351.84,0.07424,23,52.61,22.24,0.072,3,4,-10.27,140.48,0.74342,37,-364.73,-360.36,0.032,12,-318.27,142.9,0.22458,4,4,565.73,-646.42,0.67719,13,-101.62,-237.38,0.01081,15,-1168.31,-411.04,0,12,257.87,-644.44,0.312,5,4,734.86,-618.5,0.53198,13,-19.44,-86.84,0.00082,15,-1061.35,-545,0,30,-20.76,-131.86,0.0592,12,426.87,-616.09,0.408,3,4,973.8,-10.05,0.44083,12,665.8,-7.63,0.54317,23,251.34,371.42,0.016,4,4,695.75,459.88,0.5419,34,-44.11,-23.2,0.13548,12,387.75,462.3,0.18662,24,-23.63,120.31,0.136,4,4,734.67,-458.97,0.75581,30,-20.96,27.67,0.18895,12,426.67,-456.55,0.03123,23,12.2,-83.1,0.024],"edges":[0,2,2,4,4,6,6,8,8,10,10,12,12,14,14,16,16,18,18,20,20,22,22,24,24,26,26,28,28,30,30,32,32,34,34,36,36,38,38,40,40,42,42,44,44,46,46,48,48,50,50,52,52,54,54,56,56,58,58,60,60,62,62,64,64,66,66,68,68,70,70,72,72,74,74,76,76,0,116,114,240,238,238,118,118,110,110,98,98,174,174,116,114,112,112,244,242,248,248,250,250,252,252,254,254,256,256,258,258,260,260,262,262,264,264,242,120,102,102,100,100,176,176,108,108,106,106,104,104,210,282,120,246,266,266,268,268,270,270,272,272,278,278,274,274,280,246,284,284,276,276,280,282,286,174,84,84,96,96,86,86,88,88,90,90,92,92,94,94,176,94,178,178,184,184,186,186,76,84,180,180,182,182,288,288,2,80,78,78,82,82,80,122,166,166,136,136,168,168,134,134,164,164,132,132,130,130,128,128,170,170,126,126,158,158,124,124,156,156,122,140,172,172,142,142,144,144,146,146,148,148,150,150,152,152,154,154,162,162,138,138,160,160,140,232,224,224,222,222,220,220,212,212,206,206,208,208,202,202,198,198,180,178,196,196,200,200,290,290,292,292,214,214,216,216,218,218,230,230,294,294,232,174,80,82,176,190,98,190,100,240,296,296,244,298,286,298,210]}},"Back Paw 1":{"Back Paw 1":{"type":"mesh","hull":20,"width":430,"height":428,"uvs":[0.91037,0.90139,0.962,0.74786,0.962,0.53208,0.90005,0.35158,0.80712,0.17107,0.70799,0.04659,0.53865,0,0.38377,0.02169,0.3342,0.07771,0.20617,0.07771,0.06367,0.20842,0.04715,0.3495,0,0.45739,0,0.61092,0.05541,0.76445,0.17106,0.83915,0.31562,0.84744,0.43126,0.94911,0.58202,1,0.80299,0.98853,0.59962,0.7408,0.23099,0.65882,0.34371,0.44731,0.54897,0.29412],"triangles":[15,14,21,22,21,14,21,22,20,22,23,20,3,23,4,13,12,22,13,22,14,6,22,12,12,11,8,22,5,23,8,10,9,8,11,10,8,6,12,6,8,7,23,5,4,5,22,6,19,18,20,18,17,20,19,20,0,17,16,20,0,20,1,15,21,16,16,21,20,20,2,1,20,3,2,3,20,23],"vertices":[1,17,-36.96,-52.79,1,2,17,4.99,-108.03,0.99945,18,-223.17,-9.56,0.00055,2,17,81.45,-159.82,0.92813,18,-177.81,-90,0.07187,2,17,160.36,-181.1,0.68885,18,-116.66,-144.21,0.31115,2,17,246.73,-191.34,0.32273,18,-43.91,-191.88,0.67727,2,17,314.75,-185.93,0.13955,18,19.39,-217.36,0.86045,2,17,372.09,-136.83,0.03535,18,92.61,-198.97,0.96465,2,17,401.76,-76.49,0.00168,18,146.06,-158.17,0.99832,1,18,152.85,-126.82,1,1,18,200.81,-99.78,1,1,18,226.7,-20.95,1,2,17,366.78,122.04,0.00943,18,203.24,35.14,0.99057,2,17,339.92,164.72,0.05453,18,198.22,85.32,0.94547,2,17,285.52,201.58,0.16264,18,165.95,142.56,0.83736,2,17,217.75,218.71,0.31409,18,112.92,188.09,0.68591,2,17,163.39,195.46,0.46191,18,53.9,191.52,0.53809,2,17,125.59,145.99,0.72823,18,-1.99,164.08,0.27177,2,17,61.67,129.23,0.95246,18,-66.68,177.56,0.04754,2,17,7.28,87.77,0.99881,18,-133.85,164.7,0.00119,1,17,-41.94,6.35,1,2,17,94.89,19.29,0.85412,18,-85.95,64.35,0.14588,2,17,212.84,130.84,0.37147,18,69.36,111.63,0.62853,2,17,260.6,39.94,0.23698,18,71.6,8.97,0.76302,2,17,265.38,-69.9,0.24727,18,26.92,-91.49,0.75273],"edges":[0,2,2,4,4,6,6,8,8,10,10,12,12,14,14,16,16,18,18,20,20,22,22,24,24,26,26,28,28,30,30,32,32,34,34,36,36,38,0,38,22,16,24,12,10,44,44,28]}},"Back Paw 2":{"Back Paw 2":{"type":"mesh","hull":20,"width":456,"height":455,"uvs":[0.2256,0.92233,0.11403,0.77882,0.11961,0.54771,0.1475,0.3688,0.21817,0.18801,0.3688,0.03519,0.53245,0,0.70725,0.00164,0.75374,0.08364,0.8895,0.12465,0.95459,0.23088,0.95645,0.32407,0.99922,0.40421,0.99922,0.54771,0.97132,0.66327,0.86346,0.708,0.75374,0.73036,0.66262,0.84964,0.54546,0.92605,0.39111,0.97265,0.57691,0.25213,0.77078,0.38228,0.83446,0.59769,0.41255,0.67481],"triangles":[20,6,21,8,6,7,5,6,20,4,5,20,8,9,10,11,8,10,12,6,11,12,21,6,11,6,8,21,14,20,14,21,13,12,13,21,22,20,14,20,3,4,23,20,22,15,22,14,16,23,22,16,22,15,23,3,20,2,3,23,1,2,23,17,23,16,0,1,23,18,23,17,19,0,23,18,19,23],"vertices":[1,19,-30.36,10.01,1,1,19,-3.11,88.18,1,2,19,86.6,143.09,0.94559,20,-166.58,80.66,0.05441,2,19,161.89,176.57,0.71771,20,-112.27,142.63,0.28229,2,19,248.47,194.13,0.39249,20,-41.04,194.88,0.60751,2,19,344.15,174.15,0.13694,20,54.2,216.88,0.86306,2,19,398.08,120.15,0.03628,20,125.8,190.47,0.96372,2,19,440.7,52.78,0.00067,20,192.75,147.19,0.99933,1,20,190.69,104.33,1,1,20,233.01,55.45,1,1,20,232.22,-1.27,1,2,19,379.11,-122.26,0.00015,20,210.25,-37.54,0.99985,2,19,359.06,-158.43,0.00629,20,207.22,-78.78,0.99371,2,19,304.21,-193.85,0.04853,20,172.28,-133.95,0.95147,2,19,253.14,-211.69,0.10323,20,133.41,-171.56,0.89677,2,19,209.36,-181.42,0.20702,20,80.96,-162.44,0.79298,2,19,173.67,-144.91,0.47538,20,33.25,-144.26,0.52462,2,19,105.54,-139.45,0.84585,20,-30.89,-167.88,0.15415,2,19,47.35,-113.43,0.97053,20,-94.63,-168.67,0.02947,2,19,-8.65,-65.81,0.99994,20,-165.43,-148.92,0.00006,2,19,312.71,40.88,0.1253,20,81.55,82.71,0.8747,2,19,310.93,-65.51,0.08843,20,124.55,-14.62,0.91157,2,19,244.35,-143.08,0.15884,20,96.65,-112.96,0.84116,2,19,110.5,-0.5,0.85078,20,-84.66,-39.66,0.14922],"edges":[0,2,2,4,4,6,6,8,8,10,10,12,12,14,14,16,16,18,18,20,20,22,22,24,24,26,26,28,28,30,30,32,32,34,34,36,36,38,0,38,22,16,12,24,10,40,40,28]}}}}],"animations":{"Доп 2":{"bones":{"bone3":{"rotate":[{"angle":0.47,"curve":0.25,"c3":0.75},{"time":1.2667,"angle":-0.2,"curve":0.25,"c3":0.75},{"time":2.5,"angle":0.47,"curve":0.25,"c3":0.75},{"time":3.7667,"angle":-0.2,"curve":0.25,"c3":0.75},{"time":4.2667,"angle":0.47,"curve":"stepped"},{"time":5,"angle":0.47,"curve":0.25,"c3":0.75},{"time":6.2667,"angle":-0.2,"curve":0.25,"c3":0.75},{"time":7.5,"angle":0.47,"curve":0.25,"c3":0.75},{"time":8.7667,"angle":-0.2,"curve":0.25,"c3":0.75},{"time":10,"angle":0.47}],"translate":[{"x":-0.25,"y":15.99,"curve":0.25,"c3":0.75},{"time":1.2667,"curve":0.266,"c3":0.618,"c4":0.43},{"time":1.6667,"x":-0.07,"y":4.36,"curve":"stepped"},{"time":2.2667,"x":-0.07,"y":4.36,"curve":0.323,"c2":0.3,"c3":0.673,"c4":0.68},{"time":2.5,"x":-0.25,"y":15.99,"curve":0.25,"c3":0.75},{"time":3.7667,"curve":0.25,"c3":0.75},{"time":4.0667,"x":-0.07,"y":4.36,"curve":0.323,"c2":0.3,"c3":0.673,"c4":0.68},{"time":4.2667,"x":-0.25,"y":15.99,"curve":"stepped"},{"time":5,"x":-0.25,"y":15.99,"curve":0.25,"c3":0.75},{"time":6.2667,"curve":0.25,"c3":0.75},{"time":7.5,"x":-0.25,"y":15.99,"curve":0.25,"c3":0.75},{"time":8.7667,"curve":0.25,"c3":0.75},{"time":10,"x":-0.25,"y":15.99}],"scale":[{"curve":0.25,"c3":0.75},{"time":1.2667,"x":1.057,"y":1.057,"curve":0.25,"c3":0.75},{"time":2.5,"curve":0.25,"c3":0.75},{"time":3.7667,"x":1.057,"y":1.057,"curve":0.25,"c3":0.75},{"time":4.2667,"curve":"stepped"},{"time":5,"curve":0.25,"c3":0.75},{"time":6.2667,"x":1.057,"y":1.057,"curve":0.25,"c3":0.75},{"time":7.5,"curve":0.25,"c3":0.75},{"time":8.7667,"x":1.057,"y":1.057,"curve":0.25,"c3":0.75},{"time":10}]},"bone4":{"rotate":[{"angle":2.28,"curve":0.25,"c3":0.75},{"time":1.2667,"angle":-2.03,"curve":0.25,"c3":0.75},{"time":1.9333,"angle":7.51},{"time":2.2667,"angle":-6.27},{"time":2.5,"angle":2.28,"curve":0.25,"c3":0.75},{"time":2.6,"angle":4.88},{"time":2.9333,"angle":-7.94},{"time":3.2667,"angle":7.51},{"time":3.7667,"angle":-2.03,"curve":0.25,"c3":0.75},{"time":4.2667,"angle":2.28,"curve":"stepped"},{"time":5,"angle":2.28,"curve":0.25,"c3":0.75},{"time":6.2667,"angle":-2.03,"curve":0.25,"c3":0.75},{"time":7.5333,"angle":2.28,"curve":0.25,"c3":0.75},{"time":7.6667,"angle":7.51},{"time":8,"angle":-6.27},{"time":8.3333,"angle":4.88},{"time":8.6667,"angle":-7.94},{"time":8.7667,"angle":-2.03,"curve":0.25,"c3":0.75},{"time":9,"angle":7.51},{"time":10,"angle":2.28}],"translate":[{"time":1.9333},{"time":3.2667,"x":109.71,"y":-0.63},{"time":4.2667,"curve":"stepped"},{"time":7.6667},{"time":9,"x":109.71,"y":-0.63},{"time":10}]},"bone17":{"rotate":[{"angle":6.38,"curve":0.25,"c3":0.75},{"time":1.7,"angle":-3.56,"curve":0.25,"c3":0.75},{"time":3.3333,"angle":6.38,"curve":"stepped"},{"time":4.2667,"angle":6.38,"curve":0.25,"c3":0.75},{"time":5.0333,"angle":-3.56,"curve":0.25,"c3":0.75},{"time":6.6667,"angle":6.38,"curve":0.25,"c3":0.75},{"time":8.3667,"angle":-3.56,"curve":0.25,"c3":0.75},{"time":10,"angle":6.38}]},"bone19":{"rotate":[{"angle":9.84,"curve":0.25,"c3":0.75},{"time":1.7,"angle":-0.09,"curve":0.25,"c3":0.75},{"time":3.3333,"angle":9.84,"curve":"stepped"},{"time":4.2667,"angle":9.84,"curve":0.25,"c3":0.75},{"time":5.0333,"angle":-0.09,"curve":0.25,"c3":0.75},{"time":6.6667,"angle":9.84,"curve":0.25,"c3":0.75},{"time":8.3667,"angle":-0.09,"curve":0.25,"c3":0.75},{"time":10,"angle":9.84}]},"bone22":{"rotate":[{"curve":0.25,"c3":0.75},{"time":1.2667,"angle":-5.5,"curve":0.25,"c3":0.75},{"time":2.5,"curve":0.25,"c3":0.75},{"time":3.7667,"angle":-5.5,"curve":0.25,"c3":0.75},{"time":4.2667,"curve":"stepped"},{"time":5,"curve":0.25,"c3":0.75},{"time":6.2667,"angle":-5.5,"curve":0.25,"c3":0.75},{"time":7.5333,"curve":0.25,"c3":0.75},{"time":8.7667,"angle":-5.5,"curve":0.25,"c3":0.75},{"time":10}],"translate":[{"curve":0.25,"c3":0.75},{"time":1.2667,"x":0.29,"y":-18.22,"curve":0.25,"c3":0.75},{"time":2.5,"curve":0.25,"c3":0.75},{"time":3.7667,"x":0.29,"y":-18.22,"curve":0.25,"c3":0.75},{"time":4.2667,"curve":"stepped"},{"time":5,"curve":0.25,"c3":0.75},{"time":6.2667,"x":0.29,"y":-18.22,"curve":0.25,"c3":0.75},{"time":7.5333,"curve":0.25,"c3":0.75},{"time":8.7667,"x":0.29,"y":-18.22,"curve":0.25,"c3":0.75},{"time":10}]},"bone24":{"rotate":[{"curve":0.25,"c3":0.75},{"time":1.2667,"angle":-5.5,"curve":0.25,"c3":0.75},{"time":2.5,"curve":0.25,"c3":0.75},{"time":3.7667,"angle":-5.5,"curve":0.25,"c3":0.75},{"time":4.2667,"curve":"stepped"},{"time":5,"curve":0.25,"c3":0.75},{"time":6.2667,"angle":-5.5,"curve":0.25,"c3":0.75},{"time":7.5333,"curve":0.25,"c3":0.75},{"time":8.7667,"angle":-5.5,"curve":0.25,"c3":0.75},{"time":10}],"translate":[{"curve":0.25,"c3":0.75},{"time":1.2667,"x":0.29,"y":-18.22,"curve":0.25,"c3":0.75},{"time":2.5,"curve":0.25,"c3":0.75},{"time":3.7667,"x":0.29,"y":-18.22,"curve":0.25,"c3":0.75},{"time":4.2667,"curve":"stepped"},{"time":5,"curve":0.25,"c3":0.75},{"time":6.2667,"x":0.29,"y":-18.22,"curve":0.25,"c3":0.75},{"time":7.5333,"curve":0.25,"c3":0.75},{"time":8.7667,"x":0.29,"y":-18.22,"curve":0.25,"c3":0.75},{"time":10}]},"bone11":{"rotate":[{"angle":17.39,"curve":0.25,"c3":0.75},{"time":1.3333,"angle":5.28,"curve":0.25,"c3":0.75},{"time":2.1333,"angle":-2.72,"curve":0.25,"c3":0.75},{"time":2.6667,"angle":18.45,"curve":0.25,"c3":0.75},{"time":3.1333,"angle":17.39,"curve":0.25,"c3":0.75},{"time":3.6667,"angle":5.28,"curve":0.25,"c3":0.75},{"time":4.2667,"angle":17.39,"curve":0.25,"c3":0.75},{"time":6.0667,"angle":-2.72,"curve":0.25,"c3":0.75},{"time":7.9,"angle":2.92,"curve":0.25,"c3":0.75},{"time":8.4333,"angle":17.39},{"time":8.8667,"angle":5.28,"curve":0.25,"c3":0.75},{"time":9.5667,"angle":17.39}]},"bone12":{"rotate":[{"angle":-28.57,"curve":0.25,"c3":0.75},{"time":1.3333,"angle":5.28,"curve":0.25,"c3":0.75},{"time":2.1333,"angle":-28.57,"curve":0.25,"c3":0.75},{"time":2.6667,"angle":-32.15,"curve":0.25,"c3":0.75},{"time":3.1333,"angle":-28.57,"curve":0.25,"c3":0.75},{"time":3.6667,"angle":5.28,"curve":0.25,"c3":0.75},{"time":4.2667,"angle":-28.57,"curve":"stepped"},{"time":6.0667,"angle":-28.57,"curve":0.25,"c3":0.75},{"time":7.9,"angle":2.84,"curve":0.25,"c3":0.75},{"time":8.4333,"angle":-28.57},{"time":8.8667,"angle":5.28,"curve":0.25,"c3":0.75},{"time":9.5667,"angle":-28.57}]},"bone13":{"rotate":[{"angle":-41.79,"curve":0.25,"c3":0.75},{"time":1.3333,"angle":13.25,"curve":0.25,"c3":0.75},{"time":2.1333,"angle":-41.79,"curve":0.25,"c3":0.75},{"time":2.6667,"angle":-32.1,"curve":0.25,"c3":0.75},{"time":3.6667,"angle":13.25,"curve":0.25,"c3":0.75},{"time":4.2667,"angle":-41.79,"curve":"stepped"},{"time":6.0667,"angle":-41.79,"curve":0.25,"c3":0.75},{"time":7.9,"angle":7.42,"curve":0.25,"c3":0.75},{"time":8.4333,"angle":-41.79,"curve":0.25,"c3":0.75},{"time":8.8667,"angle":13.25,"curve":0.25,"c3":0.75},{"time":9.5667,"angle":-41.79}]},"bone14":{"rotate":[{"angle":-26.1,"curve":0.25,"c3":0.75},{"time":1.3333,"angle":13.25,"curve":0.25,"c3":0.75},{"time":2.1333,"angle":-26.1,"curve":0.25,"c3":0.75},{"time":2.6667,"angle":-51.94,"curve":0.25,"c3":0.75},{"time":3.6667,"angle":13.25,"curve":0.25,"c3":0.75},{"time":4.2667,"angle":-26.1,"curve":"stepped"},{"time":6.0667,"angle":-26.1,"curve":0.25,"c3":0.75},{"time":7.9,"angle":13.69,"curve":0.25,"c3":0.75},{"time":8.4333,"angle":-26.1,"curve":0.25,"c3":0.75},{"time":8.8667,"angle":13.25,"curve":0.25,"c3":0.75},{"time":9.5667,"angle":-26.1}]},"bone15":{"rotate":[{"angle":-9.17,"curve":0.25,"c3":0.75},{"time":1.3333,"angle":13.25,"curve":0.25,"c3":0.75},{"time":2.1333,"angle":-9.17,"curve":0.25,"c3":0.75},{"time":2.6667,"angle":-6.24,"curve":0.25,"c3":0.75},{"time":3.6667,"angle":13.25,"curve":0.25,"c3":0.75},{"time":4.2667,"angle":-9.17,"curve":"stepped"},{"time":6.0667,"angle":-9.17,"curve":0.25,"c3":0.75},{"time":7.9,"angle":4.81,"curve":0.25,"c3":0.75},{"time":8.4333,"angle":-9.17,"curve":0.25,"c3":0.75},{"time":8.8667,"angle":13.25,"curve":0.25,"c3":0.75},{"time":9.5667,"angle":-9.17}]},"bone34":{"translate":[{"time":0.5333,"curve":0.505,"c4":0.05},{"time":0.7333,"x":-293.06,"y":5.29,"curve":0.336,"c2":0.03,"c3":0.671,"c4":0.22},{"time":0.9333,"curve":"stepped"},{"time":2.8,"curve":0.505,"c4":0.05},{"time":3.0333,"x":-293.06,"y":5.29,"curve":0.336,"c2":0.03,"c3":0.671,"c4":0.22},{"time":3.2333,"curve":"stepped"},{"time":4.9333,"curve":0.505,"c4":0.05},{"time":5.1667,"x":-293.06,"y":5.29,"curve":0.336,"c2":0.03,"c3":0.671,"c4":0.22},{"time":5.3667,"curve":"stepped"},{"time":7.1333,"curve":0.505,"c4":0.05},{"time":7.3333,"x":-293.06,"y":5.29,"curve":0.336,"c2":0.03,"c3":0.671,"c4":0.22},{"time":7.5667,"curve":"stepped"},{"time":9.2333,"curve":0.505,"c4":0.05},{"time":9.4333,"x":-293.06,"y":5.29,"curve":0.336,"c2":0.03,"c3":0.671,"c4":0.22},{"time":9.6667}]},"bone41":{"translate":[{"time":1.9333},{"time":2.2667,"x":293.97,"y":32.32,"curve":"stepped"},{"time":3.2667,"x":293.97,"y":32.32},{"time":4.2667,"curve":"stepped"},{"time":7.6667},{"time":8,"x":293.97,"y":32.32,"curve":"stepped"},{"time":9,"x":293.97,"y":32.32},{"time":10}]},"bone36":{"translate":[{"time":1.9333},{"time":2,"x":49.08,"y":-0.65},{"time":2.2667,"x":47.24,"y":6.59},{"time":4.1,"x":49.08,"y":-0.65},{"time":4.2667,"curve":"stepped"},{"time":7.7333,"curve":0.25,"c3":0.75},{"time":8,"x":47.24,"y":6.59},{"time":8.0667,"x":49.08,"y":-0.65,"curve":"stepped"},{"time":9.7,"x":49.08,"y":-0.65},{"time":9.9333}]},"bone35":{"rotate":[{"time":1.6667,"curve":0.25,"c3":0.75},{"time":2,"angle":10.61,"curve":"stepped"},{"time":4.1,"angle":10.61},{"time":4.4,"curve":"stepped"},{"time":7.7333,"curve":0.25,"c3":0.75},{"time":8.0667,"angle":10.61,"curve":"stepped"},{"time":9.7,"angle":10.61},{"time":9.9333}],"translate":[{"time":1.6667,"curve":0.25,"c3":0.75},{"time":2,"x":0.39,"y":29.26,"curve":"stepped"},{"time":4.1,"x":0.39,"y":29.26},{"time":4.4,"curve":"stepped"},{"time":7.7333,"curve":0.25,"c3":0.75},{"time":8.0667,"x":0.39,"y":29.26,"curve":"stepped"},{"time":9.7,"x":0.39,"y":29.26},{"time":9.9333}]},"bone39":{"rotate":[{"time":1.6667,"curve":0.25,"c3":0.75},{"time":2,"angle":-0.46,"curve":"stepped"},{"time":4.1,"angle":-0.46},{"time":4.4,"curve":"stepped"},{"time":7.7333,"curve":0.25,"c3":0.75},{"time":8.0667,"angle":-0.46,"curve":"stepped"},{"time":9.7,"angle":-0.46},{"time":9.9333}],"translate":[{"time":1.6667,"curve":0.25,"c3":0.75},{"time":2,"x":-0.38,"y":-28.98,"curve":"stepped"},{"time":4.1,"x":-0.38,"y":-28.98},{"time":4.4,"curve":"stepped"},{"time":7.7333,"curve":0.25,"c3":0.75},{"time":8.0667,"x":-0.38,"y":-28.98,"curve":"stepped"},{"time":9.7,"x":-0.38,"y":-28.98},{"time":9.9333}]},"Правая Лапа":{"translate":[{"time":1.9333,"curve":0.25,"c3":0.75},{"time":2.0667,"x":26.38,"y":0.43,"curve":0.25,"c3":0.75},{"time":2.2333,"curve":"stepped"},{"time":2.5333,"curve":0.25,"c3":0.75},{"time":2.6667,"x":26.38,"y":0.43,"curve":0.25,"c3":0.75},{"time":2.8,"curve":"stepped"},{"time":3.1,"curve":0.25,"c3":0.75},{"time":3.2333,"x":26.38,"y":0.43,"curve":0.25,"c3":0.75},{"time":3.3667,"curve":"stepped"},{"time":3.6667,"curve":0.25,"c3":0.75},{"time":3.8,"x":26.38,"y":0.43,"curve":0.25,"c3":0.75},{"time":3.9333,"curve":"stepped"},{"time":7.7,"curve":0.25,"c3":0.75},{"time":7.8333,"x":26.38,"y":0.43,"curve":0.25,"c3":0.75},{"time":8,"curve":"stepped"},{"time":8.3,"curve":0.25,"c3":0.75},{"time":8.4333,"x":26.38,"y":0.43,"curve":0.25,"c3":0.75},{"time":8.5667,"curve":"stepped"},{"time":8.8667,"curve":0.25,"c3":0.75},{"time":9,"x":26.38,"y":0.43,"curve":0.25,"c3":0.75},{"time":9.1333,"curve":"stepped"},{"time":9.4333,"curve":0.25,"c3":0.75},{"time":9.5667,"x":26.38,"y":0.43,"curve":0.25,"c3":0.75},{"time":9.7}]},"bone40":{"translate":[{"time":7.7,"curve":0.25,"c3":0.75},{"time":7.8333,"x":-25.83,"y":20.15,"curve":"stepped"},{"time":7.9,"x":-25.83,"y":20.15,"curve":0.25,"c3":0.75},{"time":8,"curve":"stepped"},{"time":8.3,"curve":0.25,"c3":0.75},{"time":8.4,"x":-25.83,"y":20.15,"curve":"stepped"},{"time":8.4667,"x":-25.83,"y":20.15,"curve":0.25,"c3":0.75},{"time":8.5667,"curve":"stepped"},{"time":8.8667,"curve":0.25,"c3":0.75},{"time":8.9667,"x":-25.83,"y":20.15,"curve":"stepped"},{"time":9.0333,"x":-25.83,"y":20.15,"curve":0.25,"c3":0.75},{"time":9.1333,"curve":"stepped"},{"time":9.4333,"curve":0.25,"c3":0.75},{"time":9.5333,"x":-25.83,"y":20.15,"curve":"stepped"},{"time":9.6,"x":-25.83,"y":20.15,"curve":0.25,"c3":0.75},{"time":9.7}]},"bone47":{"translate":[{"time":2.2333,"curve":0.25,"c3":0.75},{"time":2.3667,"x":-24.4,"y":-24.07,"curve":"stepped"},{"time":2.4333,"x":-24.4,"y":-24.07,"curve":0.25,"c3":0.75},{"time":2.5333,"curve":"stepped"},{"time":2.8,"curve":0.25,"c3":0.75},{"time":2.9333,"x":-24.4,"y":-24.07,"curve":"stepped"},{"time":3,"x":-24.4,"y":-24.07,"curve":0.25,"c3":0.75},{"time":3.1,"curve":"stepped"},{"time":3.3667,"curve":0.25,"c3":0.75},{"time":3.5,"x":-24.4,"y":-24.07,"curve":"stepped"},{"time":3.5667,"x":-24.4,"y":-24.07,"curve":0.25,"c3":0.75},{"time":3.6667,"curve":"stepped"},{"time":3.9333,"curve":0.25,"c3":0.75},{"time":4.0667,"x":-24.4,"y":-24.07,"curve":"stepped"},{"time":4.1333,"x":-24.4,"y":-24.07,"curve":0.25,"c3":0.75},{"time":4.2333,"curve":"stepped"},{"time":8,"curve":0.25,"c3":0.75},{"time":8.1333,"x":-24.4,"y":-24.07,"curve":"stepped"},{"time":8.2,"x":-24.4,"y":-24.07,"curve":0.25,"c3":0.75},{"time":8.3,"curve":"stepped"},{"time":8.5667,"curve":0.25,"c3":0.75},{"time":8.7,"x":-24.4,"y":-24.07,"curve":"stepped"},{"time":8.7667,"x":-24.4,"y":-24.07,"curve":0.25,"c3":0.75},{"time":8.8667,"curve":"stepped"},{"time":9.1333,"curve":0.25,"c3":0.75},{"time":9.2667,"x":-24.4,"y":-24.07,"curve":"stepped"},{"time":9.3333,"x":-24.4,"y":-24.07,"curve":0.25,"c3":0.75},{"time":9.4333,"curve":"stepped"},{"time":9.7,"curve":0.25,"c3":0.75},{"time":9.8333,"x":-24.4,"y":-24.07,"curve":"stepped"},{"time":9.9,"x":-24.4,"y":-24.07,"curve":0.25,"c3":0.75},{"time":10}]},"Левая Лапа":{"translate":[{"time":2.2333,"curve":0.25,"c3":0.75},{"time":2.3667,"x":26.38,"y":0.43,"curve":0.25,"c3":0.75},{"time":2.5333,"curve":"stepped"},{"time":2.8,"curve":0.25,"c3":0.75},{"time":2.9333,"x":26.38,"y":0.43,"curve":0.25,"c3":0.75},{"time":3.1,"curve":"stepped"},{"time":3.3667,"curve":0.25,"c3":0.75},{"time":3.5,"x":26.38,"y":0.43,"curve":0.25,"c3":0.75},{"time":3.6667,"curve":"stepped"},{"time":3.9333,"curve":0.25,"c3":0.75},{"time":4.0667,"x":26.38,"y":0.43,"curve":0.25,"c3":0.75},{"time":4.2333,"curve":"stepped"},{"time":8,"curve":0.25,"c3":0.75},{"time":8.1333,"x":26.38,"y":0.43,"curve":0.25,"c3":0.75},{"time":8.3,"curve":"stepped"},{"time":8.5667,"curve":0.25,"c3":0.75},{"time":8.7,"x":26.38,"y":0.43,"curve":0.25,"c3":0.75},{"time":8.8667,"curve":"stepped"},{"time":9.1333,"curve":0.25,"c3":0.75},{"time":9.2667,"x":26.38,"y":0.43,"curve":0.25,"c3":0.75},{"time":9.4333,"curve":"stepped"},{"time":9.7,"curve":0.25,"c3":0.75},{"time":9.8333,"x":26.38,"y":0.43,"curve":0.25,"c3":0.75},{"time":10}]},"bone49":{"translate":[{"time":1.9333},{"time":2.2667,"x":18.97,"y":2.09},{"time":4.2667,"curve":"stepped"},{"time":7.6667},{"time":8,"x":18.97,"y":2.09},{"time":10}],"scale":[{"time":1.9333,"curve":0.379,"c2":0.6,"c3":0.724},{"time":2.1667,"x":1.122,"y":1.122,"curve":0.25,"c3":0.75},{"time":2.2667,"x":1.291,"y":1.291},{"time":3.9333,"x":1.122,"y":1.122,"curve":0.25,"c3":0.75},{"time":4.2667,"curve":"stepped"},{"time":7.7333,"curve":0.25,"c3":0.75},{"time":8,"x":1.291,"y":1.291},{"time":8.3,"x":1.122,"y":1.122,"curve":"stepped"},{"time":9.3333,"x":1.122,"y":1.122,"curve":0.25,"c3":0.75},{"time":10}]},"bone48":{"translate":[{"time":1.9333},{"time":2.2667,"x":18.96,"y":2.09},{"time":4.2667,"curve":"stepped"},{"time":7.6667},{"time":8,"x":18.96,"y":2.09},{"time":10}],"scale":[{"time":1.9333,"curve":0.379,"c2":0.6,"c3":0.724},{"time":2.1667,"x":1.122,"y":1.122,"curve":0.25,"c3":0.75},{"time":2.2667,"x":1.291,"y":1.291},{"time":3.9333,"x":1.122,"y":1.122,"curve":0.25,"c3":0.75},{"time":4.2667,"curve":"stepped"},{"time":7.7333,"curve":0.25,"c3":0.75},{"time":8,"x":1.291,"y":1.291},{"time":8.3,"x":1.122,"y":1.122,"curve":"stepped"},{"time":9.3333,"x":1.122,"y":1.122,"curve":0.25,"c3":0.75},{"time":10}]},"bone51":{"rotate":[{"curve":0.25,"c3":0.75},{"time":1.1667,"angle":-1.89,"curve":0.25,"c3":0.75},{"time":2.5,"curve":0.25,"c3":0.75},{"time":3.6667,"angle":-1.89,"curve":0.25,"c3":0.75},{"time":5,"curve":0.25,"c3":0.75},{"time":6.1667,"angle":-1.89,"curve":0.25,"c3":0.75},{"time":7.5,"curve":0.25,"c3":0.75},{"time":8.6667,"angle":-1.89,"curve":0.25,"c3":0.75},{"time":10}]},"bone52":{"rotate":[{"curve":0.25,"c3":0.75},{"time":1.1667,"angle":-1.89,"curve":0.25,"c3":0.75},{"time":2.5,"curve":0.25,"c3":0.75},{"time":3.6667,"angle":-1.89,"curve":0.25,"c3":0.75},{"time":5,"curve":0.25,"c3":0.75},{"time":6.1667,"angle":-1.89,"curve":0.25,"c3":0.75},{"time":7.5,"curve":0.25,"c3":0.75},{"time":8.6667,"angle":-1.89,"curve":0.25,"c3":0.75},{"time":10}]},"bone54":{"rotate":[{"curve":0.25,"c3":0.75},{"time":1.1667,"angle":-1.89,"curve":0.25,"c3":0.75},{"time":2.5,"curve":0.25,"c3":0.75},{"time":3.6667,"angle":-1.89,"curve":0.25,"c3":0.75},{"time":5,"curve":0.25,"c3":0.75},{"time":6.1667,"angle":-1.89,"curve":0.25,"c3":0.75},{"time":7.5,"curve":0.25,"c3":0.75},{"time":8.6667,"angle":-1.89,"curve":0.25,"c3":0.75},{"time":10}]},"bone53":{"rotate":[{"curve":0.25,"c3":0.75},{"time":1.1667,"angle":-1.89,"curve":0.25,"c3":0.75},{"time":2.5,"curve":0.25,"c3":0.75},{"time":3.6667,"angle":-1.89,"curve":0.25,"c3":0.75},{"time":5,"curve":0.25,"c3":0.75},{"time":6.1667,"angle":-1.89,"curve":0.25,"c3":0.75},{"time":7.5,"curve":0.25,"c3":0.75},{"time":8.6667,"angle":-1.89,"curve":0.25,"c3":0.75},{"time":10}]},"bone55":{"rotate":[{"curve":0.25,"c3":0.75},{"time":1.1667,"angle":-1.89,"curve":0.25,"c3":0.75},{"time":2.5,"curve":0.25,"c3":0.75},{"time":3.6667,"angle":-1.89,"curve":0.25,"c3":0.75},{"time":5,"curve":0.25,"c3":0.75},{"time":6.1667,"angle":-1.89,"curve":0.25,"c3":0.75},{"time":7.5,"curve":0.25,"c3":0.75},{"time":8.6667,"angle":-1.89,"curve":0.25,"c3":0.75},{"time":10}]}}},"Нажатие":{"bones":{"bone3":{"rotate":[{"angle":0.47}],"translate":[{"x":-0.25,"y":15.99,"curve":0.25,"c3":0.625,"c4":0.5},{"time":0.1667,"x":13.5,"y":16.21,"curve":0.375,"c2":0.5,"c3":0.75},{"time":0.3333,"x":-0.25,"y":15.99}]},"bone4":{"rotate":[{"angle":2.28}]},"bone17":{"rotate":[{"angle":6.38}]},"bone19":{"rotate":[{"angle":9.84}]},"bone22":{"rotate":[{"curve":0.25,"c3":0.625,"c4":0.5},{"time":0.1667,"angle":8.53,"curve":0.375,"c2":0.5,"c3":0.75},{"time":0.3333}]},"bone24":{"rotate":[{"curve":0.25,"c3":0.625,"c4":0.5},{"time":0.1667,"angle":-14.51,"curve":0.375,"c2":0.5,"c3":0.75},{"time":0.3333}]},"bone11":{"rotate":[{"angle":17.39}]},"bone12":{"rotate":[{"angle":-28.57,"curve":0.25,"c3":0.625,"c4":0.5},{"time":0.1667,"angle":-24,"curve":0.375,"c2":0.5,"c3":0.75},{"time":0.3333,"angle":-28.57}]},"bone13":{"rotate":[{"angle":-41.79,"curve":0.25,"c3":0.625,"c4":0.5},{"time":0.1667,"angle":7.49,"curve":0.375,"c2":0.5,"c3":0.75},{"time":0.3333,"angle":-41.79}]},"bone14":{"rotate":[{"angle":-26.1,"curve":0.25,"c3":0.625,"c4":0.5},{"time":0.1667,"angle":23.19,"curve":0.375,"c2":0.5,"c3":0.75},{"time":0.3333,"angle":-26.1}]},"bone15":{"rotate":[{"angle":-9.17,"curve":0.25,"c3":0.625,"c4":0.5},{"time":0.1667,"angle":40.12,"curve":0.375,"c2":0.5,"c3":0.75},{"time":0.3333,"angle":-9.17}]},"bone36":{"translate":[{},{"time":0.1667,"x":41.22,"y":-1.64},{"time":0.3333}]},"bone18":{"rotate":[{},{"time":0.1667,"angle":-2.65},{"time":0.3333}]},"bone16":{"rotate":[{},{"time":0.1667,"angle":3.69},{"time":0.3333}]},"bone41":{"translate":[{},{"time":0.1667,"x":129.15,"y":-5.13},{"time":0.3333}]}}},"Основная":{"bones":{"bone3":{"rotate":[{"angle":0.47,"curve":0.25,"c3":0.75},{"time":1.2667,"angle":-0.2,"curve":0.25,"c3":0.75},{"time":2.5,"angle":0.47,"curve":0.25,"c3":0.75},{"time":3.7667,"angle":-0.2,"curve":0.25,"c3":0.75},{"time":5,"angle":0.47,"curve":0.25,"c3":0.75},{"time":6.2667,"angle":-0.2,"curve":0.25,"c3":0.75},{"time":7.5,"angle":0.47,"curve":0.25,"c3":0.75},{"time":8.7667,"angle":-0.2,"curve":0.25,"c3":0.75},{"time":10,"angle":0.47}],"translate":[{"x":-0.25,"y":15.99,"curve":0.25,"c3":0.75},{"time":1.2667,"curve":0.266,"c3":0.618,"c4":0.43},{"time":1.6667,"x":-0.07,"y":4.36,"curve":"stepped"},{"time":2.2667,"x":-0.07,"y":4.36,"curve":0.323,"c2":0.3,"c3":0.673,"c4":0.68},{"time":2.5,"x":-0.25,"y":15.99,"curve":0.25,"c3":0.75},{"time":3.7667,"curve":0.25,"c3":0.75},{"time":4.0667,"x":-0.07,"y":4.36,"curve":0.323,"c2":0.3,"c3":0.673,"c4":0.68},{"time":5,"x":-0.25,"y":15.99,"curve":0.25,"c3":0.75},{"time":6.2667,"curve":0.25,"c3":0.75},{"time":7.5,"x":-0.25,"y":15.99,"curve":0.25,"c3":0.75},{"time":8.7667,"curve":0.25,"c3":0.75},{"time":10,"x":-0.25,"y":15.99}],"scale":[{"curve":0.25,"c3":0.75},{"time":1.2667,"x":1.057,"y":1.057,"curve":0.25,"c3":0.75},{"time":2.5,"curve":0.25,"c3":0.75},{"time":3.7667,"x":1.057,"y":1.057,"curve":0.25,"c3":0.75},{"time":5,"curve":0.25,"c3":0.75},{"time":6.2667,"x":1.057,"y":1.057,"curve":0.25,"c3":0.75},{"time":7.5,"curve":0.25,"c3":0.75},{"time":8.7667,"x":1.057,"y":1.057,"curve":0.25,"c3":0.75},{"time":10}]},"bone4":{"rotate":[{"angle":2.28,"curve":0.25,"c3":0.75},{"time":1.2667,"angle":-2.03,"curve":0.25,"c3":0.75},{"time":2.5,"angle":2.28,"curve":0.25,"c3":0.75},{"time":3.7667,"angle":-2.03,"curve":0.25,"c3":0.75},{"time":5,"angle":2.28,"curve":0.25,"c3":0.75},{"time":6.2667,"angle":-2.03,"curve":0.25,"c3":0.75},{"time":7.5333,"angle":2.28,"curve":0.25,"c3":0.75},{"time":8.7667,"angle":-2.03,"curve":0.25,"c3":0.75},{"time":10,"angle":2.28}],"translate":[{"time":1.6667,"curve":0.697,"c3":0.44},{"time":2.1667,"x":65.48,"y":-0.15,"curve":"stepped"},{"time":3.9333,"x":65.48,"y":-0.15,"curve":0.697,"c3":0.44},{"time":4.7,"curve":"stepped"},{"time":7.7333,"curve":0.697,"c3":0.44},{"time":8.3,"x":65.48,"y":-0.15,"curve":"stepped"},{"time":9.3333,"x":65.48,"y":-0.15,"curve":0.697,"c3":0.44},{"time":10}]},"bone17":{"rotate":[{"angle":6.38,"curve":0.25,"c3":0.75},{"time":1.7,"angle":-3.56,"curve":0.25,"c3":0.75},{"time":3.3333,"angle":6.38,"curve":0.25,"c3":0.75},{"time":5.0333,"angle":-3.56,"curve":0.25,"c3":0.75},{"time":6.6667,"angle":6.38,"curve":0.25,"c3":0.75},{"time":8.3667,"angle":-3.56,"curve":0.25,"c3":0.75},{"time":10,"angle":6.38}]},"bone19":{"rotate":[{"angle":9.84,"curve":0.25,"c3":0.75},{"time":1.7,"angle":-0.09,"curve":0.25,"c3":0.75},{"time":3.3333,"angle":9.84,"curve":0.25,"c3":0.75},{"time":5.0333,"angle":-0.09,"curve":0.25,"c3":0.75},{"time":6.6667,"angle":9.84,"curve":0.25,"c3":0.75},{"time":8.3667,"angle":-0.09,"curve":0.25,"c3":0.75},{"time":10,"angle":9.84}]},"bone22":{"rotate":[{"curve":0.25,"c3":0.75},{"time":1.2667,"angle":-5.5,"curve":0.25,"c3":0.75},{"time":2.5,"curve":0.25,"c3":0.75},{"time":3.7667,"angle":-5.5,"curve":0.25,"c3":0.75},{"time":5,"curve":0.25,"c3":0.75},{"time":6.2667,"angle":-5.5,"curve":0.25,"c3":0.75},{"time":7.5333,"curve":0.25,"c3":0.75},{"time":8.7667,"angle":-5.5,"curve":0.25,"c3":0.75},{"time":10}],"translate":[{"curve":0.25,"c3":0.75},{"time":1.2667,"x":0.29,"y":-18.22,"curve":0.25,"c3":0.75},{"time":2.5,"curve":0.25,"c3":0.75},{"time":3.7667,"x":0.29,"y":-18.22,"curve":0.25,"c3":0.75},{"time":5,"curve":0.25,"c3":0.75},{"time":6.2667,"x":0.29,"y":-18.22,"curve":0.25,"c3":0.75},{"time":7.5333,"curve":0.25,"c3":0.75},{"time":8.7667,"x":0.29,"y":-18.22,"curve":0.25,"c3":0.75},{"time":10}]},"bone24":{"rotate":[{"curve":0.25,"c3":0.75},{"time":1.2667,"angle":-5.5,"curve":0.25,"c3":0.75},{"time":2.5,"curve":0.25,"c3":0.75},{"time":3.7667,"angle":-5.5,"curve":0.25,"c3":0.75},{"time":5,"curve":0.25,"c3":0.75},{"time":6.2667,"angle":-5.5,"curve":0.25,"c3":0.75},{"time":7.5333,"curve":0.25,"c3":0.75},{"time":8.7667,"angle":-5.5,"curve":0.25,"c3":0.75},{"time":10}],"translate":[{"curve":0.25,"c3":0.75},{"time":1.2667,"x":0.29,"y":-18.22,"curve":0.25,"c3":0.75},{"time":2.5,"curve":0.25,"c3":0.75},{"time":3.7667,"x":0.29,"y":-18.22,"curve":0.25,"c3":0.75},{"time":5,"curve":0.25,"c3":0.75},{"time":6.2667,"x":0.29,"y":-18.22,"curve":0.25,"c3":0.75},{"time":7.5333,"curve":0.25,"c3":0.75},{"time":8.7667,"x":0.29,"y":-18.22,"curve":0.25,"c3":0.75},{"time":10}]},"bone11":{"rotate":[{"angle":17.39,"curve":0.25,"c3":0.75},{"time":1.3333,"angle":5.28,"curve":0.25,"c3":0.75},{"time":2.1333,"angle":-2.72,"curve":0.25,"c3":0.75},{"time":2.6667,"angle":18.45,"curve":0.25,"c3":0.75},{"time":3.1333,"angle":17.39,"curve":0.25,"c3":0.75},{"time":3.6667,"angle":5.28,"curve":0.25,"c3":0.75},{"time":6.0667,"angle":-2.72,"curve":0.25,"c3":0.75},{"time":7.9,"angle":2.92,"curve":0.25,"c3":0.75},{"time":8.4333,"angle":17.39},{"time":8.8667,"angle":5.28,"curve":0.25,"c3":0.75},{"time":9.5667,"angle":17.39}]},"bone12":{"rotate":[{"angle":-28.57,"curve":0.25,"c3":0.75},{"time":1.3333,"angle":5.28,"curve":0.25,"c3":0.75},{"time":2.1333,"angle":-28.57,"curve":0.25,"c3":0.75},{"time":2.6667,"angle":-32.15,"curve":0.25,"c3":0.75},{"time":3.1333,"angle":-28.57,"curve":0.25,"c3":0.75},{"time":3.6667,"angle":5.28,"curve":0.25,"c3":0.75},{"time":6.0667,"angle":-28.57,"curve":0.25,"c3":0.75},{"time":7.9,"angle":2.84,"curve":0.25,"c3":0.75},{"time":8.4333,"angle":-28.57},{"time":8.8667,"angle":5.28,"curve":0.25,"c3":0.75},{"time":9.5667,"angle":-28.57}]},"bone13":{"rotate":[{"angle":-41.79,"curve":0.25,"c3":0.75},{"time":1.3333,"angle":13.25,"curve":0.25,"c3":0.75},{"time":2.1333,"angle":-41.79,"curve":0.25,"c3":0.75},{"time":2.6667,"angle":-32.1,"curve":0.25,"c3":0.75},{"time":3.6667,"angle":13.25,"curve":0.25,"c3":0.75},{"time":6.0667,"angle":-41.79,"curve":0.25,"c3":0.75},{"time":7.9,"angle":7.42,"curve":0.25,"c3":0.75},{"time":8.4333,"angle":-41.79,"curve":0.25,"c3":0.75},{"time":8.8667,"angle":13.25,"curve":0.25,"c3":0.75},{"time":9.5667,"angle":-41.79}]},"bone14":{"rotate":[{"angle":-26.1,"curve":0.25,"c3":0.75},{"time":1.3333,"angle":13.25,"curve":0.25,"c3":0.75},{"time":2.1333,"angle":-26.1,"curve":0.25,"c3":0.75},{"time":2.6667,"angle":-51.94,"curve":0.25,"c3":0.75},{"time":3.6667,"angle":13.25,"curve":0.25,"c3":0.75},{"time":6.0667,"angle":-26.1,"curve":0.25,"c3":0.75},{"time":7.9,"angle":13.69,"curve":0.25,"c3":0.75},{"time":8.4333,"angle":-26.1,"curve":0.25,"c3":0.75},{"time":8.8667,"angle":13.25,"curve":0.25,"c3":0.75},{"time":9.5667,"angle":-26.1}]},"bone15":{"rotate":[{"angle":-9.17,"curve":0.25,"c3":0.75},{"time":1.3333,"angle":13.25,"curve":0.25,"c3":0.75},{"time":2.1333,"angle":-9.17,"curve":0.25,"c3":0.75},{"time":2.6667,"angle":-6.24,"curve":0.25,"c3":0.75},{"time":3.6667,"angle":13.25,"curve":0.25,"c3":0.75},{"time":6.0667,"angle":-9.17,"curve":0.25,"c3":0.75},{"time":7.9,"angle":4.81,"curve":0.25,"c3":0.75},{"time":8.4333,"angle":-9.17,"curve":0.25,"c3":0.75},{"time":8.8667,"angle":13.25,"curve":0.25,"c3":0.75},{"time":9.5667,"angle":-9.17}]},"bone34":{"translate":[{"time":0.5333,"curve":0.505,"c4":0.05},{"time":0.7333,"x":-293.06,"y":5.29,"curve":0.336,"c2":0.03,"c3":0.671,"c4":0.22},{"time":0.9333,"curve":"stepped"},{"time":2.8,"curve":0.505,"c4":0.05},{"time":3.0333,"x":-293.06,"y":5.29,"curve":0.336,"c2":0.03,"c3":0.671,"c4":0.22},{"time":3.2333,"curve":"stepped"},{"time":4.9333,"curve":0.505,"c4":0.05},{"time":5.1667,"x":-293.06,"y":5.29,"curve":0.336,"c2":0.03,"c3":0.671,"c4":0.22},{"time":5.3667,"curve":"stepped"},{"time":7.1333,"curve":0.505,"c4":0.05},{"time":7.3333,"x":-293.06,"y":5.29,"curve":0.336,"c2":0.03,"c3":0.671,"c4":0.22},{"time":7.5667,"curve":"stepped"},{"time":9.2333,"curve":0.505,"c4":0.05},{"time":9.4333,"x":-293.06,"y":5.29,"curve":0.336,"c2":0.03,"c3":0.671,"c4":0.22},{"time":9.6667}]},"bone41":{"translate":[{"time":1.6667,"curve":0.25,"c3":0.75},{"time":2.0667,"x":320.74,"y":11.91,"curve":0.25,"c3":0.75},{"time":4.0667,"x":308.43,"y":11.33,"curve":0.25,"c3":0.75},{"time":4.4,"curve":"stepped"},{"time":7.7,"curve":0.25,"c3":0.75},{"time":8.1,"x":320.74,"y":11.91,"curve":0.25,"c3":0.75},{"time":9.7,"x":308.43,"y":11.33,"curve":0.25,"c3":0.75},{"time":10}]},"bone36":{"translate":[{"time":1.6667,"curve":0.25,"c3":0.75},{"time":2,"x":49.08,"y":-0.65,"curve":"stepped"},{"time":4.1,"x":49.08,"y":-0.65},{"time":4.4,"curve":"stepped"},{"time":7.7333,"curve":0.25,"c3":0.75},{"time":8.0667,"x":49.08,"y":-0.65,"curve":"stepped"},{"time":9.7,"x":49.08,"y":-0.65},{"time":9.9333}]},"bone35":{"rotate":[{"time":1.6667,"curve":0.25,"c3":0.75},{"time":2,"angle":10.61,"curve":"stepped"},{"time":4.1,"angle":10.61},{"time":4.4,"curve":"stepped"},{"time":7.7333,"curve":0.25,"c3":0.75},{"time":8.0667,"angle":10.61,"curve":"stepped"},{"time":9.7,"angle":10.61},{"time":9.9333}],"translate":[{"time":1.6667,"curve":0.25,"c3":0.75},{"time":2,"x":0.39,"y":29.26,"curve":"stepped"},{"time":4.1,"x":0.39,"y":29.26},{"time":4.4,"curve":"stepped"},{"time":7.7333,"curve":0.25,"c3":0.75},{"time":8.0667,"x":0.39,"y":29.26,"curve":"stepped"},{"time":9.7,"x":0.39,"y":29.26},{"time":9.9333}]},"bone39":{"rotate":[{"time":1.6667,"curve":0.25,"c3":0.75},{"time":2,"angle":-0.46,"curve":"stepped"},{"time":4.1,"angle":-0.46},{"time":4.4,"curve":"stepped"},{"time":7.7333,"curve":0.25,"c3":0.75},{"time":8.0667,"angle":-0.46,"curve":"stepped"},{"time":9.7,"angle":-0.46},{"time":9.9333}],"translate":[{"time":1.6667,"curve":0.25,"c3":0.75},{"time":2,"x":-0.38,"y":-28.98,"curve":"stepped"},{"time":4.1,"x":-0.38,"y":-28.98},{"time":4.4,"curve":"stepped"},{"time":7.7333,"curve":0.25,"c3":0.75},{"time":8.0667,"x":-0.38,"y":-28.98,"curve":"stepped"},{"time":9.7,"x":-0.38,"y":-28.98},{"time":9.9333}]},"Правая Лапа":{"translate":[{"time":1.9333,"curve":0.25,"c3":0.75},{"time":2.0667,"x":26.38,"y":0.43,"curve":0.25,"c3":0.75},{"time":2.2333,"curve":"stepped"},{"time":2.5333,"curve":0.25,"c3":0.75},{"time":2.6667,"x":26.38,"y":0.43,"curve":0.25,"c3":0.75},{"time":2.8,"curve":"stepped"},{"time":3.1,"curve":0.25,"c3":0.75},{"time":3.2333,"x":26.38,"y":0.43,"curve":0.25,"c3":0.75},{"time":3.3667,"curve":"stepped"},{"time":3.6667,"curve":0.25,"c3":0.75},{"time":3.8,"x":26.38,"y":0.43,"curve":0.25,"c3":0.75},{"time":3.9333,"curve":"stepped"},{"time":7.7,"curve":0.25,"c3":0.75},{"time":7.8333,"x":26.38,"y":0.43,"curve":0.25,"c3":0.75},{"time":8,"curve":"stepped"},{"time":8.3,"curve":0.25,"c3":0.75},{"time":8.4333,"x":26.38,"y":0.43,"curve":0.25,"c3":0.75},{"time":8.5667,"curve":"stepped"},{"time":8.8667,"curve":0.25,"c3":0.75},{"time":9,"x":26.38,"y":0.43,"curve":0.25,"c3":0.75},{"time":9.1333,"curve":"stepped"},{"time":9.4333,"curve":0.25,"c3":0.75},{"time":9.5667,"x":26.38,"y":0.43,"curve":0.25,"c3":0.75},{"time":9.7}]},"bone40":{"translate":[{"time":7.7,"curve":0.25,"c3":0.75},{"time":7.8333,"x":-25.83,"y":20.15,"curve":"stepped"},{"time":7.9,"x":-25.83,"y":20.15,"curve":0.25,"c3":0.75},{"time":8,"curve":"stepped"},{"time":8.3,"curve":0.25,"c3":0.75},{"time":8.4,"x":-25.83,"y":20.15,"curve":"stepped"},{"time":8.4667,"x":-25.83,"y":20.15,"curve":0.25,"c3":0.75},{"time":8.5667,"curve":"stepped"},{"time":8.8667,"curve":0.25,"c3":0.75},{"time":8.9667,"x":-25.83,"y":20.15,"curve":"stepped"},{"time":9.0333,"x":-25.83,"y":20.15,"curve":0.25,"c3":0.75},{"time":9.1333,"curve":"stepped"},{"time":9.4333,"curve":0.25,"c3":0.75},{"time":9.5333,"x":-25.83,"y":20.15,"curve":"stepped"},{"time":9.6,"x":-25.83,"y":20.15,"curve":0.25,"c3":0.75},{"time":9.7}]},"bone47":{"translate":[{"time":2.2333,"curve":0.25,"c3":0.75},{"time":2.3667,"x":-24.4,"y":-24.07,"curve":"stepped"},{"time":2.4333,"x":-24.4,"y":-24.07,"curve":0.25,"c3":0.75},{"time":2.5333,"curve":"stepped"},{"time":2.8,"curve":0.25,"c3":0.75},{"time":2.9333,"x":-24.4,"y":-24.07,"curve":"stepped"},{"time":3,"x":-24.4,"y":-24.07,"curve":0.25,"c3":0.75},{"time":3.1,"curve":"stepped"},{"time":3.3667,"curve":0.25,"c3":0.75},{"time":3.5,"x":-24.4,"y":-24.07,"curve":"stepped"},{"time":3.5667,"x":-24.4,"y":-24.07,"curve":0.25,"c3":0.75},{"time":3.6667,"curve":"stepped"},{"time":3.9333,"curve":0.25,"c3":0.75},{"time":4.0667,"x":-24.4,"y":-24.07,"curve":"stepped"},{"time":4.1333,"x":-24.4,"y":-24.07,"curve":0.25,"c3":0.75},{"time":4.2333,"curve":"stepped"},{"time":8,"curve":0.25,"c3":0.75},{"time":8.1333,"x":-24.4,"y":-24.07,"curve":"stepped"},{"time":8.2,"x":-24.4,"y":-24.07,"curve":0.25,"c3":0.75},{"time":8.3,"curve":"stepped"},{"time":8.5667,"curve":0.25,"c3":0.75},{"time":8.7,"x":-24.4,"y":-24.07,"curve":"stepped"},{"time":8.7667,"x":-24.4,"y":-24.07,"curve":0.25,"c3":0.75},{"time":8.8667,"curve":"stepped"},{"time":9.1333,"curve":0.25,"c3":0.75},{"time":9.2667,"x":-24.4,"y":-24.07,"curve":"stepped"},{"time":9.3333,"x":-24.4,"y":-24.07,"curve":0.25,"c3":0.75},{"time":9.4333,"curve":"stepped"},{"time":9.7,"curve":0.25,"c3":0.75},{"time":9.8333,"x":-24.4,"y":-24.07,"curve":"stepped"},{"time":9.9,"x":-24.4,"y":-24.07,"curve":0.25,"c3":0.75},{"time":10}]},"Левая Лапа":{"translate":[{"time":2.2333,"curve":0.25,"c3":0.75},{"time":2.3667,"x":26.38,"y":0.43,"curve":0.25,"c3":0.75},{"time":2.5333,"curve":"stepped"},{"time":2.8,"curve":0.25,"c3":0.75},{"time":2.9333,"x":26.38,"y":0.43,"curve":0.25,"c3":0.75},{"time":3.1,"curve":"stepped"},{"time":3.3667,"curve":0.25,"c3":0.75},{"time":3.5,"x":26.38,"y":0.43,"curve":0.25,"c3":0.75},{"time":3.6667,"curve":"stepped"},{"time":3.9333,"curve":0.25,"c3":0.75},{"time":4.0667,"x":26.38,"y":0.43,"curve":0.25,"c3":0.75},{"time":4.2333,"curve":"stepped"},{"time":8,"curve":0.25,"c3":0.75},{"time":8.1333,"x":26.38,"y":0.43,"curve":0.25,"c3":0.75},{"time":8.3,"curve":"stepped"},{"time":8.5667,"curve":0.25,"c3":0.75},{"time":8.7,"x":26.38,"y":0.43,"curve":0.25,"c3":0.75},{"time":8.8667,"curve":"stepped"},{"time":9.1333,"curve":0.25,"c3":0.75},{"time":9.2667,"x":26.38,"y":0.43,"curve":0.25,"c3":0.75},{"time":9.4333,"curve":"stepped"},{"time":9.7,"curve":0.25,"c3":0.75},{"time":9.8333,"x":26.38,"y":0.43,"curve":0.25,"c3":0.75},{"time":10}]},"bone49":{"scale":[{"time":1.6667,"curve":0.25,"c3":0.75},{"time":2.1667,"x":1.122,"y":1.122,"curve":"stepped"},{"time":3.9333,"x":1.122,"y":1.122,"curve":0.25,"c3":0.75},{"time":4.7,"curve":"stepped"},{"time":7.7333,"curve":0.25,"c3":0.75},{"time":8.3,"x":1.122,"y":1.122,"curve":"stepped"},{"time":9.3333,"x":1.122,"y":1.122,"curve":0.25,"c3":0.75},{"time":10}]},"bone48":{"scale":[{"time":1.6667,"curve":0.25,"c3":0.75},{"time":2.1667,"x":1.122,"y":1.122,"curve":"stepped"},{"time":3.9333,"x":1.122,"y":1.122,"curve":0.25,"c3":0.75},{"time":4.7,"curve":"stepped"},{"time":7.7333,"curve":0.25,"c3":0.75},{"time":8.3,"x":1.122,"y":1.122,"curve":"stepped"},{"time":9.3333,"x":1.122,"y":1.122,"curve":0.25,"c3":0.75},{"time":10}]},"bone51":{"rotate":[{"curve":0.25,"c3":0.75},{"time":1.1667,"angle":-1.89,"curve":0.25,"c3":0.75},{"time":2.5,"curve":0.25,"c3":0.75},{"time":3.6667,"angle":-1.89,"curve":0.25,"c3":0.75},{"time":5,"curve":0.25,"c3":0.75},{"time":6.1667,"angle":-1.89,"curve":0.25,"c3":0.75},{"time":7.5,"curve":0.25,"c3":0.75},{"time":8.6667,"angle":-1.89,"curve":0.25,"c3":0.75},{"time":10}]},"bone52":{"rotate":[{"curve":0.25,"c3":0.75},{"time":1.1667,"angle":-1.89,"curve":0.25,"c3":0.75},{"time":2.5,"curve":0.25,"c3":0.75},{"time":3.6667,"angle":-1.89,"curve":0.25,"c3":0.75},{"time":5,"curve":0.25,"c3":0.75},{"time":6.1667,"angle":-1.89,"curve":0.25,"c3":0.75},{"time":7.5,"curve":0.25,"c3":0.75},{"time":8.6667,"angle":-1.89,"curve":0.25,"c3":0.75},{"time":10}]},"bone53":{"rotate":[{"curve":0.25,"c3":0.75},{"time":1.1667,"angle":-1.89,"curve":0.25,"c3":0.75},{"time":2.5,"curve":0.25,"c3":0.75},{"time":3.6667,"angle":-1.89,"curve":0.25,"c3":0.75},{"time":5,"curve":0.25,"c3":0.75},{"time":6.1667,"angle":-1.89,"curve":0.25,"c3":0.75},{"time":7.5,"curve":0.25,"c3":0.75},{"time":8.6667,"angle":-1.89,"curve":0.25,"c3":0.75},{"time":10}]},"bone54":{"rotate":[{"curve":0.25,"c3":0.75},{"time":1.1667,"angle":-1.89,"curve":0.25,"c3":0.75},{"time":2.5,"curve":0.25,"c3":0.75},{"time":3.6667,"angle":-1.89,"curve":0.25,"c3":0.75},{"time":5,"curve":0.25,"c3":0.75},{"time":6.1667,"angle":-1.89,"curve":0.25,"c3":0.75},{"time":7.5,"curve":0.25,"c3":0.75},{"time":8.6667,"angle":-1.89,"curve":0.25,"c3":0.75},{"time":10}]},"bone55":{"rotate":[{"curve":0.25,"c3":0.75},{"time":1.1667,"angle":-1.89,"curve":0.25,"c3":0.75},{"time":2.5,"curve":0.25,"c3":0.75},{"time":3.6667,"angle":-1.89,"curve":0.25,"c3":0.75},{"time":5,"curve":0.25,"c3":0.75},{"time":6.1667,"angle":-1.89,"curve":0.25,"c3":0.75},{"time":7.5,"curve":0.25,"c3":0.75},{"time":8.6667,"angle":-1.89,"curve":0.25,"c3":0.75},{"time":10}]}}}}},[0]]],0,0,[0],[-1],[129]],[[[89,"particles/builtin-particle",[{"hash":3958058022,"name":"particles/builtin-particle|builtin/internal/particle-vs-legacy:lpvs_main|tinted-fs:add","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_texCoord1","format":32,"location":0,"defines":[]},{"name":"a_texCoord2","format":32,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]},{"name":"a_texCoord","format":32,"location":3,"defines":[]},{"name":"a_position","format":32,"location":4,"defines":["!CC_INSTANCE_PARTICLE"]},{"name":"a_texCoord4","format":44,"location":5,"defines":["CC_INSTANCE_PARTICLE"]},{"name":"a_color1","format":32,"location":9,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","format":32,"location":7,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","format":32,"location":8,"defines":["CC_RENDER_MODE"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n  highp vec4 cc_reflectionProbeData1;\n  highp vec4 cc_reflectionProbeData2;\n  highp vec4 cc_reflectionProbeBlendData1;\n  highp vec4 cc_reflectionProbeBlendData2;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\nin vec3 a_texCoord;\n#if !CC_INSTANCE_PARTICLE\n in vec3 a_position;\n#endif\n#if CC_INSTANCE_PARTICLE\n in vec4 a_texCoord4;\n#endif\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  #if !CC_INSTANCE_PARTICLE\n    vec4 pos = vec4(a_position.xyz, 1);\n  #endif\n  #if CC_INSTANCE_PARTICLE\n    vec4 pos = vec4(a_texCoord4.xyz, 1);\n  #endif\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #endif\n  #if !ROTATION_OVER_TIME_MODULE_ENABLE\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #endif\n      #if CC_RENDER_MODE != 0 && CC_RENDER_MODE != 1\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #endif\n    #if CC_RENDER_MODE == 4\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #endif\n  #if CC_RENDER_MODE == 4\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  #if !CC_INSTANCE_PARTICLE\n    uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  #endif\n  #if CC_INSTANCE_PARTICLE\n    uv = computeUV(a_texCoord4.w, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  #endif\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nlayout(std140) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\n   uniform vec4 nodeRotation;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\nattribute vec3 a_texCoord;\n#if !CC_INSTANCE_PARTICLE\n attribute vec3 a_position;\n#endif\n#if CC_INSTANCE_PARTICLE\n attribute vec4 a_texCoord4;\n#endif\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  #if !CC_INSTANCE_PARTICLE\n    vec4 pos = vec4(a_position.xyz, 1);\n  #endif\n  #if CC_INSTANCE_PARTICLE\n    vec4 pos = vec4(a_texCoord4.xyz, 1);\n  #endif\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #endif\n  #if !ROTATION_OVER_TIME_MODULE_ENABLE\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #endif\n      #if CC_RENDER_MODE != 0 && CC_RENDER_MODE != 1\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #endif\n    #if CC_RENDER_MODE == 4\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #endif\n  #if CC_RENDER_MODE == 4\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  #if !CC_INSTANCE_PARTICLE\n    uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  #endif\n  #if CC_INSTANCE_PARTICLE\n    uv = computeUV(a_texCoord4.w, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  #endif\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\n  uniform vec4 tintColor;\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture2D(mainTexture, uv);\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = add(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":60,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":43}},"defines":[{"name":"CC_RENDER_MODE","type":"number","range":[0,4]},{"name":"CC_INSTANCE_PARTICLE","type":"boolean"},{"name":"CC_USE_WORLD_SPACE","type":"boolean"},{"name":"ROTATION_OVER_TIME_MODULE_ENABLE","type":"boolean"}]},{"hash":3441772896,"name":"particles/builtin-particle|builtin/internal/particle-vs-legacy:lpvs_main|tinted-fs:multiply","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_texCoord1","format":32,"location":0,"defines":[]},{"name":"a_texCoord2","format":32,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]},{"name":"a_texCoord","format":32,"location":3,"defines":[]},{"name":"a_position","format":32,"location":4,"defines":["!CC_INSTANCE_PARTICLE"]},{"name":"a_texCoord4","format":44,"location":5,"defines":["CC_INSTANCE_PARTICLE"]},{"name":"a_color1","format":32,"location":9,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","format":32,"location":7,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","format":32,"location":8,"defines":["CC_RENDER_MODE"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n  highp vec4 cc_reflectionProbeData1;\n  highp vec4 cc_reflectionProbeData2;\n  highp vec4 cc_reflectionProbeBlendData1;\n  highp vec4 cc_reflectionProbeBlendData2;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\nin vec3 a_texCoord;\n#if !CC_INSTANCE_PARTICLE\n in vec3 a_position;\n#endif\n#if CC_INSTANCE_PARTICLE\n in vec4 a_texCoord4;\n#endif\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  #if !CC_INSTANCE_PARTICLE\n    vec4 pos = vec4(a_position.xyz, 1);\n  #endif\n  #if CC_INSTANCE_PARTICLE\n    vec4 pos = vec4(a_texCoord4.xyz, 1);\n  #endif\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #endif\n  #if !ROTATION_OVER_TIME_MODULE_ENABLE\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #endif\n      #if CC_RENDER_MODE != 0 && CC_RENDER_MODE != 1\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #endif\n    #if CC_RENDER_MODE == 4\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #endif\n  #if CC_RENDER_MODE == 4\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  #if !CC_INSTANCE_PARTICLE\n    uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  #endif\n  #if CC_INSTANCE_PARTICLE\n    uv = computeUV(a_texCoord4.w, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  #endif\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nlayout(std140) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = multiply(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\n   uniform vec4 nodeRotation;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\nattribute vec3 a_texCoord;\n#if !CC_INSTANCE_PARTICLE\n attribute vec3 a_position;\n#endif\n#if CC_INSTANCE_PARTICLE\n attribute vec4 a_texCoord4;\n#endif\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  #if !CC_INSTANCE_PARTICLE\n    vec4 pos = vec4(a_position.xyz, 1);\n  #endif\n  #if CC_INSTANCE_PARTICLE\n    vec4 pos = vec4(a_texCoord4.xyz, 1);\n  #endif\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #endif\n  #if !ROTATION_OVER_TIME_MODULE_ENABLE\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #endif\n      #if CC_RENDER_MODE != 0 && CC_RENDER_MODE != 1\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #endif\n    #if CC_RENDER_MODE == 4\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #endif\n  #if CC_RENDER_MODE == 4\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  #if !CC_INSTANCE_PARTICLE\n    uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  #endif\n  #if CC_INSTANCE_PARTICLE\n    uv = computeUV(a_texCoord4.w, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  #endif\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\n  uniform vec4 tintColor;\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture2D(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = multiply(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":60,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":43}},"defines":[{"name":"CC_RENDER_MODE","type":"number","range":[0,4]},{"name":"CC_INSTANCE_PARTICLE","type":"boolean"},{"name":"CC_USE_WORLD_SPACE","type":"boolean"},{"name":"ROTATION_OVER_TIME_MODULE_ENABLE","type":"boolean"}]},{"hash":868591613,"name":"particles/builtin-particle|builtin/internal/particle-vs-legacy:lpvs_main|no-tint-fs:addSmooth","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_texCoord1","format":32,"location":0,"defines":[]},{"name":"a_texCoord2","format":32,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]},{"name":"a_texCoord","format":32,"location":3,"defines":[]},{"name":"a_position","format":32,"location":4,"defines":["!CC_INSTANCE_PARTICLE"]},{"name":"a_texCoord4","format":44,"location":5,"defines":["CC_INSTANCE_PARTICLE"]},{"name":"a_color1","format":32,"location":9,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","format":32,"location":7,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","format":32,"location":8,"defines":["CC_RENDER_MODE"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n  highp vec4 cc_reflectionProbeData1;\n  highp vec4 cc_reflectionProbeData2;\n  highp vec4 cc_reflectionProbeBlendData1;\n  highp vec4 cc_reflectionProbeBlendData2;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\nin vec3 a_texCoord;\n#if !CC_INSTANCE_PARTICLE\n in vec3 a_position;\n#endif\n#if CC_INSTANCE_PARTICLE\n in vec4 a_texCoord4;\n#endif\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  #if !CC_INSTANCE_PARTICLE\n    vec4 pos = vec4(a_position.xyz, 1);\n  #endif\n  #if CC_INSTANCE_PARTICLE\n    vec4 pos = vec4(a_texCoord4.xyz, 1);\n  #endif\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #endif\n  #if !ROTATION_OVER_TIME_MODULE_ENABLE\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #endif\n      #if CC_RENDER_MODE != 0 && CC_RENDER_MODE != 1\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #endif\n    #if CC_RENDER_MODE == 4\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #endif\n  #if CC_RENDER_MODE == 4\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  #if !CC_INSTANCE_PARTICLE\n    uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  #endif\n  #if CC_INSTANCE_PARTICLE\n    uv = computeUV(a_texCoord4.w, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  #endif\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = addSmooth(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\n   uniform vec4 nodeRotation;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\nattribute vec3 a_texCoord;\n#if !CC_INSTANCE_PARTICLE\n attribute vec3 a_position;\n#endif\n#if CC_INSTANCE_PARTICLE\n attribute vec4 a_texCoord4;\n#endif\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  #if !CC_INSTANCE_PARTICLE\n    vec4 pos = vec4(a_position.xyz, 1);\n  #endif\n  #if CC_INSTANCE_PARTICLE\n    vec4 pos = vec4(a_texCoord4.xyz, 1);\n  #endif\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #endif\n  #if !ROTATION_OVER_TIME_MODULE_ENABLE\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #endif\n      #if CC_RENDER_MODE != 0 && CC_RENDER_MODE != 1\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #endif\n    #if CC_RENDER_MODE == 4\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #endif\n  #if CC_RENDER_MODE == 4\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  #if !CC_INSTANCE_PARTICLE\n    uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  #endif\n  #if CC_INSTANCE_PARTICLE\n    uv = computeUV(a_texCoord4.w, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  #endif\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture2D(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = addSmooth(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":60,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":42}},"defines":[{"name":"CC_RENDER_MODE","type":"number","range":[0,4]},{"name":"CC_INSTANCE_PARTICLE","type":"boolean"},{"name":"CC_USE_WORLD_SPACE","type":"boolean"},{"name":"ROTATION_OVER_TIME_MODULE_ENABLE","type":"boolean"}]},{"hash":2411109044,"name":"particles/builtin-particle|builtin/internal/particle-vs-legacy:lpvs_main|no-tint-fs:premultiplied","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_texCoord1","format":32,"location":0,"defines":[]},{"name":"a_texCoord2","format":32,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]},{"name":"a_texCoord","format":32,"location":3,"defines":[]},{"name":"a_position","format":32,"location":4,"defines":["!CC_INSTANCE_PARTICLE"]},{"name":"a_texCoord4","format":44,"location":5,"defines":["CC_INSTANCE_PARTICLE"]},{"name":"a_color1","format":32,"location":9,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","format":32,"location":7,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","format":32,"location":8,"defines":["CC_RENDER_MODE"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n  highp vec4 cc_reflectionProbeData1;\n  highp vec4 cc_reflectionProbeData2;\n  highp vec4 cc_reflectionProbeBlendData1;\n  highp vec4 cc_reflectionProbeBlendData2;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\nin vec3 a_texCoord;\n#if !CC_INSTANCE_PARTICLE\n in vec3 a_position;\n#endif\n#if CC_INSTANCE_PARTICLE\n in vec4 a_texCoord4;\n#endif\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  #if !CC_INSTANCE_PARTICLE\n    vec4 pos = vec4(a_position.xyz, 1);\n  #endif\n  #if CC_INSTANCE_PARTICLE\n    vec4 pos = vec4(a_texCoord4.xyz, 1);\n  #endif\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #endif\n  #if !ROTATION_OVER_TIME_MODULE_ENABLE\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #endif\n      #if CC_RENDER_MODE != 0 && CC_RENDER_MODE != 1\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #endif\n    #if CC_RENDER_MODE == 4\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #endif\n  #if CC_RENDER_MODE == 4\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  #if !CC_INSTANCE_PARTICLE\n    uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  #endif\n  #if CC_INSTANCE_PARTICLE\n    uv = computeUV(a_texCoord4.w, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  #endif\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = premultiplied(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\n   uniform vec4 nodeRotation;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\nattribute vec3 a_texCoord;\n#if !CC_INSTANCE_PARTICLE\n attribute vec3 a_position;\n#endif\n#if CC_INSTANCE_PARTICLE\n attribute vec4 a_texCoord4;\n#endif\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  #if !CC_INSTANCE_PARTICLE\n    vec4 pos = vec4(a_position.xyz, 1);\n  #endif\n  #if CC_INSTANCE_PARTICLE\n    vec4 pos = vec4(a_texCoord4.xyz, 1);\n  #endif\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #endif\n  #if !ROTATION_OVER_TIME_MODULE_ENABLE\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #endif\n      #if CC_RENDER_MODE != 0 && CC_RENDER_MODE != 1\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #endif\n    #if CC_RENDER_MODE == 4\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #endif\n  #if CC_RENDER_MODE == 4\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  #if !CC_INSTANCE_PARTICLE\n    uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  #endif\n  #if CC_INSTANCE_PARTICLE\n    uv = computeUV(a_texCoord4.w, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  #endif\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture2D(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = premultiplied(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":60,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":42}},"defines":[{"name":"CC_RENDER_MODE","type":"number","range":[0,4]},{"name":"CC_INSTANCE_PARTICLE","type":"boolean"},{"name":"CC_USE_WORLD_SPACE","type":"boolean"},{"name":"ROTATION_OVER_TIME_MODULE_ENABLE","type":"boolean"}]}],[{"name":"add","passes":[{"program":"particles/builtin-particle|builtin/internal/particle-vs-legacy:lpvs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5]}}},{"phase":"deferred-forward","propertyIndex":0,"program":"particles/builtin-particle|builtin/internal/particle-vs-legacy:lpvs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false}}]},{"name":"alpha-blend","passes":[{"program":"particles/builtin-particle|builtin/internal/particle-vs-legacy:lpvs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":0,"blendDstAlpha":1,"blendAlphaEq":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5]}}},{"phase":"deferred-forward","propertyIndex":0,"program":"particles/builtin-particle|builtin/internal/particle-vs-legacy:lpvs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":0,"blendDstAlpha":1,"blendAlphaEq":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false}}]},{"name":"add-multiply","passes":[{"program":"particles/builtin-particle|builtin/internal/particle-vs-legacy:lpvs_main|tinted-fs:multiply","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":7,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":3}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5]}}},{"phase":"deferred-forward","propertyIndex":0,"program":"particles/builtin-particle|builtin/internal/particle-vs-legacy:lpvs_main|tinted-fs:multiply","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":7,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":3}]},"depthStencilState":{"depthTest":true,"depthWrite":false}}]},{"name":"add-smooth","passes":[{"program":"particles/builtin-particle|builtin/internal/particle-vs-legacy:lpvs_main|no-tint-fs:addSmooth","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]}}},{"phase":"deferred-forward","propertyIndex":0,"program":"particles/builtin-particle|builtin/internal/particle-vs-legacy:lpvs_main|no-tint-fs:addSmooth","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false}}]},{"name":"premultiply-blend","passes":[{"program":"particles/builtin-particle|builtin/internal/particle-vs-legacy:lpvs_main|no-tint-fs:premultiplied","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":0,"blendDstAlpha":1,"blendAlphaEq":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]}}},{"phase":"deferred-forward","propertyIndex":0,"program":"particles/builtin-particle|builtin/internal/particle-vs-legacy:lpvs_main|no-tint-fs:premultiplied","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":0,"blendDstAlpha":1,"blendAlphaEq":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false}}]}]]],0,0,[],[],[]],[[[14,"LeaderItem"],[27,"LeaderItem",33554432,[-4,-5,-6,-7],[[5,-2,[0,"dcoDtmmjBAEqzCGqwTieA1"],[5,1080,139]],[10,0,-3,[0,"1djZAPJRhKw5vwpr/e8o7o"],1]],[2,"e5JNc1wz5Ka7BAIpCWovGR",null,null,null,-1,0],[1,0,15.549999999999955,0],[1,0.9,0.9,1]],[76,"coin",33554432,1,[[5,-8,[0,"bb2fSFD7lOcqNjeZGdNoTs"],[5,600,600]],[23,-9,[0,"41MUzg4wlO6Zut5Xe/hN5K"],0]],[2,"80/7Dn/mZIFqkTmsejzpnS",null,null,null,1,0],[1,235.897,7.471,0],[1,0.1,0.1,1]],[9,"UsernameLabel",33554432,1,[[7,-10,[0,"5ejmZziApMZZdRDiC4CV+i"],[5,241.796875,63],[0,0,0]],[86,"Username",0,50,50,50,true,-11,[0,"a0JW1KirNOCK/5+XUuBvv1"]]],[2,"e2t7CbcfpL25yW7gt0bUu6",null,null,null,1,0],[1,-349.822,-24.807,0]],[9,"CoinsLabel",33554432,1,[[7,-12,[0,"d1jUyHkkhJ0LQ9i7bnk9Ae"],[5,194.6533203125,63],[0,1,0]],[86,"1000000",2,50,50,50,true,-13,[0,"8e9/wHVUxNfb7AR/hVezp8"]]],[2,"7cDcoWQ3dDrYcp6Ohu2xl9",null,null,null,1,0],[1,488.547,-24.80699999999979,0]],[9,"NumberLabel",33554432,1,[[7,-14,[0,"b89csIrNBNrKU2SvYrp0Lm"],[5,27.8076171875,63],[0,0,0]],[24,"1",50,50,50,true,-15,[0,"19BiSpnixI9bLlc8/9Ggi2"]]],[2,"72dg7DPO9OPodRlkNi5Jme",null,null,null,1,0],[1,-488.932,-24.80699999999979,0]]],0,[0,3,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,-3,4,0,-4,5,0,0,2,0,0,2,0,0,3,0,0,3,0,0,4,0,0,4,0,0,5,0,0,5,0,4,1,15],[0,0],[1,1],[1,130]],[[[14,"FriendItem"],[27,"FriendItem",33554432,[-4,-5,-6,-7],[[5,-2,[0,"99zJYJaqNEK59bXCjVebaG"],[5,1080,139]],[23,-3,[0,"a9rLh0PnZE1JGmt8963/FI"],1]],[2,"34DZqjdKBL2rR5MmAcBF3G",null,null,null,-1,0],[1,0,15.549999999999955,0],[1,0.9,0.9,1]],[39,"UsernameLabel",33554432,1,[-9],[[28,-8,[0,"fcoXUHJ49PUapR+OLw9rV/"]]],[2,"74wy4+gjpGd7JB3SbPMEn+",null,null,null,1,0]],[9,"UsernameLabel",33554432,2,[[7,-10,[0,"8dchhQF5ZMDKi0QpaW1IUS"],[5,241.796875,50.4],[0,0,0]],[51,"Username",50,50,true,-11,[0,"1ceBCDqURKubGxpHoFxBek"]]],[2,"22QNdqng9HYoemZqRMA6Vm",null,null,null,1,0],[1,-419.435,-24.807,0]],[39,"NumberLabel",33554432,1,[-13],[[28,-12,[0,"d2oI6iVJdG2qswpd2pC33g"]]],[2,"ea09yeKudD4q4+oDnTfMah",null,null,null,1,0]],[9,"NumberLabel",33554432,4,[[7,-14,[0,"4dwwS4zkFBCapGJT1OnWhJ"],[5,27.8076171875,50.4],[0,0,0]],[51,"1",50,50,true,-15,[0,"7e3BVlfblI1IWSn+htVlLm"]]],[2,"d3B/ATQ95By6hAdwnUck5B",null,null,null,1,0],[1,-488.932,-24.807,0]],[31,"CoinsLabel",33554432,1,[-17],[[28,-16,[0,"59v3KPPGBOwJTvfpfeB4iC"]]],[2,"26A3yjWdJG15uSB8LPVNLM",null,null,null,1,0],[1,478.596,0,0]],[9,"CoinsLabel",33554432,6,[[7,-18,[0,"5d010nbxRI8o65KPsarJD/"],[5,194.6533203125,50.4],[0,1,0]],[151,"1000000",2,50,50,-19,[0,"47ht15cHpBLZz0jf2DU+wc"]]],[2,"97hxGoCrhL7IGsLUTi4cFH",null,null,null,1,0],[1,9.951,-24.807,0]],[76,"coin",33554432,1,[[5,-20,[0,"65iwXvFTBOpKL09coH7ZPU"],[5,600,600]],[23,-21,[0,"4aXfj4wQBPMqPNtK1GtwcT"],0]],[2,"86GlRk8FlNo4AraWa1TfF7",null,null,null,1,0],[1,235.897,0,0],[1,0.1,0.1,1]]],0,[0,3,1,0,0,1,0,0,1,0,-1,2,0,-2,4,0,-3,6,0,-4,8,0,0,2,0,-1,3,0,0,3,0,0,3,0,0,4,0,-1,5,0,0,5,0,0,5,0,0,6,0,-1,7,0,0,7,0,0,7,0,0,8,0,0,8,0,4,1,21],[0,0],[1,1],[1,131]],[[{"name":"default_scrollbar_vertical_bg","rect":{"x":0,"y":0,"width":15,"height":30},"offset":{"x":0,"y":0},"originalSize":{"width":15,"height":30},"rotated":false,"capInsets":[4,10,4,10],"vertices":{"rawPosition":[-7.5,-15,0,7.5,-15,0,-7.5,15,0,7.5,15,0],"indexes":[0,1,2,2,1,3],"uv":[0,30,15,30,0,0,15,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-7.5,"y":-15,"z":0},"maxPos":{"x":7.5,"y":15,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[4],0,[0],[6],[132]]]]
